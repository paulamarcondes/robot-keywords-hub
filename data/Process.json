{
  "specversion": 3,
  "name": "Process",
  "doc": "<p>Robot Framework library for running processes.</p>\n<p>This library utilizes Python's <a href=\"http://docs.python.org/library/subprocess.html\">subprocess</a> module and its <a href=\"http://docs.python.org/library/subprocess.html#popen-constructor\">Popen</a> class.</p>\n<p>The library has following main usages:</p>\n<ul>\n<li>Running processes in system and waiting for their completion using <a href=\"#Run%20Process\" class=\"name\">Run Process</a> keyword.</li>\n<li>Starting processes on background using <a href=\"#Start%20Process\" class=\"name\">Start Process</a>.</li>\n<li>Waiting started process to complete using <a href=\"#Wait%20For%20Process\" class=\"name\">Wait For Process</a> or stopping them with <a href=\"#Terminate%20Process\" class=\"name\">Terminate Process</a> or <a href=\"#Terminate%20All%20Processes\" class=\"name\">Terminate All Processes</a>.</li>\n</ul>\n<h3 id=\"Table of contents\">Table of contents</h3>\n<ul>\n<li><a href=\"#Specifying%20command%20and%20arguments\" class=\"name\">Specifying command and arguments</a></li>\n<li><a href=\"#Process%20configuration\" class=\"name\">Process configuration</a></li>\n<li><a href=\"#Active%20process\" class=\"name\">Active process</a></li>\n<li><a href=\"#Result%20object\" class=\"name\">Result object</a></li>\n<li><a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a></li>\n<li><a href=\"#Example\" class=\"name\">Example</a></li>\n<li><a href=\"#Keywords\" class=\"name\">Keywords</a></li>\n</ul>\n<h2 id=\"Specifying command and arguments\">Specifying command and arguments</h2>\n<p>Both <a href=\"#Run%20Process\" class=\"name\">Run Process</a> and <a href=\"#Start%20Process\" class=\"name\">Start Process</a> accept the command to execute and all arguments passed to the command as separate arguments. This makes usage convenient and also allows these keywords to automatically escape possible spaces and other special characters in commands and arguments. Notice that if a command accepts options that themselves accept values, these options and their values must be given as separate arguments.</p>\n<p>When <a href=\"#Running%20processes%20in%20shell\" class=\"name\">running processes in shell</a>, it is also possible to give the whole command to execute as a single string. The command can then contain multiple commands to be run together. When using this approach, the caller is responsible on escaping.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Run%20Process\" class=\"name\">Run Process</a></td>\n<td>${tools}${/}prog.py</td>\n<td>argument</td>\n<td>second arg with spaces</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Run%20Process\" class=\"name\">Run Process</a></td>\n<td>java</td>\n<td>-jar</td>\n<td>${jars}${/}example.jar</td>\n<td>--option</td>\n<td>value</td>\n</tr>\n<tr>\n<td><a href=\"#Run%20Process\" class=\"name\">Run Process</a></td>\n<td>prog.py \"one arg\" &amp;&amp; tool.sh</td>\n<td>shell=yes</td>\n<td>cwd=${tools}</td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>Possible non-string arguments are converted to strings automatically.</p>\n<h2 id=\"Process configuration\">Process configuration</h2>\n<p><a href=\"#Run%20Process\" class=\"name\">Run Process</a> and <a href=\"#Start%20Process\" class=\"name\">Start Process</a> keywords can be configured using optional configuration arguments. These arguments must be given after other arguments passed to these keywords and must use the <code>name=value</code> syntax. Available configuration arguments are listed below and discussed further in the subsequent sections.</p>\n<table border=\"1\">\n<tr>\n<th>Name</th>\n<th>Explanation</th>\n</tr>\n<tr>\n<td>shell</td>\n<td>Specify whether to run the command in a shell or not.</td>\n</tr>\n<tr>\n<td>cwd</td>\n<td>Specify the working directory.</td>\n</tr>\n<tr>\n<td>env</td>\n<td>Specify environment variables given to the process.</td>\n</tr>\n<tr>\n<td>**env_extra</td>\n<td>Override named environment variables using <code>env:&lt;name&gt;=&lt;value&gt;</code> syntax.</td>\n</tr>\n<tr>\n<td>stdout</td>\n<td>Path to a file where to write standard output.</td>\n</tr>\n<tr>\n<td>stderr</td>\n<td>Path to a file where to write standard error.</td>\n</tr>\n<tr>\n<td>stdin</td>\n<td>Configure process standard input. New in RF 4.1.2.</td>\n</tr>\n<tr>\n<td>output_encoding</td>\n<td>Encoding to use when reading command outputs.</td>\n</tr>\n<tr>\n<td>alias</td>\n<td>A custom name given to the process.</td>\n</tr>\n</table>\n<p>Note that possible equal signs in other arguments passed to <a href=\"#Run%20Process\" class=\"name\">Run Process</a> and <a href=\"#Start%20Process\" class=\"name\">Start Process</a> must be escaped with a backslash like <code>name\\=value</code>. See <a href=\"#Run%20Process\" class=\"name\">Run Process</a> for an example.</p>\n<h3 id=\"Running processes in shell\">Running processes in shell</h3>\n<p>The <code>shell</code> argument specifies whether to run the process in a shell or not. By default, shell is not used, which means that shell specific commands, like <code>copy</code> and <code>dir</code> on Windows, are not available. You can, however, run shell scripts and batch files without using a shell.</p>\n<p>Giving the <code>shell</code> argument any non-false value, such as <code>shell=True</code>, changes the program to be executed in a shell. It allows using the shell capabilities, but can also make the process invocation operating system dependent. Having a shell between the actually started process and this library can also interfere communication with the process such as stopping it and reading its outputs. Because of these problems, it is recommended to use the shell only when absolutely necessary.</p>\n<p>When using a shell it is possible to give the whole command to execute as a single string. See <a href=\"#Specifying%20command%20and%20arguments\" class=\"name\">Specifying command and arguments</a> section for examples and more details in general.</p>\n<h3 id=\"Current working directory\">Current working directory</h3>\n<p>By default, the child process will be executed in the same directory as the parent process, the process running Robot Framework, is executed. This can be changed by giving an alternative location using the <code>cwd</code> argument. Forward slashes in the given path are automatically converted to backslashes on Windows.</p>\n<p><a href=\"#Standard%20output%20and%20error%20streams\" class=\"name\">Standard output and error streams</a>, when redirected to files, are also relative to the current working directory possibly set using the <code>cwd</code> argument.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Run%20Process\" class=\"name\">Run Process</a></td>\n<td>prog.exe</td>\n<td>cwd=${ROOT}/directory</td>\n<td>stdout=stdout.txt</td>\n</tr>\n</table>\n<h3 id=\"Environment variables\">Environment variables</h3>\n<p>The child process will get a copy of the parent process's environment variables by default. The <code>env</code> argument can be used to give the child a custom environment as a Python dictionary. If there is a need to specify only certain environment variable, it is possible to use the <code>env:&lt;name&gt;=&lt;value&gt;</code> format to set or override only that named variables. It is also possible to use these two approaches together.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Run%20Process\" class=\"name\">Run Process</a></td>\n<td>program</td>\n<td>env=${environ}</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Run%20Process\" class=\"name\">Run Process</a></td>\n<td>program</td>\n<td>env:http_proxy=10.144.1.10:8080</td>\n<td>env:PATH=%{PATH}${:}${PROGDIR}</td>\n</tr>\n<tr>\n<td><a href=\"#Run%20Process\" class=\"name\">Run Process</a></td>\n<td>program</td>\n<td>env=${environ}</td>\n<td>env:EXTRA=value</td>\n</tr>\n</table>\n<h3 id=\"Standard output and error streams\">Standard output and error streams</h3>\n<p>By default, processes are run so that their standard output and standard error streams are kept in the memory. This typically works fine, but there can be problems if the amount of output is large or unlimited. Prior to Robot Framework 7.3 the limit was smaller than nowadays and reaching it caused a deadlock.</p>\n<p>To avoid the above-mentioned problems, it is possible to use <code>stdout</code> and <code>stderr</code> arguments to specify files on the file system where to redirect the output. This can also be useful if other processes or other keywords need to read or manipulate the output somehow.</p>\n<p>Given <code>stdout</code> and <code>stderr</code> paths are relative to the <a href=\"#Current%20working%20directory\" class=\"name\">current working directory</a>. Forward slashes in the given paths are automatically converted to backslashes on Windows.</p>\n<p>Regardless are outputs redirected to files or not, they are accessible through the <a href=\"#Result%20object\" class=\"name\">result object</a> returned when the process ends. Commands are expected to write outputs using the console encoding, but <a href=\"#Output%20encoding\" class=\"name\">output encoding</a> can be configured using the <code>output_encoding</code> argument if needed.</p>\n<p>As a special feature, it is possible to redirect the standard error to the standard output by using <code>stderr=STDOUT</code>.</p>\n<p>If you are not interested in output at all, you can explicitly ignore it by using a special value <code>DEVNULL</code> both with <code>stdout</code> and <code>stderr</code>. For example, <code>stdout=DEVNULL</code> is the same as redirecting output on console with <code>&gt; /dev/null</code> on UNIX-like operating systems or <code>&gt; NUL</code> on Windows. This way even a huge amount of output cannot cause problems, but naturally the output is not available after execution either.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${result} =</td>\n<td><a href=\"#Run%20Process\" class=\"name\">Run Process</a></td>\n<td>program</td>\n<td>stdout=${TEMPDIR}/stdout.txt</td>\n<td>stderr=${TEMPDIR}/stderr.txt</td>\n</tr>\n<tr>\n<td><span class=\"name\">Log Many</span></td>\n<td>stdout: ${result.stdout}</td>\n<td>stderr: ${result.stderr}</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td><a href=\"#Run%20Process\" class=\"name\">Run Process</a></td>\n<td>program</td>\n<td>stderr=STDOUT</td>\n<td></td>\n</tr>\n<tr>\n<td><span class=\"name\">Log</span></td>\n<td>all output: ${result.stdout}</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td><a href=\"#Run%20Process\" class=\"name\">Run Process</a></td>\n<td>program</td>\n<td>stdout=DEVNULL</td>\n<td>stderr=DEVNULL</td>\n</tr>\n</table>\n<p>Note that the created output files are not automatically removed after execution. The user is responsible to remove them if needed.</p>\n<h3 id=\"Standard input stream\">Standard input stream</h3>\n<p>The <code>stdin</code> argument makes it possible to pass information to the standard input stream of the started process. How its value is interpreted is explained in the table below.</p>\n<table border=\"1\">\n<tr>\n<th>Value</th>\n<th>Explanation</th>\n</tr>\n<tr>\n<td>String <code>NONE</code></td>\n<td>Inherit stdin from the parent process. This is the default.</td>\n</tr>\n<tr>\n<td>String <code>PIPE</code></td>\n<td>Make stdin a pipe that can be written to.</td>\n</tr>\n<tr>\n<td>Path to a file</td>\n<td>Open the specified file and use it as the stdin.</td>\n</tr>\n<tr>\n<td>Any other string</td>\n<td>Create a temporary file with the text as its content and use it as the stdin.</td>\n</tr>\n<tr>\n<td>Any non-string value</td>\n<td>Used as-is. Could be a file descriptor, stdout of another process, etc.</td>\n</tr>\n</table>\n<p>Values <code>PIPE</code> and <code>NONE</code> are case-insensitive and internally mapped to <code>subprocess.PIPE</code> and <code>None</code>, respectively, when calling <a href=\"https://docs.python.org/3/library/subprocess.html#subprocess.Popen\">subprocess.Popen</a>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Run%20Process\" class=\"name\">Run Process</a></td>\n<td>command</td>\n<td>stdin=PIPE</td>\n</tr>\n<tr>\n<td><a href=\"#Run%20Process\" class=\"name\">Run Process</a></td>\n<td>command</td>\n<td>stdin=${CURDIR}/stdin.txt</td>\n</tr>\n<tr>\n<td><a href=\"#Run%20Process\" class=\"name\">Run Process</a></td>\n<td>command</td>\n<td>stdin=Stdin as text.</td>\n</tr>\n</table>\n<p>The support to configure <code>stdin</code> is new in Robot Framework 4.1.2. Its default value used to be <code>PIPE</code> until Robot Framework 7.0.</p>\n<h3 id=\"Output encoding\">Output encoding</h3>\n<p>Executed commands are, by default, expected to write outputs to the <a href=\"#Standard%20output%20and%20error%20streams\" class=\"name\">standard output and error streams</a> using the encoding used by the system console. If the command uses some other encoding, that can be configured using the <code>output_encoding</code> argument. This is especially useful on Windows where the console uses a different encoding than rest of the system, and many commands use the general system encoding instead of the console encoding.</p>\n<p>The value used with the <code>output_encoding</code> argument must be a valid encoding and must match the encoding actually used by the command. As a convenience, it is possible to use strings <code>CONSOLE</code> and <code>SYSTEM</code> to specify that the console or system encoding is used, respectively. If produced outputs use different encoding then configured, values got through the <a href=\"#Result%20object\" class=\"name\">result object</a> will be invalid.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Start%20Process\" class=\"name\">Start Process</a></td>\n<td>program</td>\n<td>output_encoding=UTF-8</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Run%20Process\" class=\"name\">Run Process</a></td>\n<td>program</td>\n<td>stdout=${path}</td>\n<td>output_encoding=SYSTEM</td>\n</tr>\n</table>\n<h3 id=\"Alias\">Alias</h3>\n<p>A custom name given to the process that can be used when selecting the <a href=\"#Active%20process\" class=\"name\">active process</a>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Start%20Process\" class=\"name\">Start Process</a></td>\n<td>program</td>\n<td>alias=example</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Run%20Process\" class=\"name\">Run Process</a></td>\n<td>python</td>\n<td>-c</td>\n<td>print('hello')</td>\n<td>alias=hello</td>\n</tr>\n</table>\n<h2 id=\"Active process\">Active process</h2>\n<p>The library keeps record which of the started processes is currently active. By default, it is the latest process started with <a href=\"#Start%20Process\" class=\"name\">Start Process</a>, but <a href=\"#Switch%20Process\" class=\"name\">Switch Process</a> can be used to activate a different process. Using <a href=\"#Run%20Process\" class=\"name\">Run Process</a> does not affect the active process.</p>\n<p>The keywords that operate on started processes will use the active process by default, but it is possible to explicitly select a different process using the <code>handle</code> argument. The handle can be an <code>alias</code> explicitly given to <a href=\"#Start%20Process\" class=\"name\">Start Process</a> or the process object returned by it.</p>\n<h2 id=\"Result object\">Result object</h2>\n<p><a href=\"#Run%20Process\" class=\"name\">Run Process</a>, <a href=\"#Wait%20For%20Process\" class=\"name\">Wait For Process</a> and <a href=\"#Terminate%20Process\" class=\"name\">Terminate Process</a> keywords return a result object that contains information about the process execution as its attributes. The same result object, or some of its attributes, can also be get using <a href=\"#Get%20Process%20Result\" class=\"name\">Get Process Result</a> keyword. Attributes available in the object are documented in the table below.</p>\n<table border=\"1\">\n<tr>\n<th>Attribute</th>\n<th>Explanation</th>\n</tr>\n<tr>\n<td>rc</td>\n<td>Return code of the process as an integer.</td>\n</tr>\n<tr>\n<td>stdout</td>\n<td>Contents of the standard output stream.</td>\n</tr>\n<tr>\n<td>stderr</td>\n<td>Contents of the standard error stream.</td>\n</tr>\n<tr>\n<td>stdout_path</td>\n<td>Path where stdout was redirected or <code>None</code> if not redirected.</td>\n</tr>\n<tr>\n<td>stderr_path</td>\n<td>Path where stderr was redirected or <code>None</code> if not redirected.</td>\n</tr>\n</table>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${result} =</td>\n<td><a href=\"#Run%20Process\" class=\"name\">Run Process</a></td>\n<td>program</td>\n</tr>\n<tr>\n<td><span class=\"name\">Should Be Equal As Integers</span></td>\n<td>${result.rc}</td>\n<td>0</td>\n</tr>\n<tr>\n<td><span class=\"name\">Should Match</span></td>\n<td>${result.stdout}</td>\n<td>Some t?xt*</td>\n</tr>\n<tr>\n<td><span class=\"name\">Should Be Empty</span></td>\n<td>${result.stderr}</td>\n<td></td>\n</tr>\n<tr>\n<td>${stdout} =</td>\n<td><span class=\"name\">Get File</span></td>\n<td>${result.stdout_path}</td>\n</tr>\n<tr>\n<td><span class=\"name\">Should Be Equal</span></td>\n<td>${stdout}</td>\n<td>${result.stdout}</td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Be Empty</span></td>\n<td>${result.stderr_path}</td>\n<td></td>\n</tr>\n</table>\n<p>Notice that in <code>stdout</code> and <code>stderr</code> content possible trailing newline is removed and <code>\\r\\n</code> converted to <code>\\n</code> automatically. If you need to see the original process output, redirect it to a file using <a href=\"#Process%20configuration\" class=\"name\">process configuration</a> and read it from there.</p>\n<h2 id=\"Boolean arguments\">Boolean arguments</h2>\n<p>Some keywords accept arguments that are handled as Boolean values true or false. If such an argument is given as a string, it is considered false if it is an empty string or equal to <code>FALSE</code>, <code>NONE</code>, <code>NO</code>, <code>OFF</code> or <code>0</code>, case-insensitively. Other strings are considered true regardless their value, and other argument types are tested using the same <a href=\"http://docs.python.org/library/stdtypes.html#truth\">rules as in Python</a>.</p>\n<p>True examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Terminate%20Process\" class=\"name\">Terminate Process</a></td>\n<td>kill=True</td>\n<td># Strings are generally true.</td>\n</tr>\n<tr>\n<td><a href=\"#Terminate%20Process\" class=\"name\">Terminate Process</a></td>\n<td>kill=yes</td>\n<td># Same as the above.</td>\n</tr>\n<tr>\n<td><a href=\"#Terminate%20Process\" class=\"name\">Terminate Process</a></td>\n<td>kill=${TRUE}</td>\n<td># Python <code>True</code> is true.</td>\n</tr>\n<tr>\n<td><a href=\"#Terminate%20Process\" class=\"name\">Terminate Process</a></td>\n<td>kill=${42}</td>\n<td># Numbers other than 0 are true.</td>\n</tr>\n</table>\n<p>False examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Terminate%20Process\" class=\"name\">Terminate Process</a></td>\n<td>kill=False</td>\n<td># String <code>false</code> is false.</td>\n</tr>\n<tr>\n<td><a href=\"#Terminate%20Process\" class=\"name\">Terminate Process</a></td>\n<td>kill=no</td>\n<td># Also string <code>no</code> is false.</td>\n</tr>\n<tr>\n<td><a href=\"#Terminate%20Process\" class=\"name\">Terminate Process</a></td>\n<td>kill=${EMPTY}</td>\n<td># Empty string is false.</td>\n</tr>\n<tr>\n<td><a href=\"#Terminate%20Process\" class=\"name\">Terminate Process</a></td>\n<td>kill=${FALSE}</td>\n<td># Python <code>False</code> is false.</td>\n</tr>\n</table>\n<h2 id=\"Example\">Example</h2>\n<pre>\n<b>***</b> Settings <b>***</b>\nLibrary           Process\nSuite Teardown    <a href=\"#Terminate%20All%20Processes\" class=\"name\">Terminate All Processes</a>    kill=True\n\n<b>***</b> Test Cases <b>***</b>\nExample\n    <a href=\"#Start%20Process\" class=\"name\">Start Process</a>    program    arg1    arg2    alias=First\n    ${handle} =    <a href=\"#Start%20Process\" class=\"name\">Start Process</a>    command.sh arg | command2.sh    shell=True    cwd=/path\n    ${result} =    <a href=\"#Run%20Process\" class=\"name\">Run Process</a>    ${CURDIR}/script.py\n    <span class=\"name\">Should Not Contain</span>    ${result.stdout}    FAIL\n    <a href=\"#Terminate%20Process\" class=\"name\">Terminate Process</a>    ${handle}\n    ${result} =    <a href=\"#Wait%20For%20Process\" class=\"name\">Wait For Process</a>    First\n    <span class=\"name\">Should Be Equal As Integers</span>    ${result.rc}    0\n</pre>",
  "version": "7.3.2",
  "generated": "2025-10-20T00:07:36+00:00",
  "type": "LIBRARY",
  "scope": "GLOBAL",
  "docFormat": "HTML",
  "source": "C:\\Projects\\robot-keywords-hub\\robot-hub-env\\Lib\\site-packages\\robot\\libraries\\Process.py",
  "lineno": 36,
  "tags": [],
  "inits": [],
  "keywords": [
    {
      "name": "Get Process Id",
      "args": [
        {
          "name": "handle",
          "type": null,
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "handle=None"
        }
      ],
      "returnType": null,
      "doc": "<p>Returns the process ID (pid) of the process as an integer.</p>\n<p>If <code>handle</code> is not given, uses the current <a href=\"#Active%20process\" class=\"name\">active process</a>.</p>\n<p>Starting from Robot Framework 5.0, it is also possible to directly access the <code>pid</code> attribute of the <code>subprocess.Popen</code> object returned by <a href=\"#Start%20Process\" class=\"name\">Start Process</a> like <code>${process.pid}</code>.</p>",
      "shortdoc": "Returns the process ID (pid) of the process as an integer.",
      "tags": [],
      "source": "C:\\Projects\\robot-keywords-hub\\robot-hub-env\\Lib\\site-packages\\robot\\libraries\\Process.py",
      "lineno": 753
    },
    {
      "name": "Get Process Object",
      "args": [
        {
          "name": "handle",
          "type": null,
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "handle=None"
        }
      ],
      "returnType": null,
      "doc": "<p>Return the underlying <code>subprocess.Popen</code> object.</p>\n<p>If <code>handle</code> is not given, uses the current <a href=\"#Active%20process\" class=\"name\">active process</a>.</p>\n<p>Starting from Robot Framework 5.0, <a href=\"#Start%20Process\" class=\"name\">Start Process</a> returns the created <code>subprocess.Popen</code> object, not a generic handle, making this keyword mostly redundant.</p>",
      "shortdoc": "Return the underlying ``subprocess.Popen`` object.",
      "tags": [],
      "source": "C:\\Projects\\robot-keywords-hub\\robot-hub-env\\Lib\\site-packages\\robot\\libraries\\Process.py",
      "lineno": 764
    },
    {
      "name": "Get Process Result",
      "args": [
        {
          "name": "handle",
          "type": null,
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "handle=None"
        },
        {
          "name": "rc",
          "type": null,
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "rc=False"
        },
        {
          "name": "stdout",
          "type": null,
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "stdout=False"
        },
        {
          "name": "stderr",
          "type": null,
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "stderr=False"
        },
        {
          "name": "stdout_path",
          "type": null,
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "stdout_path=False"
        },
        {
          "name": "stderr_path",
          "type": null,
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "stderr_path=False"
        }
      ],
      "returnType": null,
      "doc": "<p>Returns the specified <a href=\"#Result%20object\" class=\"name\">result object</a> or some of its attributes.</p>\n<p>The given <code>handle</code> specifies the process whose results should be returned. If no <code>handle</code> is given, results of the current <a href=\"#Active%20process\" class=\"name\">active process</a> are returned. In either case, the process must have been finishes before this keyword can be used. In practice this means that processes started with <a href=\"#Start%20Process\" class=\"name\">Start Process</a> must be finished either with <a href=\"#Wait%20For%20Process\" class=\"name\">Wait For Process</a> or <a href=\"#Terminate%20Process\" class=\"name\">Terminate Process</a> before using this keyword.</p>\n<p>If no other arguments than the optional <code>handle</code> are given, a whole <a href=\"#Result%20object\" class=\"name\">result object</a> is returned. If one or more of the other arguments are given any true value, only the specified attributes of the <a href=\"#Result%20object\" class=\"name\">result object</a> are returned. These attributes are always returned in the same order as arguments are specified in the keyword signature. See <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a> section for more details about true and false values.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Run Process</td>\n<td>python</td>\n<td>-c</td>\n<td>print('Hello, world!')</td>\n<td>alias=myproc</td>\n<td></td>\n</tr>\n<tr>\n<td># Get result object</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Get Process Result</td>\n<td>myproc</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${result.rc}</td>\n<td>${0}</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${result.stdout}</td>\n<td>Hello, world!</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Empty</td>\n<td>${result.stderr}</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td># Get one attribute</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${stdout} =</td>\n<td>Get Process Result</td>\n<td>myproc</td>\n<td>stdout=true</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${stdout}</td>\n<td>Hello, world!</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td># Multiple attributes</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${stdout}</td>\n<td>${stderr} =</td>\n<td>Get Process Result</td>\n<td>myproc</td>\n<td>stdout=yes</td>\n<td>stderr=yes</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${stdout}</td>\n<td>Hello, world!</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Empty</td>\n<td>${stderr}</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>Although getting results of a previously executed process can be handy in general, the main use case for this keyword is returning results over the remote library interface. The remote interface does not support returning the whole result object, but individual attributes can be returned without problems.</p>",
      "shortdoc": "Returns the specified `result object` or some of its attributes.",
      "tags": [],
      "source": "C:\\Projects\\robot-keywords-hub\\robot-hub-env\\Lib\\site-packages\\robot\\libraries\\Process.py",
      "lineno": 775
    },
    {
      "name": "Is Process Running",
      "args": [
        {
          "name": "handle",
          "type": null,
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "handle=None"
        }
      ],
      "returnType": null,
      "doc": "<p>Checks is the process running or not.</p>\n<p>If <code>handle</code> is not given, uses the current <a href=\"#Active%20process\" class=\"name\">active process</a>.</p>\n<p>Returns <code>True</code> if the process is still running and <code>False</code> otherwise.</p>",
      "shortdoc": "Checks is the process running or not.",
      "tags": [],
      "source": "C:\\Projects\\robot-keywords-hub\\robot-hub-env\\Lib\\site-packages\\robot\\libraries\\Process.py",
      "lineno": 482
    },
    {
      "name": "Join Command Line",
      "args": [
        {
          "name": "args",
          "type": null,
          "defaultValue": null,
          "kind": "VAR_POSITIONAL",
          "required": false,
          "repr": "*args"
        }
      ],
      "returnType": null,
      "doc": "<p>Joins arguments into one command line string.</p>\n<p>In resulting command line string arguments are delimited with a space, arguments containing spaces are surrounded with quotes, and possible quotes are escaped with a backslash.</p>\n<p>If this keyword is given only one argument and that is a list-like object, then the values of that list are joined instead.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${cmd} =</td>\n<td>Join Command Line</td>\n<td>--option</td>\n<td>value with spaces</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${cmd}</td>\n<td>--option \"value with spaces\"</td>\n<td></td>\n</tr>\n</table>",
      "shortdoc": "Joins arguments into one command line string.",
      "tags": [],
      "source": "C:\\Projects\\robot-keywords-hub\\robot-hub-env\\Lib\\site-packages\\robot\\libraries\\Process.py",
      "lineno": 891
    },
    {
      "name": "Process Should Be Running",
      "args": [
        {
          "name": "handle",
          "type": null,
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "handle=None"
        },
        {
          "name": "error_message",
          "type": null,
          "defaultValue": "Process is not running.",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "error_message=Process is not running."
        }
      ],
      "returnType": null,
      "doc": "<p>Verifies that the process is running.</p>\n<p>If <code>handle</code> is not given, uses the current <a href=\"#Active%20process\" class=\"name\">active process</a>.</p>\n<p>Fails if the process has stopped.</p>",
      "shortdoc": "Verifies that the process is running.",
      "tags": [],
      "source": "C:\\Projects\\robot-keywords-hub\\robot-hub-env\\Lib\\site-packages\\robot\\libraries\\Process.py",
      "lineno": 491
    },
    {
      "name": "Process Should Be Stopped",
      "args": [
        {
          "name": "handle",
          "type": null,
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "handle=None"
        },
        {
          "name": "error_message",
          "type": null,
          "defaultValue": "Process is running.",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "error_message=Process is running."
        }
      ],
      "returnType": null,
      "doc": "<p>Verifies that the process is not running.</p>\n<p>If <code>handle</code> is not given, uses the current <a href=\"#Active%20process\" class=\"name\">active process</a>.</p>\n<p>Fails if the process is still running.</p>",
      "shortdoc": "Verifies that the process is not running.",
      "tags": [],
      "source": "C:\\Projects\\robot-keywords-hub\\robot-hub-env\\Lib\\site-packages\\robot\\libraries\\Process.py",
      "lineno": 505
    },
    {
      "name": "Run Process",
      "args": [
        {
          "name": "command",
          "type": null,
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "command"
        },
        {
          "name": "arguments",
          "type": null,
          "defaultValue": null,
          "kind": "VAR_POSITIONAL",
          "required": false,
          "repr": "*arguments"
        },
        {
          "name": "cwd",
          "type": null,
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "cwd=None"
        },
        {
          "name": "shell",
          "type": null,
          "defaultValue": "False",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "shell=False"
        },
        {
          "name": "stdout",
          "type": null,
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "stdout=None"
        },
        {
          "name": "stderr",
          "type": null,
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "stderr=None"
        },
        {
          "name": "stdin",
          "type": null,
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "stdin=None"
        },
        {
          "name": "output_encoding",
          "type": null,
          "defaultValue": "CONSOLE",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "output_encoding=CONSOLE"
        },
        {
          "name": "alias",
          "type": null,
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "alias=None"
        },
        {
          "name": "timeout",
          "type": null,
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "timeout=None"
        },
        {
          "name": "on_timeout",
          "type": null,
          "defaultValue": "terminate",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "on_timeout=terminate"
        },
        {
          "name": "env",
          "type": null,
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "env=None"
        },
        {
          "name": "env_extra",
          "type": null,
          "defaultValue": null,
          "kind": "VAR_NAMED",
          "required": false,
          "repr": "**env_extra"
        }
      ],
      "returnType": null,
      "doc": "<p>Runs a process and waits for it to complete.</p>\n<p><code>command</code> and <code>arguments</code> specify the command to execute and arguments passed to it. See <a href=\"#Specifying%20command%20and%20arguments\" class=\"name\">Specifying command and arguments</a> for more details.</p>\n<p>The started process can be configured using <code>cwd</code>, <code>shell</code>, <code>stdout</code>, <code>stderr</code>, <code>stdin</code>, <code>output_encoding</code>, <code>alias</code>, <code>env</code> and <code>env_extra</code> parameters that are documented in the <a href=\"#Process%20configuration\" class=\"name\">Process configuration</a> section.</p>\n<p>Configuration related to waiting for processes consists of <code>timeout</code> and <code>on_timeout</code> parameters that have same semantics than with the <a href=\"#Wait%20For%20Process\" class=\"name\">Wait For Process</a> keyword.</p>\n<p>Process outputs are, by default, written into in-memory buffers. This typically works fine, but there can be problems if the amount of output is large or unlimited. To avoid such problems, outputs can be redirected to files using the <code>stdout</code> and <code>stderr</code> configuration parameters. For more information see the <a href=\"#Standard%20output%20and%20error%20streams\" class=\"name\">Standard output and error streams</a> section.</p>\n<p>Returns a <a href=\"#Result%20object\" class=\"name\">result object</a> containing information about the execution.</p>\n<p>Note that possible equal signs in <code>command</code> and <code>arguments</code> must be escaped with a backslash (e.g. <code>name\\=value</code>).</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${result} =</td>\n<td>Run Process</td>\n<td>python</td>\n<td>-c</td>\n<td>print('Hello, world!')</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${result.stdout}</td>\n<td>Hello, world!</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Run Process</td>\n<td>${command}</td>\n<td>stdout=${CURDIR}/stdout.txt</td>\n<td>stderr=STDOUT</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Run Process</td>\n<td>${command}</td>\n<td>timeout=1min</td>\n<td>on_timeout=continue</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Run Process</td>\n<td>java -Dname\\=value Example</td>\n<td>shell=True</td>\n<td>cwd=${EXAMPLE}</td>\n</tr>\n</table>\n<p>This keyword does not change the <a href=\"#Active%20process\" class=\"name\">active process</a>.</p>",
      "shortdoc": "Runs a process and waits for it to complete.",
      "tags": [],
      "source": "C:\\Projects\\robot-keywords-hub\\robot-hub-env\\Lib\\site-packages\\robot\\libraries\\Process.py",
      "lineno": 334
    },
    {
      "name": "Send Signal To Process",
      "args": [
        {
          "name": "signal",
          "type": null,
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "signal"
        },
        {
          "name": "handle",
          "type": null,
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "handle=None"
        },
        {
          "name": "group",
          "type": null,
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "group=False"
        }
      ],
      "returnType": null,
      "doc": "<p>Sends the given <code>signal</code> to the specified process.</p>\n<p>If <code>handle</code> is not given, uses the current <a href=\"#Active%20process\" class=\"name\">active process</a>.</p>\n<p>Signal can be specified either as an integer as a signal name. In the latter case it is possible to give the name both with or without <code>SIG</code> prefix, but names are case-sensitive. For example, all the examples below send signal <code>INT (2)</code>:</p>\n<table border=\"1\">\n<tr>\n<td>Send Signal To Process</td>\n<td>2</td>\n<td></td>\n<td># Send to active process</td>\n</tr>\n<tr>\n<td>Send Signal To Process</td>\n<td>INT</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Send Signal To Process</td>\n<td>SIGINT</td>\n<td>myproc</td>\n<td># Send to named process</td>\n</tr>\n</table>\n<p>This keyword is only supported on Unix-like machines, not on Windows. What signals are supported depends on the system. For a list of existing signals on your system, see the Unix man pages related to signal handling (typically <code>man signal</code> or <code>man 7 signal</code>).</p>\n<p>By default sends the signal only to the parent process, not to possible child processes started by it. Notice that when <a href=\"#Running%20processes%20in%20shell\" class=\"name\">running processes in shell</a>, the shell is the parent process and it depends on the system does the shell propagate the signal to the actual started process.</p>\n<p>To send the signal to the whole process group, <code>group</code> argument can be set to any true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>).</p>",
      "shortdoc": "Sends the given ``signal`` to the specified process.",
      "tags": [],
      "source": "C:\\Projects\\robot-keywords-hub\\robot-hub-env\\Lib\\site-packages\\robot\\libraries\\Process.py",
      "lineno": 698
    },
    {
      "name": "Split Command Line",
      "args": [
        {
          "name": "args",
          "type": null,
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "args"
        },
        {
          "name": "escaping",
          "type": null,
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "escaping=False"
        }
      ],
      "returnType": null,
      "doc": "<p>Splits command line string into a list of arguments.</p>\n<p>String is split from spaces, but argument surrounded in quotes may contain spaces in them.</p>\n<p>If <code>escaping</code> is given a true value, then backslash is treated as an escape character. It can escape unquoted spaces, quotes inside quotes, and so on, but it also requires using doubling backslashes in Windows paths and elsewhere.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>@{cmd} =</td>\n<td>Split Command Line</td>\n<td>--option \"value with spaces\"</td>\n</tr>\n<tr>\n<td>Should Be True</td>\n<td>$cmd == ['--option', 'value with spaces']</td>\n<td></td>\n</tr>\n</table>",
      "shortdoc": "Splits command line string into a list of arguments.",
      "tags": [],
      "source": "C:\\Projects\\robot-keywords-hub\\robot-hub-env\\Lib\\site-packages\\robot\\libraries\\Process.py",
      "lineno": 874
    },
    {
      "name": "Start Process",
      "args": [
        {
          "name": "command",
          "type": null,
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "command"
        },
        {
          "name": "arguments",
          "type": null,
          "defaultValue": null,
          "kind": "VAR_POSITIONAL",
          "required": false,
          "repr": "*arguments"
        },
        {
          "name": "cwd",
          "type": null,
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "cwd=None"
        },
        {
          "name": "shell",
          "type": null,
          "defaultValue": "False",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "shell=False"
        },
        {
          "name": "stdout",
          "type": null,
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "stdout=None"
        },
        {
          "name": "stderr",
          "type": null,
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "stderr=None"
        },
        {
          "name": "stdin",
          "type": null,
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "stdin=None"
        },
        {
          "name": "output_encoding",
          "type": null,
          "defaultValue": "CONSOLE",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "output_encoding=CONSOLE"
        },
        {
          "name": "alias",
          "type": null,
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "alias=None"
        },
        {
          "name": "env",
          "type": null,
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "env=None"
        },
        {
          "name": "env_extra",
          "type": null,
          "defaultValue": null,
          "kind": "VAR_NAMED",
          "required": false,
          "repr": "**env_extra"
        }
      ],
      "returnType": null,
      "doc": "<p>Starts a new process on background.</p>\n<p>See <a href=\"#Specifying%20command%20and%20arguments\" class=\"name\">Specifying command and arguments</a> and <a href=\"#Process%20configuration\" class=\"name\">Process configuration</a> sections for more information about the arguments, and <a href=\"#Run%20Process\" class=\"name\">Run Process</a> keyword for related examples. This includes information about redirecting process outputs to avoid process handing due to output buffers getting full.</p>\n<p>Makes the started process new <a href=\"#Active%20process\" class=\"name\">active process</a>. Returns the created <a href=\"https://docs.python.org/3/library/subprocess.html#popen-constructor\">subprocess.Popen</a> object which can be used later to activate this process. <code>Popen</code> attributes like <code>pid</code> can also be accessed directly.</p>\n<p>Processes are started so that they create a new process group. This allows terminating and sending signals to possible child processes.</p>\n<p>Examples:</p>\n<p>Start process and wait for it to end later using an alias:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Start%20Process\" class=\"name\">Start Process</a></td>\n<td>${command}</td>\n<td>alias=example</td>\n</tr>\n<tr>\n<td># Other keywords</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td><a href=\"#Wait%20For%20Process\" class=\"name\">Wait For Process</a></td>\n<td>example</td>\n</tr>\n</table>\n<p>Use returned <code>Popen</code> object:</p>\n<table border=\"1\">\n<tr>\n<td>${process} =</td>\n<td><a href=\"#Start%20Process\" class=\"name\">Start Process</a></td>\n<td>${command}</td>\n</tr>\n<tr>\n<td><span class=\"name\">Log</span></td>\n<td>PID: ${process.pid}</td>\n<td></td>\n</tr>\n<tr>\n<td># Other keywords</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td><a href=\"#Terminate%20Process\" class=\"name\">Terminate Process</a></td>\n<td>${process}</td>\n</tr>\n</table>\n<p>Use started process in a pipeline with another process:</p>\n<table border=\"1\">\n<tr>\n<td>${process} =</td>\n<td><a href=\"#Start%20Process\" class=\"name\">Start Process</a></td>\n<td>python</td>\n<td>-c</td>\n<td>print('Hello, world!')</td>\n<td></td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td><a href=\"#Run%20Process\" class=\"name\">Run Process</a></td>\n<td>python</td>\n<td>-c</td>\n<td>import sys; print(sys.stdin.read().upper().strip())</td>\n<td>stdin=${process.stdout}</td>\n</tr>\n<tr>\n<td><a href=\"#Wait%20For%20Process\" class=\"name\">Wait For Process</a></td>\n<td>${process}</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><span class=\"name\">Should Be Equal</span></td>\n<td>${result.stdout}</td>\n<td>HELLO, WORLD!</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>Returning a <code>subprocess.Popen</code> object is new in Robot Framework 5.0. Earlier versions returned a generic handle and getting the process object required using <a href=\"#Get%20Process%20Object\" class=\"name\">Get Process Object</a> separately.</p>",
      "shortdoc": "Starts a new process on background.",
      "tags": [],
      "source": "C:\\Projects\\robot-keywords-hub\\robot-hub-env\\Lib\\site-packages\\robot\\libraries\\Process.py",
      "lineno": 405
    },
    {
      "name": "Switch Process",
      "args": [
        {
          "name": "handle",
          "type": null,
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "handle"
        }
      ],
      "returnType": null,
      "doc": "<p>Makes the specified process the current <a href=\"#Active%20process\" class=\"name\">active process</a>.</p>\n<p>The handle can be an identifier returned by <a href=\"#Start%20Process\" class=\"name\">Start Process</a> or the <code>alias</code> given to it explicitly.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Start Process</td>\n<td>prog1</td>\n<td>alias=process1</td>\n</tr>\n<tr>\n<td>Start Process</td>\n<td>prog2</td>\n<td>alias=process2</td>\n</tr>\n<tr>\n<td># currently active process is process2</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Switch Process</td>\n<td>process1</td>\n<td></td>\n</tr>\n<tr>\n<td># now active process is process1</td>\n<td></td>\n<td></td>\n</tr>\n</table>",
      "shortdoc": "Makes the specified process the current `active process`.",
      "tags": [],
      "source": "C:\\Projects\\robot-keywords-hub\\robot-hub-env\\Lib\\site-packages\\robot\\libraries\\Process.py",
      "lineno": 852
    },
    {
      "name": "Terminate All Processes",
      "args": [
        {
          "name": "kill",
          "type": null,
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "kill=False"
        }
      ],
      "returnType": null,
      "doc": "<p>Terminates all still running processes started by this library.</p>\n<p>This keyword can be used in suite teardown or elsewhere to make sure that all processes are stopped,</p>\n<p>Tries to terminate processes gracefully by default, but can be configured to forcefully kill them immediately. See <a href=\"#Terminate%20Process\" class=\"name\">Terminate Process</a> that this keyword uses internally for more details.</p>",
      "shortdoc": "Terminates all still running processes started by this library.",
      "tags": [],
      "source": "C:\\Projects\\robot-keywords-hub\\robot-hub-env\\Lib\\site-packages\\robot\\libraries\\Process.py",
      "lineno": 683
    },
    {
      "name": "Terminate Process",
      "args": [
        {
          "name": "handle",
          "type": null,
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "handle=None"
        },
        {
          "name": "kill",
          "type": null,
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "kill=False"
        }
      ],
      "returnType": null,
      "doc": "<p>Stops the process gracefully or forcefully.</p>\n<p>If <code>handle</code> is not given, uses the current <a href=\"#Active%20process\" class=\"name\">active process</a>.</p>\n<p>By default, first tries to stop the process gracefully. If the process does not stop in 30 seconds, or <code>kill</code> argument is given a true value, (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) kills the process forcefully. Stops also all the child processes of the originally started process.</p>\n<p>Waits for the process to stop after terminating it. Returns a <a href=\"#Result%20object\" class=\"name\">result object</a> containing information about the execution similarly as <a href=\"#Wait%20For%20Process\" class=\"name\">Wait For Process</a>.</p>\n<p>On Unix-like machines graceful termination is done using <code>TERM (15)</code> signal and killing using <code>KILL (9)</code>. Use <a href=\"#Send%20Signal%20To%20Process\" class=\"name\">Send Signal To Process</a> instead if you just want to send either of these signals without waiting for the process to stop.</p>\n<p>On Windows graceful termination is done using <code>CTRL_BREAK_EVENT</code> event and killing using Win32 API function <code>TerminateProcess()</code>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${result} =</td>\n<td>Terminate Process</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal As Integers</td>\n<td>${result.rc}</td>\n<td>-15</td>\n<td># On Unixes</td>\n</tr>\n<tr>\n<td>Terminate Process</td>\n<td>myproc</td>\n<td>kill=true</td>\n<td></td>\n</tr>\n</table>\n<p>Limitations:</p>\n<ul>\n<li>On Windows forceful kill only stops the main process, not possible child processes.</li>\n</ul>",
      "shortdoc": "Stops the process gracefully or forcefully.",
      "tags": [],
      "source": "C:\\Projects\\robot-keywords-hub\\robot-hub-env\\Lib\\site-packages\\robot\\libraries\\Process.py",
      "lineno": 615
    },
    {
      "name": "Wait For Process",
      "args": [
        {
          "name": "handle",
          "type": null,
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "handle=None"
        },
        {
          "name": "timeout",
          "type": null,
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "timeout=None"
        },
        {
          "name": "on_timeout",
          "type": null,
          "defaultValue": "continue",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "on_timeout=continue"
        }
      ],
      "returnType": null,
      "doc": "<p>Waits for the process to complete or to reach the given timeout.</p>\n<p>The process to wait for must have been started earlier with <a href=\"#Start%20Process\" class=\"name\">Start Process</a>. If <code>handle</code> is not given, uses the current <a href=\"#Active%20process\" class=\"name\">active process</a>.</p>\n<p><code>timeout</code> defines the maximum time to wait for the process. It can be given in <a href=\"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#time-format\">various time formats</a> supported by Robot Framework, for example, <code>42</code>, <code>42 s</code>, or <code>1 minute 30 seconds</code>. The timeout is ignored if it is Python <code>None</code> (default), string <code>NONE</code> (case-insensitively), zero, or negative.</p>\n<p><code>on_timeout</code> defines what to do if the timeout occurs. Possible values and corresponding actions are explained in the table below. Notice that reaching the timeout never fails the test.</p>\n<table border=\"1\">\n<tr>\n<th>Value</th>\n<th>Action</th>\n</tr>\n<tr>\n<td>continue</td>\n<td>The process is left running (default).</td>\n</tr>\n<tr>\n<td>terminate</td>\n<td>The process is gracefully terminated.</td>\n</tr>\n<tr>\n<td>kill</td>\n<td>The process is forcefully stopped.</td>\n</tr>\n</table>\n<p>See <a href=\"#Terminate%20Process\" class=\"name\">Terminate Process</a> keyword for more details how processes are terminated and killed.</p>\n<p>If the process ends before the timeout, or it is terminated or killed, this keyword returns a <a href=\"#Result%20object\" class=\"name\">result object</a> containing information about the execution. If the process is left running, Python <code>None</code> is returned instead.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td># Process ends cleanly</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Wait For Process</td>\n<td>example</td>\n<td></td>\n</tr>\n<tr>\n<td>Process Should Be Stopped</td>\n<td>example</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal As Integers</td>\n<td>${result.rc}</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td># Process does not end</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Wait For Process</td>\n<td>timeout=42 secs</td>\n<td></td>\n</tr>\n<tr>\n<td>Process Should Be Running</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${result}</td>\n<td>${NONE}</td>\n<td></td>\n</tr>\n<tr>\n<td># Kill non-ending process</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Wait For Process</td>\n<td>timeout=1min 30s</td>\n<td>on_timeout=kill</td>\n</tr>\n<tr>\n<td>Process Should Be Stopped</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal As Integers</td>\n<td>${result.rc}</td>\n<td>-9</td>\n<td></td>\n</tr>\n</table>\n<p>Note: If Robot Framework's test or keyword timeout is exceeded while this keyword is waiting for the process to end, the process is killed to avoid leaving it running on the background. This is new in Robot Framework 7.3.</p>",
      "shortdoc": "Waits for the process to complete or to reach the given timeout.",
      "tags": [],
      "source": "C:\\Projects\\robot-keywords-hub\\robot-hub-env\\Lib\\site-packages\\robot\\libraries\\Process.py",
      "lineno": 519
    }
  ],
  "typedocs": []
}