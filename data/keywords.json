[
  {
    "name": "Add Cookie",
    "library": "Browser",
    "args": [
      {
        "name": "name",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name: str"
      },
      {
        "name": "value",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "value: str"
      },
      {
        "name": "url",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "url: str | None = None"
      },
      {
        "name": "domain",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "domain: str | None = None"
      },
      {
        "name": "path",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "path: str | None = None"
      },
      {
        "name": "expires",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "datetime",
              "typedoc": "datetime",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "expires: str | datetime | None = None"
      },
      {
        "name": "httpOnly",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "httpOnly: bool | None = None"
      },
      {
        "name": "secure",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "secure: bool | None = None"
      },
      {
        "name": "sameSite",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "CookieSameSite",
              "typedoc": "CookieSameSite",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "sameSite: CookieSameSite | None = None"
      }
    ],
    "doc": "<p>Adds a cookie to currently active browser context.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>name</code></td>\n<td>Name of the cookie.</td>\n</tr>\n<tr>\n<td><code>value</code></td>\n<td>Given value for the cookie.</td>\n</tr>\n<tr>\n<td><code>url</code></td>\n<td>Given url for the cookie. Defaults to None. Either <code>url</code> or <code>domain</code> / <code>path</code> pair must be set.</td>\n</tr>\n<tr>\n<td><code>domain</code></td>\n<td>Given domain for the cookie. Defaults to None. Either <code>url</code> or <code>domain</code> / <code>path</code> pair must be set.</td>\n</tr>\n<tr>\n<td><code>path</code></td>\n<td>Given path for the cookie. Defaults to None. Either <code>url</code> or <code>domain</code> / <code>path</code> pair must be set.</td>\n</tr>\n<tr>\n<td><code>expires</code></td>\n<td>Given expiry for the cookie. Can be of date format or unix time or a datetime object. Supports the same formats as the <a href=\"http://robotframework.org/robotframework/latest/libraries/DateTime.html\">DateTime</a> library or an epoch timestamp. - example: 2027-09-28 16:21:35</td>\n</tr>\n<tr>\n<td><code>httpOnly</code></td>\n<td>Sets the httpOnly token.</td>\n</tr>\n<tr>\n<td><code>secure</code></td>\n<td>Sets the secure token.</td>\n</tr>\n<tr>\n<td><code>samesite</code></td>\n<td>Sets the samesite mode.</td>\n</tr>\n</table>\n<p>Example:</p>\n<pre>\n<a href=\"#Add%20Cookie\" class=\"name\">Add Cookie</a>   foo   bar   <a href=\"http://address.com/path/to/site\">http://address.com/path/to/site</a>                                     # Using url argument.\n<a href=\"#Add%20Cookie\" class=\"name\">Add Cookie</a>   foo   bar   domain=example.com                path=/foo/bar                     # Using domain and url arguments.\n<a href=\"#Add%20Cookie\" class=\"name\">Add Cookie</a>   foo   bar   <a href=\"http://address.com/path/to/site\">http://address.com/path/to/site</a>   expires=2027-09-28 16:21:35       # Expires as timestamp.\n<a href=\"#Add%20Cookie\" class=\"name\">Add Cookie</a>   foo   bar   <a href=\"http://address.com/path/to/site\">http://address.com/path/to/site</a>   expires=1822137695                # Expires as epoch seconds.\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4233\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Add%20Cookie"
  },
  {
    "name": "Add Locator Handler Click",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      },
      {
        "name": "click_selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "click_selector: str"
      },
      {
        "name": "",
        "type": null,
        "defaultValue": null,
        "kind": "NAMED_ONLY_MARKER",
        "required": false,
        "repr": "*"
      },
      {
        "name": "noWaitAfter",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "noWaitAfter: bool = True"
      },
      {
        "name": "times",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "times: int | None = None"
      },
      {
        "name": "click_clickCount",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "1",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "click_clickCount: int = 1"
      },
      {
        "name": "click_delay",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "0",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "click_delay: int = 0"
      },
      {
        "name": "click_force",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "click_force: bool = False"
      }
    ],
    "doc": "<p>Add a handler function which will activate when <span class=\"name\">selector</span> is visible and click.</p>\n<p>The handler will click the element indicated by <span class=\"name\">click_selector</span>.</p>\n<p>When testing a web page, sometimes unexpected overlays, example \"Accept Cookies\" dialog might appear and block the interaction with the page, like <a href=\"#Click\" class=\"name\">Click</a> keyword. These overlays can be problematic to handle, because they might appear randomly in the page. This keyword allows to create automatic method, which will close those overlays by clicking the element indicated by <code>click_selector</code>. Handler is activated when element indicated by <code>selector</code> is visible. For further information, see Playwright's <a href=\"https://playwright.dev/docs/api/class-page#page-add-locator-handler\">addLocatorHandler</a> method.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Is the selector to the element which indicated that locator handler should be called.</td>\n</tr>\n<tr>\n<td><code>noWaitAfter</code></td>\n<td>By default, after calling the handler Playwright will wait until the overlay becomes hidden, and only then library will continue with the action/assertion that triggered the handler. This option allows to opt-out of this behavior, so that overlay can stay visible after the handler has run.</td>\n</tr>\n<tr>\n<td><code>times</code></td>\n<td>Is the number of times to how often locator handler is is called. None is unlimited.</td>\n</tr>\n<tr>\n<td><code>click_selector</code></td>\n<td>Is the selector to the element to be clicked.</td>\n</tr>\n<tr>\n<td><code>click_clickCount</code></td>\n<td>Is the number of times to click the element.</td>\n</tr>\n<tr>\n<td><code>click_delay</code></td>\n<td>Time to wait between mousedown and mouseup in milliseconds. Defaults to 0.</td>\n</tr>\n<tr>\n<td><code>click_force</code></td>\n<td>Whether to bypass checks and dispatch the event directly. Defaults to false.</td>\n</tr>\n</table>\n<p>The arguments <span class=\"name\">click_selector</span>, <span class=\"name\">click_clickCount</span>, <span class=\"name\">click_delay</span> and <span class=\"name\">click_force</span> are same as <a href=\"#Click\" class=\"name\">Click</a> keyword. The <span class=\"name\">selector</span>, <span class=\"name\">noWaitAfter</span> and <span class=\"name\">times</span> are for the locator handler. The handler is tied to the active page, if there is need to add handler to another page, this keyword needs to be called separately for each page. If the <span class=\"name\">times</span> argument is set to positive value, the locator handler is removed after the handler has been called the specified number of times.</p>\n<p>Example add locator handler to click button with id=\"ButtonInOverlay\" when id=Overlay is visible:</p>\n<pre>\n<a href=\"#New%20Page\" class=\"name\">New Page</a>    ${URL}\n<a href=\"#Add%20Locator%20Handler%20Click\" class=\"name\">Add Locator Handler Click</a>    id=Overlay    id=ButtonInOverlay     # Add locator handler to page\n<a href=\"#Type%20Text\" class=\"name\">Type Text</a>    id:username    user    # If element with id=Overlay appears, the handler will click the button id=ButtonInOverlay\n<a href=\"#Type%20Text\" class=\"name\">Type Text</a>    id:password    password    # Or if overlay is visible here, then handler is called here\n<a href=\"#Click\" class=\"name\">Click</a>    id:login\n<a href=\"#Remove%20Locator%20Handler\" class=\"name\">Remove Locator Handler</a>    id:button    # Removes the locator handler from page\n</pre>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Add%20Locator%20Handler%20Click"
  },
  {
    "name": "Add Locator Handler Custom",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      },
      {
        "name": "handler_spec",
        "type": {
          "name": "list",
          "typedoc": "list",
          "nested": [
            {
              "name": "dict",
              "typedoc": "dictionary",
              "nested": [],
              "union": false
            }
          ],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "handler_spec: list[dict]"
      },
      {
        "name": "noWaitAfter",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "noWaitAfter: bool = True"
      },
      {
        "name": "times",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "times: int | None = None"
      }
    ],
    "doc": "<p>Add a handler function which will activate when <span class=\"name\">selector</span> is visible and performs handler specification.</p>\n<p>When element indicated by <span class=\"name\">selector</span> is visible, the handler will perform the actions specified in the <span class=\"name\">handler_spec</span>.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Is the selector to the element which indicated that locator handler should be called.</td>\n</tr>\n<tr>\n<td><code>noWaitAfter</code></td>\n<td>By default, after calling the handler Playwright will wait until the overlay becomes hidden, and only then library will continue with the action/assertion that triggered the handler. This option allows to opt-out of this behavior, so that overlay can stay visible after the handler has run.</td>\n</tr>\n<tr>\n<td><code>times</code></td>\n<td>Is the number of times to how often locator handler is is called. None is unlimited.</td>\n</tr>\n<tr>\n<td><code>handler_spec</code></td>\n<td>Is a list of dictionaries which defines the actions to be performed.</td>\n</tr>\n</table>\n<p>The <span class=\"name\">handler_spec</span> is a list of dictionaries, where each dictionary defines one action. The dictionary must contain the key <span class=\"name\">action</span> which defines the action to be performed. The action can be one of the following: <a href=\"https://playwright.dev/docs/api/class-locator#locator-click\">click</a>, <a href=\"https://playwright.dev/docs/api/class-locator#locator-fill\">fill</a>, <a href=\"https://playwright.dev/docs/api/class-locator#locator-check\">check</a> and <a href=\"https://playwright.dev/docs/api/class-locator#locator-uncheck\">uncheck</a>. Action is also case insensitive. The dictionary must also contain key <span class=\"name\">selector</span> which defines the element to be interacted with. The <span class=\"name\">fill</span> action must also contain the key <span class=\"name\">value</span> which defines the value to be filled in the element. Additional keys are passed to the action as keyword arguments. Example for the <a href=\"https://playwright.dev/docs/api/class-locator#locator-click\">click</a> action refer to the Playwright's documentation which options are possible.</p>\n<p>The <span class=\"name\">selector</span>, <span class=\"name\">noWaitAfter</span> and <span class=\"name\">times</span> are for the locator handler <a href=\"https://playwright.dev/docs/api/class-page#page-add-locator-handler\">method</a>. The handler is tied to the active page, if there is need to add handler to another page, this keyword needs to be called separately for each page. If the <span class=\"name\">times</span> argument is set to positive value, the locator handler is removed after the handler has been called the specified number of times.</p>\n<p>Running the handler will alter your page state mid-test. For example it will change the currently focused element and move the mouse. Make sure that keywords that run after the handler are self-contained and do not rely on the focus and mouse state being unchanged.</p>\n<p>Please note that the automatic argument conversion is not done for the <span class=\"name\">handler_spec</span> dictionary. This is because Robot Framework does not convert values inside the dictionary that are actually arguments to a separate Playwright API call. Therefore the user is responsible to convert the values to the correct type. Example if timeout is needed, the value must be converted to a number in Robot Framework test data side.</p>\n<p>Example adds locator handler to fill input id=overlayInput with value \"Hello\" and click element id=OverlayCloseButton when id=Overlay is visible:</p>\n<pre>\n<a href=\"#New%20Page\" class=\"name\">New Page</a>    ${URL}\nVAR    &amp;{handler_spec_fill}\n...    action=Fill\n...    selector=id=overlayInput\n...    value=Hello\nVAR    &amp;{handler_spec_click}\n...    action=click\n...    selector=id=OverlayCloseButton\n<a href=\"#Add%20Locator%20Handler%20Custom\" class=\"name\">Add Locator Handler Custom</a>\n...    id=overlay\n...    [${handler_spec_fill}, ${handler_spec_click}]\n<a href=\"#Type%20Text\" class=\"name\">Type Text</a>    id:username    user    # If element with id=Overlay appears, the handler will click the button id=ButtonInOverlay\n<a href=\"#Type%20Text\" class=\"name\">Type Text</a>    id:password    password    # Or if overlay is visible here, then handler is called here\n<a href=\"#Click\" class=\"name\">Click</a>    id:login\n</pre>\n<p>Example with click and different options and types:</p>\n<pre>\nVAR    &amp;{handler_spec}\n...    action=CLICK    # Action is case insensitive\n...    selector=id=OverlayCloseButton\n...    button=left\n...    clickCount=${1}\n...    delay=${0.1}\n...    force=${True}\nAdd Locator Handler Custom    id=overlay    [${handler_spec}]\n</pre>\n<p>The keyword can only handle click, fill, check and uncheck Playwright API calls. If there is a need for more complex interactions, it is recommended to create a custom js extension to handle the interactions.</p>\n<p>Example:</p>\n<pre>\nasync function customLocatorHandler(locator, pageLocator, clickLocator, page) {\n    console.log(\"Adding custom locator handler for: \" + locator);\n    const pageLocator = page.locator(locator).first();\n    await page.addLocatorHandler(\n        pageLocator,\n        async () =&gt; {\n            console.log(\"Handling custom locator: \" + clickLocator);\n            // More complex interactions can be added here\n            await page.locator(clickLocator).click();\n        }\n    );\n}\nexports.__esModule = true;\nexports.customLocatorHandler = customLocatorHandler;\n</pre>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Add%20Locator%20Handler%20Custom"
  },
  {
    "name": "Add Style Tag",
    "library": "Browser",
    "args": [
      {
        "name": "content",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "content: str"
      }
    ],
    "doc": "<p>Adds a &lt;style type=\"text/css\"&gt; tag with the content.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>content</code></td>\n<td>Raw CSS content to be injected into frame.</td>\n</tr>\n</table>\n<p>Example:</p>\n<pre>\n<a href=\"#Add%20Style%20Tag\" class=\"name\">Add Style Tag</a>    \\#username_field:focus {background-color: aqua;}\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4234\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Add%20Style%20Tag"
  },
  {
    "name": "Advance Clock",
    "library": "Browser",
    "args": [
      {
        "name": "time",
        "type": {
          "name": "timedelta",
          "typedoc": "timedelta",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "time: timedelta"
      },
      {
        "name": "advance_type",
        "type": {
          "name": "CLockAdvanceType",
          "typedoc": "CLockAdvanceType",
          "nested": [],
          "union": false
        },
        "defaultValue": "fast_forward",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "advance_type: CLockAdvanceType = fast_forward"
      }
    ],
    "doc": "<p>Advance the clock by a specified amount of time.</p>\n<table border=\"1\">\n<tr>\n<td>Argument</td>\n<td>Description</td>\n</tr>\n<tr>\n<td>time</td>\n<td>The time to advance.</td>\n</tr>\n<tr>\n<td>advance_type</td>\n<td>The type of advance. Default is <span class=\"name\">fast_forward</span>.</td>\n</tr>\n</table>\n<p>The <span class=\"name\">run_forward</span> advances the clock by firing all the time-related callbacks. The <span class=\"name\">fast_forward</span> advances the clock by jumping forward in time. Only fires due timers at most once.</p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Advance%20Clock"
  },
  {
    "name": "Cancel Download",
    "library": "Browser",
    "args": [
      {
        "name": "download",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "DownloadInfo",
              "typedoc": "DownloadInfo",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "download: DownloadInfo | str"
      }
    ],
    "doc": "<p>Cancels an active download.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td>download</td>\n<td>A <a href=\"#type-DownloadInfo\" class=\"name\">DownloadInfo</a> object or id of the download to be canceled.</td>\n</tr>\n</table>\n<p><a href=\"https://forum.robotframework.org/t//6478\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Cancel%20Download"
  },
  {
    "name": "Check Checkbox",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      },
      {
        "name": "force",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "force: bool = False"
      }
    ],
    "doc": "<p>Checks the checkbox or selects radio button found by <code>selector</code>.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n<td></td>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector of the checkbox. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n<td></td>\n</tr>\n<tr>\n<td><code>force</code></td>\n<td>Set to True to skip Playwright's [<a href=\"https://playwright.dev/docs/actionability\">https://playwright.dev/docs/actionability</a></td>\n<td>Actionability checks].</td>\n</tr>\n</table>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p>Does nothing if the element is already checked/selected.</p>\n<p><a href=\"https://forum.robotframework.org/t//4235\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Check%20Checkbox"
  },
  {
    "name": "Clear Permissions",
    "library": "Browser",
    "args": [],
    "doc": "<p>Clears all permissions from the current context.</p>\n<p><a href=\"https://forum.robotframework.org/t//4236\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Clear%20Permissions"
  },
  {
    "name": "Clear Text",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      }
    ],
    "doc": "<p>Clears the text field found by <code>selector</code>.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector of the text field. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n</table>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p><a href=\"https://forum.robotframework.org/t//4237\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Clear%20Text"
  },
  {
    "name": "Click",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      },
      {
        "name": "button",
        "type": {
          "name": "MouseButton",
          "typedoc": "MouseButton",
          "nested": [],
          "union": false
        },
        "defaultValue": "left",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "button: MouseButton = left"
      }
    ],
    "doc": "<p>Simulates mouse click on the element found by <code>selector</code>.</p>\n<p>This keyword clicks an element matching <code>selector</code> by performing the following steps:</p>\n<ul>\n<li>Find an element matches selector. If there is none, wait until a matching element is attached to the DOM.</li>\n<li>Wait for actionability checks on the matched element, unless <code>force</code> option is set. If the element is detached during the checks, the whole action is retried.</li>\n<li>Scroll the element into view if needed.</li>\n<li>Use <a href=\"#Mouse%20Button\" class=\"name\">Mouse Button</a> to click in the center of the element, or the specified position.</li>\n<li>Wait for initiated navigation to either succeed or fail.</li>\n</ul>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector element to click. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n<tr>\n<td><code>button</code></td>\n<td>Defaults to <code>left</code> if invalid.</td>\n</tr>\n</table>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#Click\" class=\"name\">Click</a>    id=button_location\n<a href=\"#Click\" class=\"name\">Click</a>    id=button_location    left\n<a href=\"#Click\" class=\"name\">Click</a>    id=button_location    right\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4238\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Click"
  },
  {
    "name": "Click With Options",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      },
      {
        "name": "button",
        "type": {
          "name": "MouseButton",
          "typedoc": "MouseButton",
          "nested": [],
          "union": false
        },
        "defaultValue": "left",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "button: MouseButton = left"
      },
      {
        "name": "modifiers",
        "type": {
          "name": "KeyboardModifier",
          "typedoc": "KeyboardModifier",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*modifiers: KeyboardModifier"
      },
      {
        "name": "clickCount",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "1",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "clickCount: int = 1"
      },
      {
        "name": "delay",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "delay: timedelta | None = None"
      },
      {
        "name": "force",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "force: bool = False"
      },
      {
        "name": "noWaitAfter",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "noWaitAfter: bool = False"
      },
      {
        "name": "position_x",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "float",
              "typedoc": "float",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "position_x: float | None = None"
      },
      {
        "name": "position_y",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "float",
              "typedoc": "float",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "position_y: float | None = None"
      },
      {
        "name": "trial",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "trial: bool = False"
      }
    ],
    "doc": "<p>Simulates mouse click on the element found by <code>selector</code>.</p>\n<p>This keyword clicks an element matching <code>selector</code> by performing the following steps:</p>\n<ul>\n<li>Find an element matches selector. If there is none, wait until a matching element is attached to the DOM.</li>\n<li>Wait for actionability checks on the matched element, unless <code>force</code> option is set. If the element is detached during the checks, the whole action is retried.</li>\n<li>Scroll the element into view if needed.</li>\n<li>Use <a href=\"#Mouse%20Button\" class=\"name\">Mouse Button</a> to click in the center of the element, or the specified position.</li>\n<li>Wait for initiated navigation to either succeed or fail, unless <code>noWaitAfter</code> option is set.</li>\n</ul>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector element to click. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n<tr>\n<td><code>button</code></td>\n<td>Defaults to <code>left</code> if invalid.</td>\n</tr>\n<tr>\n<td><code>*modifiers</code></td>\n<td>Modifier keys to press. Ensures that only these modifiers are pressed during the click, and then restores current modifiers back. If not specified, currently pressed modifiers are used. Modifiers can be specified in any order, and multiple modifiers can be specified. Valid modifier keys are <code>Control</code>, <code>Alt</code>, <code>Shift</code> and <code>Meta</code>. Due to the fact that the argument <span class=\"name\">*modifiers</span> is a positional only argument, all preceding keyword arguments have to be specified as positional arguments before <span class=\"name\">*modifiers</span>.</td>\n</tr>\n<tr>\n<td><code>clickCount</code></td>\n<td>Defaults to 1.</td>\n</tr>\n<tr>\n<td><code>delay</code></td>\n<td>Time to wait between mouse-down and mouse-up. Defaults to 0.</td>\n</tr>\n<tr>\n<td><code>position_x</code> <code>position_y</code></td>\n<td>A point to click relative to the top-left corner of element bounding-box. Only positive values within the bounding-box are allowed. If not specified, clicks to some visible point of the element.</td>\n</tr>\n<tr>\n<td><code>force</code></td>\n<td>Set to True to skip Playwright's Actionability checks (<a href=\"https://playwright.dev/docs/actionability\">https://playwright.dev/docs/actionability</a>).</td>\n</tr>\n<tr>\n<td><code>noWaitAfter</code></td>\n<td>Deprecated. This option will default to true in the future. Actions that initiate navigation, are waiting for these navigation to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to <code>False</code>.</td>\n</tr>\n<tr>\n<td><code>trial</code></td>\n<td>When set, this method only performs the actionability checks and skips the action. Defaults to false. Useful to wait until the element is ready for the action without performing it.</td>\n</tr>\n</table>\n<p>Arguments <code>clickCount</code>, <code>delay</code>, <code>position_x</code>, <code>position_y</code>, <code>force</code>, <code>noWaitAfter</code> and <code>trial</code> are named-only arguments and must be specified using their names..</p>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#Click%20With%20Options\" class=\"name\">Click With Options</a>    id=button_location\n<a href=\"#Click%20With%20Options\" class=\"name\">Click With Options</a>    id=button_location    trial=True\n<a href=\"#Click%20With%20Options\" class=\"name\">Click With Options</a>    \\#clickWithOptions    delay=100ms    clickCount=2\n<a href=\"#Click%20With%20Options\" class=\"name\">Click With Options</a>    id=clickWithModifiers    left     Alt    Meta    Shift    clickCount=1    force=True\n<a href=\"#Click%20With%20Options\" class=\"name\">Click With Options</a>    id=clickWithOptions    right    clickCount=2    force=True\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//5936\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Click%20With%20Options"
  },
  {
    "name": "Close Browser",
    "library": "Browser",
    "args": [
      {
        "name": "browser",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "SelectionType",
              "typedoc": "SelectionType",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "CURRENT",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "browser: SelectionType | str = CURRENT"
      }
    ],
    "doc": "<p>Closes the current browser.</p>\n<p>Active browser is set to the browser that was active before this one. Closes all context and pages belonging to this browser. See <a href=\"#Browser%2C%20Context%20and%20Page\" class=\"name\">Browser, Context and Page</a> for more information about Browser and related concepts.</p>\n<table border=\"1\">\n<tr>\n<th>Argument</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>browser</code></td>\n<td>Browser to close. <code>CURRENT</code> selects the active browser. <code>ALL</code> closes all browsers. When a browser id is provided, that browser is closed.</td>\n</tr>\n</table>\n<p>Example:</p>\n<pre>\n<a href=\"#Close%20Browser\" class=\"name\">Close Browser</a>    ALL        # Closes all browsers\n<a href=\"#Close%20Browser\" class=\"name\">Close Browser</a>    CURRENT    # Close current browser\n<a href=\"#Close%20Browser\" class=\"name\">Close Browser</a>               # Close current browser\n<a href=\"#Close%20Browser\" class=\"name\">Close Browser</a>    ${id}      # Close browser matching id\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4239\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Close%20Browser"
  },
  {
    "name": "Close Browser Server",
    "library": "Browser",
    "args": [
      {
        "name": "wsEndpoint",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "wsEndpoint: str"
      }
    ],
    "doc": "<p>Close a playwright Browser Server identified by its websocket endpoint (wsEndpoint).</p>\n<p>The wsEndpoint string is returned by <a href=\"#Launch%20Browser%20Server\" class=\"name\">Launch Browser Server</a> and is also used by <a href=\"#Connect%20To%20Browser\" class=\"name\">Connect To Browser</a>.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n</table>\n<pre>\n<code>wsEndpoint</code> | Address of the browser server. Example: <span class=\"name\">`ws://127.0.0.1:63784/ca69bf0e9471391e8183d9ac1e90e1ba</span>`|\n</pre>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Close%20Browser%20Server"
  },
  {
    "name": "Close Context",
    "library": "Browser",
    "args": [
      {
        "name": "context",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "SelectionType",
              "typedoc": "SelectionType",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "CURRENT",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "context: SelectionType | str = CURRENT"
      },
      {
        "name": "browser",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "SelectionType",
              "typedoc": "SelectionType",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "CURRENT",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "browser: SelectionType | str = CURRENT"
      },
      {
        "name": "",
        "type": null,
        "defaultValue": null,
        "kind": "NAMED_ONLY_MARKER",
        "required": false,
        "repr": "*"
      },
      {
        "name": "save_trace",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "save_trace: bool = True"
      }
    ],
    "doc": "<p>Closes a Context.</p>\n<p>Active context is set to the context that was active before this one. Closes pages belonging to this context. See <a href=\"#Browser%2C%20Context%20and%20Page\" class=\"name\">Browser, Context and Page</a> for more information about Context and related concepts.</p>\n<table border=\"1\">\n<tr>\n<th>Argument</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>context</code></td>\n<td>Context to close. <code>CURRENT</code> selects the active context. <code>ALL</code> closes all contexts. When a context id is provided, that context is closed.</td>\n</tr>\n<tr>\n<td><code>browser</code></td>\n<td>Browser where to close context. <code>CURRENT</code> selects the active browser. <code>ALL</code> closes all browsers. When a browser id is provided, that browser is closed.</td>\n</tr>\n<tr>\n<td><code>save_trace</code></td>\n<td>If set to <code>False</code>, the trace of this context is not saved, even if it was enables by <a href=\"#New%20Context\" class=\"name\">New Context</a>. Defaults to <code>True</code>.</td>\n</tr>\n</table>\n<p>Example:</p>\n<pre>\n<a href=\"#Close%20Context\" class=\"name\">Close Context</a>                          #  Closes current context and current browser\n<a href=\"#Close%20Context\" class=\"name\">Close Context</a>    CURRENT    CURRENT    #  Closes current context and current browser\n<a href=\"#Close%20Context\" class=\"name\">Close Context</a>    ALL        CURRENT    #  Closes all context from current browser and current browser\n<a href=\"#Close%20Context\" class=\"name\">Close Context</a>    ALL        ALL        #  Closes all context from current browser and all browser\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4240\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Close%20Context"
  },
  {
    "name": "Close Page",
    "library": "Browser",
    "args": [
      {
        "name": "page",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "SelectionType",
              "typedoc": "SelectionType",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "CURRENT",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "page: SelectionType | str = CURRENT"
      },
      {
        "name": "context",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "SelectionType",
              "typedoc": "SelectionType",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "CURRENT",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "context: SelectionType | str = CURRENT"
      },
      {
        "name": "browser",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "SelectionType",
              "typedoc": "SelectionType",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "CURRENT",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "browser: SelectionType | str = CURRENT"
      },
      {
        "name": "runBeforeUnload",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "runBeforeUnload: bool = False"
      }
    ],
    "doc": "<p>Closes the <code>page</code> in <code>context</code> in <code>browser</code>.</p>\n<p>Defaults to current for all three. Active page is set to the page that was active before this one. See <a href=\"#Browser%2C%20Context%20and%20Page\" class=\"name\">Browser, Context and Page</a> for more information about Page and related concepts.</p>\n<p><code>runBeforeUnload</code> defines where to run the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event\">before unload</a> page handlers. Defaults to false.</p>\n<table border=\"1\">\n<tr>\n<th>Argument</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>page</code></td>\n<td>Page to close. <code>CURRENT</code> selects the active page. <code>ALL</code> closes all pages. When a page id is provided, that page is closed.</td>\n</tr>\n<tr>\n<td><code>context</code></td>\n<td>Context where to close page. <code>CURRENT</code> selects the active context. <code>ALL</code> closes all contexts. When a context id is provided, that context is closed.</td>\n</tr>\n<tr>\n<td><code>browser</code></td>\n<td>Browser where to close page. <code>CURRENT</code> selects the active browser. <code>ALL</code> closes all browsers. When a browser id is provided, that browser is closed.</td>\n</tr>\n</table>\n<p>Returns a list of dictionaries containing id, errors and console messages from the page.</p>\n<p>Example</p>\n<pre>\n<a href=\"#Close%20Page\" class=\"name\">Close Page</a>                                       # Closes current page, within the current context and browser\n<a href=\"#Close%20Page\" class=\"name\">Close Page</a>    CURRENT     CURRENT     CURRENT    # Closes current page, within the current context and browser\n<a href=\"#Close%20Page\" class=\"name\">Close Page</a>    ALL         ALL         ALL        # Closes all pages, within all contexts and browsers\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4241\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Close%20Page"
  },
  {
    "name": "Connect To Browser",
    "library": "Browser",
    "args": [
      {
        "name": "wsEndpoint",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "wsEndpoint: str"
      },
      {
        "name": "browser",
        "type": {
          "name": "SupportedBrowsers",
          "typedoc": "SupportedBrowsers",
          "nested": [],
          "union": false
        },
        "defaultValue": "chromium",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "browser: SupportedBrowsers = chromium"
      },
      {
        "name": "use_cdp",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "use_cdp: bool = False"
      },
      {
        "name": "",
        "type": null,
        "defaultValue": null,
        "kind": "NAMED_ONLY_MARKER",
        "required": false,
        "repr": "*"
      },
      {
        "name": "timeout",
        "type": {
          "name": "timedelta",
          "typedoc": "timedelta",
          "nested": [],
          "union": false
        },
        "defaultValue": "0:00:30",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "timeout: timedelta = 0:00:30"
      }
    ],
    "doc": "<p>Connect to a Playwright browser server via playwright websocket or Chrome DevTools Protocol.</p>\n<p>See <a href=\"#Launch%20Browser%20Server\" class=\"name\">Launch Browser Server</a> for more information about how to launch a playwright browser server.</p>\n<p>See <a href=\"#Browser%2C%20Context%20and%20Page\" class=\"name\">Browser, Context and Page</a> for more information about Browser and related concepts.</p>\n<p>Returns a stable identifier for the connected browser.</p>\n<table border=\"1\">\n<tr>\n<th>Argument</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>wsEndpoint</code></td>\n<td>Address to connect to. Either <code>ws://</code> or <code>http://</code> if cdp is used.</td>\n</tr>\n<tr>\n<td><code>browser</code></td>\n<td>Opens the specified browser. Defaults to <code>chromium</code>.</td>\n</tr>\n<tr>\n<td><code>use_cdp</code></td>\n<td>Connect to browser via Chrome DevTools Protocol. Defaults to False. Works only with Chromium based browsers.</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td>Maximum time in Robot Framework time format to wait for the connection to be established. Defaults to 30 seconds. Pass 0 to disable timeout.</td>\n</tr>\n</table>\n<p>To Connect to a Browser viw Chrome DevTools Protocol, the browser must be started with this protocol enabled. This typically done by starting a Chrome browser with the argument <code>--remote-debugging-port=9222</code> or similar. When the browser is running with activated CDP, it is possible to connect to it either with websockets (<code>ws://</code>) or via HTTP (<code>http://</code>). The HTTP connection can be used when <code>use_cdp</code> is set to True. A typical address for a CDP connection is <code>http://127.0.0.1:9222</code>.</p>\n<p><a href=\"https://forum.robotframework.org/t//4242\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Connect%20To%20Browser"
  },
  {
    "name": "Crawl Site",
    "library": "Browser",
    "args": [
      {
        "name": "url",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "url: str | None = None"
      },
      {
        "name": "page_crawl_keyword",
        "type": null,
        "defaultValue": "take_screenshot",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "page_crawl_keyword=take_screenshot"
      },
      {
        "name": "max_number_of_page_to_crawl",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "1000",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "max_number_of_page_to_crawl: int = 1000"
      },
      {
        "name": "max_depth_to_crawl",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "50",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "max_depth_to_crawl: int = 50"
      }
    ],
    "doc": "<p>Web crawler is a tool to go through all the pages on a specific URL domain. This happens by finding all links going to the same site and opening those.</p>\n<p>returns list of crawled urls.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>url</code></td>\n<td>is the page to start crawling from.</td>\n</tr>\n<tr>\n<td><code>page_crawl_keyword</code></td>\n<td>is the keyword that will be executed on every page.  By default it will take a screenshot on every page.</td>\n</tr>\n<tr>\n<td><code>max_number_of_page_to_crawl</code></td>\n<td>is the upper limit of pages to crawl. Crawling will stop if the number of crawled pages goes over this.</td>\n</tr>\n<tr>\n<td><code>max_depth_to_crawl</code></td>\n<td>is the upper limit of consecutive links followed from the start page. Crawling will stop if there are no more links under this depth.</td>\n</tr>\n</table>\n<p><a href=\"https://forum.robotframework.org/t//4243\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Crawl%20Site"
  },
  {
    "name": "Delete All Cookies",
    "library": "Browser",
    "args": [],
    "doc": "<p>Deletes all cookies from the currently active browser context.</p>\n<p><a href=\"https://forum.robotframework.org/t//4244\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Delete%20All%20Cookies"
  },
  {
    "name": "Deselect Options",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      }
    ],
    "doc": "<p>Deselects all options from select element found by <code>selector</code>.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector of the select tag. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n</table>\n<p>If you just want to select one or more specific options and currently more options are selected, use <a href=\"#Select%20Options%20By\" class=\"name\">Select Options By</a> keyword with the options to be selected in the end.</p>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p><a href=\"https://forum.robotframework.org/t//4245\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Deselect%20Options"
  },
  {
    "name": "Download",
    "library": "Browser",
    "args": [
      {
        "name": "url",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "url: str"
      },
      {
        "name": "saveAs",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "saveAs: str = "
      },
      {
        "name": "wait_for_finished",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "wait_for_finished: bool = True"
      },
      {
        "name": "download_timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "download_timeout: timedelta | None = None"
      }
    ],
    "doc": "<p>Download given url content.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>url</code></td>\n<td>URL to the file that shall be downloaded.</td>\n</tr>\n<tr>\n<td><code>saveAs</code></td>\n<td>Path where the file shall be saved persistently. If empty, generated unique path (GUID) is used and file is deleted when the context is closed.</td>\n</tr>\n<tr>\n<td><code>wait_for_finished</code></td>\n<td>If set to <code>False</code> keyword returns immediately after the download is started. Defaults to <code>True</code>.</td>\n</tr>\n<tr>\n<td><code>download_timeout</code></td>\n<td>Timeout for the download itself if <code>wait_for_finished</code> is set to <code>True</code>. By default no timeout is set.</td>\n</tr>\n</table>\n<p>Keyword returns dictionary of type <a href=\"#type-DownloadInfo\" class=\"name\">DownloadInfo</a>.</p>\n<p>Example:</p>\n<pre>\n{\n  \"saveAs\": \"/tmp/robotframework-browser/downloads/2f1b3b7c-1b1b-4b1b-9b1b-1b1b1b1b1b1b\",\n  \"suggestedFilename\": \"downloaded_file.txt\"\n  \"state\": \"finished\",\n  \"downloadID\": None,\n}\n</pre>\n<p>If the download should be started by an interaction with an element on the page, <a href=\"#Promise%20To%20Wait%20For%20Download\" class=\"name\">Promise To Wait For Download</a> keyword may be a better choice.</p>\n<p>The keyword <a href=\"#New%20Browser\" class=\"name\">New Browser</a> has a <code>downloadsPath</code> setting which can be used to set the default download directory. If <span class=\"name\">saveAs</span> is set to a relative path, the file will be saved relative to the browser's <code>downloadsPath</code> setting or if that is not set, relative to the Playwright's working directory. If <code>saveAs</code> is set to an absolute path, the file will be saved to that absolute path independent of <code>downloadsPath</code>.</p>\n<p>To enable downloads context's <code>acceptDownloads</code> needs to be true. This keyword requires that there is currently an open page. The keyword uses the current pages local state (cookies, sessionstorage, localstorage) for the download to avoid authentication problems.</p>\n<p>Example:</p>\n<pre>\n${file_object}=    <a href=\"#Download\" class=\"name\">Download</a>    ${url}\n${actual_size}=    Get File Size    ${file_object.saveAs}\n</pre>\n<p>Example 2:</p>\n<pre>\n${href}=          <a href=\"#Get%20Property\" class=\"name\">Get Property</a>    text=\"Download File\"    href\n<a href=\"#Download\" class=\"name\">Download</a>    ${href}    saveAs=${OUTPUT DIR}/downloads/downloaded_file.txt\nFile Should Exist    ${OUTPUT DIR}/downloads/downloaded_file.txt\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4246\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Download"
  },
  {
    "name": "Drag And Drop",
    "library": "Browser",
    "args": [
      {
        "name": "selector_from",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector_from: str"
      },
      {
        "name": "selector_to",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector_to: str"
      },
      {
        "name": "steps",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "1",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "steps: int = 1"
      }
    ],
    "doc": "<p>Executes a Drag&amp;Drop operation from the element selected by <code>selector_from</code> to the element selected by <code>selector_to</code>.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector_from</code></td>\n<td>Identifies the element, which center is the start-point.</td>\n</tr>\n<tr>\n<td><code>selector_to</code></td>\n<td>Identifies the element, which center is the end-point.</td>\n</tr>\n<tr>\n<td><code>steps</code></td>\n<td>Defines how many intermediate mouse move events are sent. Often it is necessary to send more than one intermediate event to get the desired result. Defaults to 1.</td>\n</tr>\n</table>\n<p>See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p>First it moves the mouse to the start-point, then presses the left mouse button, then moves to the end-point in specified number of steps, then releases the mouse button.</p>\n<p>Start- and end-point are defined by the center of the elements boundingbox.</p>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p>Example</p>\n<pre>\n<a href=\"#Drag%20And%20Drop\" class=\"name\">Drag And Drop</a>    \"Circle\"    \"Goal\"\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4247\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Drag%20And%20Drop"
  },
  {
    "name": "Drag And Drop By Coordinates",
    "library": "Browser",
    "args": [
      {
        "name": "from_x",
        "type": {
          "name": "float",
          "typedoc": "float",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "from_x: float"
      },
      {
        "name": "from_y",
        "type": {
          "name": "float",
          "typedoc": "float",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "from_y: float"
      },
      {
        "name": "to_x",
        "type": {
          "name": "float",
          "typedoc": "float",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "to_x: float"
      },
      {
        "name": "to_y",
        "type": {
          "name": "float",
          "typedoc": "float",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "to_y: float"
      },
      {
        "name": "steps",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "1",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "steps: int = 1"
      }
    ],
    "doc": "<p>Executes a Drag&amp;Drop operation from a coordinate to another coordinate.</p>\n<p>First it moves the mouse to the start-point, then presses the left mouse button, then moves to the end-point in specified number of steps, then releases the mouse button.</p>\n<p>Start- and end-point are defined by <code>x</code> and <code>y</code> coordinates relative to the top left corner of the pages viewport.</p>\n<table border=\"1\">\n<tr>\n<td><code>from_x</code> &amp; <code>from_y</code></td>\n<td>Identify the start-point on page.</td>\n</tr>\n<tr>\n<td><code>to_x</code> &amp; <code>to_y</code></td>\n<td>Identify the end-point.</td>\n</tr>\n<tr>\n<td><code>steps</code></td>\n<td>Defines how many intermediate mouse move events are sent. Often it is necessary to send more than one intermediate event to get the desired result. Defaults to 1.</td>\n</tr>\n</table>\n<p>Example:</p>\n<pre>\n<a href=\"#Drag%20And%20Drop%20By%20Coordinates\" class=\"name\">Drag And Drop By Coordinates</a>\n...    from_x=30    from_y=30\n...    to_x=10    to_y=10    steps=20\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4248\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Drag%20And%20Drop%20By%20Coordinates"
  },
  {
    "name": "Drag And Drop Relative To",
    "library": "Browser",
    "args": [
      {
        "name": "selector_from",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector_from: str"
      },
      {
        "name": "x",
        "type": {
          "name": "float",
          "typedoc": "float",
          "nested": [],
          "union": false
        },
        "defaultValue": "0.0",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "x: float = 0.0"
      },
      {
        "name": "y",
        "type": {
          "name": "float",
          "typedoc": "float",
          "nested": [],
          "union": false
        },
        "defaultValue": "0.0",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "y: float = 0.0"
      },
      {
        "name": "steps",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "1",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "steps: int = 1"
      }
    ],
    "doc": "<p>Executes a Drag&amp;Drop operation from the element selected by <code>selector_from</code> to coordinates relative to the center of that element.</p>\n<p>This keyword can be handy to simulate swipe actions.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector_from</code></td>\n<td>identifies the element, which center is the start-point.</td>\n</tr>\n<tr>\n<td><code>x</code> &amp; <code>y</code></td>\n<td>identifies the end-point which is relative to the start-point.</td>\n</tr>\n<tr>\n<td><code>steps</code></td>\n<td>defines how many intermediate mouse move events are sent. Often it is necessary to send more than one intermediate event to get the desired result. Defaults to 1.</td>\n</tr>\n</table>\n<p>See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p>First it moves the mouse to the start-point (center of boundingbox), then presses the left mouse button, then moves to the relative position with the given intermediate steps, then releases the mouse button.</p>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p>Example</p>\n<pre>\n<a href=\"#Drag%20And%20Drop%20Relative%20To\" class=\"name\">Drag And Drop Relative to</a>    \"Circle\"    -20    0     # Slides the element 20 pixel to the left\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4249\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Drag%20And%20Drop%20Relative%20To"
  },
  {
    "name": "Eat All Cookies",
    "library": "Browser",
    "args": [],
    "doc": "<p>Eat all cookies for all easter.</p>\n<p><a href=\"https://forum.robotframework.org/t//4250\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Eat%20All%20Cookies"
  },
  {
    "name": "Emulate Media",
    "library": "Browser",
    "args": [
      {
        "name": "colorScheme",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "ColorScheme",
              "typedoc": "ColorScheme",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "colorScheme: ColorScheme | None = None"
      },
      {
        "name": "forcedColors",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "ForcedColors",
              "typedoc": "ForcedColors",
              "nested": [],
              "union": false
            },
            {
              "name": "NotSet",
              "typedoc": "NotSet",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "not_set",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "forcedColors: ForcedColors | NotSet = not_set"
      },
      {
        "name": "media",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Media",
              "typedoc": "Media",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "media: Media | None = None"
      },
      {
        "name": "reducedMotion",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "ReducedMotion",
              "typedoc": "ReducedMotion",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "reducedMotion: ReducedMotion | None = None"
      }
    ],
    "doc": "<p>Changes the CSS media type.</p>\n<p>It changes the CSS media type through the media argument, and/or the 'prefers-colors-scheme' media feature, using the colorScheme argument. This is useful to render the page in the correct format before using <a href=\"#Save%20Page%20As%20Pdf\" class=\"name\">Save Page As Pdf</a> keyword.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>colorScheme</code></td>\n<td>Emulates prefers-colors-scheme media feature, supported values are 'light' and 'dark'. Passing null disables color scheme emulation. 'no-preference' is deprecated.</td>\n</tr>\n<tr>\n<td><code>forcedColors</code></td>\n<td>Emulates 'forced-colors' media feature, supported values are 'active' and 'none'. Passing null disables forced colors emulation.</td>\n</tr>\n<tr>\n<td><code>media</code></td>\n<td>Changes the CSS media type of the page. The only allowed values are 'screen', 'print' and null. Passing null disables CSS media emulation.</td>\n</tr>\n<tr>\n<td><code>reducedMotion</code></td>\n<td>Emulates 'prefers-reduced-motion' media feature, supported values are 'reduce', 'no-preference'. Passing null disables reduced motion emulation.</td>\n</tr>\n</table>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Emulate%20Media"
  },
  {
    "name": "Evaluate JavaScript",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "selector: str | None = None"
      },
      {
        "name": "function",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*function: str"
      },
      {
        "name": "arg",
        "type": {
          "name": "Any",
          "typedoc": "Any",
          "nested": [],
          "union": false
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "arg: Any = None"
      },
      {
        "name": "all_elements",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "all_elements: bool = False"
      }
    ],
    "doc": "<p>Executes given javascript on the selected element(s) or on page.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector to resolve and pass to the JavaScript function. This will be the first argument the function receives if not <code>${None}</code>. <code>selector</code> is optional and can be omitted. If given a selector, a function is necessary, with an argument to capture the elementHandle. For example <code>(element) =&gt; document.activeElement === element</code> See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n<tr>\n<td><code>*function</code></td>\n<td>A valid javascript function or a javascript function body. These arguments can be used to write readable multiline JavaScript.</td>\n</tr>\n<tr>\n<td><code>arg</code></td>\n<td>an additional argument that can be handed over to the JavaScript function. This argument must be JSON serializable. ElementHandles are not supported.</td>\n</tr>\n<tr>\n<td><code>all_elements</code></td>\n<td>defines if only the single elementHandle found by <code>selector</code> is handed over to the function or if set to <code>True</code> all found elements are handed over as array.</td>\n</tr>\n</table>\n<p>Example with <code>all_elements=True</code>:</p>\n<pre>\n ${texts}=    Evaluate JavaScript    button\n ...    (elements, arg) =&gt; {\n ...        let text = []\n ...            for (e of elements) {\n ...                console.log(e.innerText)\n ...                text.push(e.innerText)\n ...            }\n ...        text.push(arg)\n ...        return text\n ...    }\n ...    all_elements=True\n ...    arg=Just another Text\n</pre>\n<p>Keyword uses strict mode if <code>all_elements</code> is <code>False</code>. See <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p><a href=\"https://github.com/MarketSquare/robotframework-browser/tree/main/atest/test/06_Examples/js_evaluation.robot\">Usage examples.</a></p>\n<p><a href=\"https://forum.robotframework.org/t//4251\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Evaluate%20JavaScript"
  },
  {
    "name": "Fill Secret",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      },
      {
        "name": "secret",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "secret: str"
      },
      {
        "name": "force",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "force: bool = False"
      }
    ],
    "doc": "<p>Fills the given secret from <code>variable_name</code> into the text field found by <code>selector</code>.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n<td></td>\n</tr>\n<tr>\n<td><code>secret</code></td>\n<td>The secret string that should be filled into the text field.</td>\n<td></td>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector of the text field. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n<td></td>\n</tr>\n<tr>\n<td><code>force</code></td>\n<td>Set to True to skip Playwright's [<a href=\"https://playwright.dev/docs/actionability\">https://playwright.dev/docs/actionability</a></td>\n<td>Actionability checks].</td>\n</tr>\n</table>\n<p>This keyword does not log secret in Robot Framework logs, when keyword resolves the <code>secret</code> variable internally. When <code>secret</code> variable is prefixed with <span class=\"name\">$</span>, without the curly braces, library will resolve the corresponding Robot Framework variable.</p>\n<p>If <code>secret</code> variable is prefixed with <span class=\"name\">%</span>, library will resolve corresponding environment variable. Example <span class=\"name\">$Password</span>` will resolve to <code>${Password}</code> Robot Framework variable. Also <code>%ENV_PWD</code> will resolve to <code>%{ENV_PWD}</code> environment variable.</p>\n<p><b>Using normal Robot Framework variables like <code>${password}</code> will not work!</b></p>\n<p><b>Normal plain text will not work.</b> If you want to use plain text, use <a href=\"#Fill%20Text\" class=\"name\">Fill Text</a> keyword instead.</p>\n<p>This keyword will also work with a give cryptographic cipher text, that has been encrypted by Crypto library. See <a href=\"https://github.com/Snooz82/robotframework-crypto\">Crypto Library</a> for more details.</p>\n<p>If <code>enable_playwright_debug</code> is enabled in the library import, secret will be always visible as plain text in the playwright debug logs, regardless of the Robot Framework log level.</p>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p>See <a href=\"#Fill%20Text\" class=\"name\">Fill Text</a> for other details.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#Fill%20Secret\" class=\"name\">Fill Secret</a>    input#username_field    $username    # Keyword resolves variable value from Robot Framework variables\n<a href=\"#Fill%20Secret\" class=\"name\">Fill Secret</a>    input#username_field    %username    # Keyword resolves variable value from environment variables\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4253\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Fill%20Secret"
  },
  {
    "name": "Fill Text",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      },
      {
        "name": "txt",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "txt: str"
      },
      {
        "name": "force",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "force: bool = False"
      }
    ],
    "doc": "<p>Clears and fills the given <code>txt</code> into the text field found by <code>selector</code>.</p>\n<p>This method waits for an element matching the <code>selector</code> to appear, waits for actionability checks, focuses the element, fills it and triggers an input event after filling.</p>\n<p>If the element matching selector is not an &lt;input&gt;, &lt;textarea&gt; or [contenteditable] element, this method throws an error. Note that you can pass an empty string as <code>txt</code> to clear the input field.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n<td></td>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector of the text field. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n<td></td>\n</tr>\n<tr>\n<td><code>txt</code></td>\n<td>Text for the text field.</td>\n<td></td>\n</tr>\n<tr>\n<td><code>force</code></td>\n<td>Set to True to skip Playwright's [<a href=\"https://playwright.dev/docs/actionability\">https://playwright.dev/docs/actionability</a></td>\n<td>Actionability checks].</td>\n</tr>\n</table>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p>See <a href=\"#Type%20Text\" class=\"name\">Type Text</a> for emulating typing text character by character.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#Fill%20Text\" class=\"name\">Fill Text</a>    css=input#username_field    username\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4254\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Fill%20Text"
  },
  {
    "name": "Focus",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      }
    ],
    "doc": "<p>Moves focus on to the element found by <code>selector</code>.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector of the element. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n</table>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p>If there's no element matching selector, the method waits until a matching element appears in the DOM. Timeouts after 10 seconds.</p>\n<p><a href=\"https://forum.robotframework.org/t//4255\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Focus"
  },
  {
    "name": "Get Attribute",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      },
      {
        "name": "attribute",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "attribute: str"
      },
      {
        "name": "assertion_operator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "AssertionOperator",
              "typedoc": "AssertionOperator",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_operator: AssertionOperator | None = None"
      },
      {
        "name": "assertion_expected",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Any",
              "typedoc": "Any",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_expected: Any | None = None"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Returns the HTML <code>attribute</code> of the element found by <code>selector</code>.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector from which the info is to be retrieved. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n<tr>\n<td><code>attribute</code></td>\n<td>Requested attribute name.</td>\n</tr>\n<tr>\n<td><code>assertion_operator</code></td>\n<td>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details. Defaults to None.</td>\n</tr>\n<tr>\n<td><code>assertion_expected</code></td>\n<td>Expected value for the state</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>overrides the default error message for assertion.</td>\n</tr>\n</table>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p>Optionally asserts that the attribute value matches the expected value. See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. By default assertion is not done.</p>\n<p>When a attribute is selected that is not present and no assertion operator is set, the keyword fails. If an assertion operator is set and the attribute is not present, the returned value is <code>None</code>. This can be used to assert check the presents or the absents of an attribute.</p>\n<p>Example Element:</p>\n<pre>\n&lt;button class=\"login button active\" id=\"enabled_button\" something&gt;Login&lt;/button&gt;\n</pre>\n<p>Example Code:</p>\n<pre>\n<a href=\"#Get%20Attribute\" class=\"name\">Get Attribute</a>   id=enabled_button    disabled                   # FAIL =&gt; \"Attribute 'disabled' not found!\"\n<a href=\"#Get%20Attribute\" class=\"name\">Get Attribute</a>   id=enabled_button    disabled     ==    ${None}     # PASS =&gt; returns: None\n<a href=\"#Get%20Attribute\" class=\"name\">Get Attribute</a>   id=enabled_button    something    evaluate    value is not None    # PASS =&gt;  returns: True\n<a href=\"#Get%20Attribute\" class=\"name\">Get Attribute</a>   id=enabled_button    disabled     evaluate    value is None        # PASS =&gt;  returns: True\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4256\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Attribute"
  },
  {
    "name": "Get Attribute Names",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      },
      {
        "name": "assertion_operator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "AssertionOperator",
              "typedoc": "AssertionOperator",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_operator: AssertionOperator | None = None"
      },
      {
        "name": "assertion_expected",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*assertion_expected"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Returns all HTML attribute names of an element as a list.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector from which the info is to be retrieved. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n<tr>\n<td><code>assertion_operator</code></td>\n<td>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details. Defaults to None.</td>\n</tr>\n<tr>\n<td><code>*assertion_expected</code></td>\n<td>Expected value for the state</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>overrides the default error message for assertion.</td>\n</tr>\n</table>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p>Optionally asserts that attribute names do match to the expected value. See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. By default assertion is not done.</p>\n<p>Available assertions:</p>\n<ul>\n<li><code>==</code> , <code>!=</code> and <code>contains</code> / <code>*=</code> can work with multiple values</li>\n<li><code>validate</code> and <code>evaluate</code> only accepts one single expected value</li>\n</ul>\n<p>Other operators are not allowed.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#Get%20Attribute%20Names\" class=\"name\">Get Attribute Names</a>    [name=\"readonly_input\"]    ==    type    name    value    readonly    # Has exactly these attribute names.\n<a href=\"#Get%20Attribute%20Names\" class=\"name\">Get Attribute Names</a>    [name=\"readonly_input\"]    contains    disabled    # Contains at least this attribute name.\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4257\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Attribute%20Names"
  },
  {
    "name": "Get BoundingBox",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      },
      {
        "name": "key",
        "type": {
          "name": "BoundingBoxFields",
          "typedoc": "BoundingBoxFields",
          "nested": [],
          "union": false
        },
        "defaultValue": "ALL",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "key: BoundingBoxFields = ALL"
      },
      {
        "name": "assertion_operator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "AssertionOperator",
              "typedoc": "AssertionOperator",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_operator: AssertionOperator | None = None"
      },
      {
        "name": "assertion_expected",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Any",
              "typedoc": "Any",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_expected: Any | None = None"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      },
      {
        "name": "",
        "type": null,
        "defaultValue": null,
        "kind": "NAMED_ONLY_MARKER",
        "required": false,
        "repr": "*"
      },
      {
        "name": "allow_hidden",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "allow_hidden: bool = False"
      }
    ],
    "doc": "<p>Gets elements size and location as an object <code>{x: float, y: float, width: float, height: float}</code>.</p>\n<p>Alternatively you can select a single attribute of the bounding box by setting the <code>key</code> argument.</p>\n<p>If an element is hidden and has no bounding box, the keyword will fail. Depending on the method used to make an element invisible, an element might still have a bounding box which can be retrieved. To allow also hidden elements without a bounding box, set <code>allow_hidden</code> to <code>True</code>, which results in a return value of <a href=\"#type-None\" class=\"name\">None</a> in case of no bounding box.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector from which shall be retrieved. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n<tr>\n<td><code>key</code></td>\n<td>Optionally filters the returned values. If keys is set to <code>ALL</code> (default) it will return the BoundingBox as Dictionary, otherwise it will just return the single value selected by the key. Note: If a single value is retrieved, an assertion does <b>not</b> need a <code>validate</code> combined with a cast of <code>value</code>.</td>\n</tr>\n<tr>\n<td><code>assertion_operator</code></td>\n<td>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details. Defaults to None.</td>\n</tr>\n<tr>\n<td><code>assertion_expected</code></td>\n<td>Expected value for the counting</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>overrides the default error message for assertion.</td>\n</tr>\n<tr>\n<td><code>allow_hidden</code></td>\n<td>(named only) If True, hidden elements are not causing a failure and will return <a href=\"#type-None\" class=\"name\">None</a>. Otherwise hidden element will fail. Defaults to False.</td>\n</tr>\n</table>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p>Optionally asserts that the value matches the specified assertion. See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. By default assertion is not done.</p>\n<p>Example use:</p>\n<pre>\n${bounding_box}=    <a href=\"#Get%20BoundingBox\" class=\"name\">Get BoundingBox</a>    id=element                 # unfiltered\nLog                 ${bounding_box}                                 # {'x': 559.09375, 'y': 75.5, 'width': 188.796875, 'height': 18}\n${x}=               <a href=\"#Get%20BoundingBox\" class=\"name\">Get BoundingBox</a>    id=element    x            # filtered\nLog                 X: ${x}                                         # X: 559.09375\n# Assertions:\n<a href=\"#Get%20BoundingBox\" class=\"name\">Get BoundingBox</a>     id=element         width         &gt;    180\n<a href=\"#Get%20BoundingBox\" class=\"name\">Get BoundingBox</a>     id=element         ALL           validate    value['x'] &gt; value['y']*2\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4258\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20BoundingBox"
  },
  {
    "name": "Get Browser Catalog",
    "library": "Browser",
    "args": [
      {
        "name": "assertion_operator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "AssertionOperator",
              "typedoc": "AssertionOperator",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_operator: AssertionOperator | None = None"
      },
      {
        "name": "assertion_expected",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Any",
              "typedoc": "Any",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_expected: Any | None = None"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Returns all browsers, open contexts in them and open pages in these contexts.</p>\n<p>See <a href=\"#Browser%2C%20Context%20and%20Page\" class=\"name\">Browser, Context and Page</a> for more information about these concepts.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td>assertion_operator</td>\n<td>Optional assertion operator. See <a href=\"#Assertions\" class=\"name\">Assertions</a> for more information.</td>\n</tr>\n<tr>\n<td>assertion_expected</td>\n<td>Optional expected value. See <a href=\"#Assertions\" class=\"name\">Assertions</a> for more information.</td>\n</tr>\n<tr>\n<td>message</td>\n<td>Optional custom message to use on failure. See <a href=\"#Assertions\" class=\"name\">Assertions</a> for more information.</td>\n</tr>\n</table>\n<p>The data is parsed into a python list containing data representing the open Objects.</p>\n<p>On the root level the data contains a list of open browsers.</p>\n<p>Data can be manipulated also with <code>assertion_operator</code> for example to find a specific id based on index or page title with <code>then</code> operator.</p>\n<p>Return value can also be asserted against expected value.</p>\n<p>Sample:</p>\n<pre>\n[\n  {\n    \"type\": \"chromium\",\n    \"id\": \"browser=96207191-8147-44e7-b9ac-5e04f2709c1d\",\n    \"contexts\": [\n      {\n        \"type\": \"context\",\n        \"id\": \"context=525d8e5b-3c4e-4baa-bfd4-dfdbc6e86089\",\n        \"activePage\": \"page=f90c97b8-eaaf-47f2-98b2-ccefd3450f12\",\n        \"pages\": [\n          {\n            \"type\": \"page\",\n            \"title\": \"Robocorp\",\n            \"url\": \"<a href=\"https://robocorp.com/\">https://robocorp.com/</a>\",\n            \"id\": \"page=7ac15782-22d2-48b4-8591-ff17663fa737\",\n            \"timestamp\": 1598607713.858\n          },\n          {\n            \"type\": \"page\",\n            \"title\": \"Home - Reaktor\",\n            \"url\": \"<a href=\"https://www.reaktor.com/\">https://www.reaktor.com/</a>\",\n            \"id\": \"page=f90c97b8-eaaf-47f2-98b2-ccefd3450f12\",\n            \"timestamp\": 1598607714.702\n          }\n        ]\n      }\n    ],\n    \"activeContext\": \"context=525d8e5b-3c4e-4baa-bfd4-dfdbc6e86089\",\n    \"activeBrowser\": false\n  },\n  {\n    \"type\": \"firefox\",\n    \"id\": \"browser=ad99abac-17a9-472b-ac7f-d6352630834e\",\n    \"contexts\": [\n      {\n        \"type\": \"context\",\n        \"id\": \"context=bc64f1ba-5e76-46dd-9735-4bd344afb9c0\",\n        \"activePage\": \"page=8baf2991-5eaf-444d-a318-8045f914e96a\",\n        \"pages\": [\n          {\n            \"type\": \"page\",\n            \"title\": \"Software-Qualitätssicherung und Softwaretest\",\n            \"url\": \"<a href=\"https://www.imbus.de/\">https://www.imbus.de/</a>\",\n            \"id\": \"page=8baf2991-5eaf-444d-a318-8045f914e96a\",\n            \"timestamp\": 1598607716.828\n          }\n        ]\n      }\n    ],\n    \"activeContext\": \"context=bc64f1ba-5e76-46dd-9735-4bd344afb9c0\",\n    \"activeBrowser\": true\n  }\n]\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4259\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Browser%20Catalog"
  },
  {
    "name": "Get Browser Ids",
    "library": "Browser",
    "args": [
      {
        "name": "browser",
        "type": {
          "name": "SelectionType",
          "typedoc": "SelectionType",
          "nested": [],
          "union": false
        },
        "defaultValue": "ALL",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "browser: SelectionType = ALL"
      }
    ],
    "doc": "<p>Returns a list of ids from open browsers. See <a href=\"#Browser%2C%20Context%20and%20Page\" class=\"name\">Browser, Context and Page</a> for more information about Browser and related concepts.</p>\n<p><code>browser</code> Defaults to <code>ALL</code></p>\n<ul>\n<li><code>ALL</code> / <code>ANY</code> Returns all ids as a list.</li>\n<li><code>ACTIVE</code> / <code>CURRENT</code> Returns the id of the currently active browser as list.</li>\n</ul>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>browser</code></td>\n<td>The browser to get the ids from. <code>ALL</code> for all open browsers, <code>ACTIVE</code> for the currently active browser or the id of the browser to get the ids from.</td>\n</tr>\n</table>\n<p>The ACTIVE browser is a synonym for the CURRENT Browser.</p>\n<p><a href=\"https://forum.robotframework.org/t//4260\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Browser%20Ids"
  },
  {
    "name": "Get Checkbox State",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      },
      {
        "name": "assertion_operator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "AssertionOperator",
              "typedoc": "AssertionOperator",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_operator: AssertionOperator | None = None"
      },
      {
        "name": "assertion_expected",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "Unchecked",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_expected: bool | str = Unchecked"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Returns the state of the checkbox found by <code>selector</code>.</p>\n<p>Optionally asserts that the state matches the specified assertion. See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. By default assertion is not done.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector which shall be examined. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n<tr>\n<td><code>assertion_operator</code></td>\n<td><code>==</code> and <code>!=</code> and equivalent are allowed on boolean values. Other operators are not accepted.</td>\n</tr>\n<tr>\n<td><code>assertion_expected</code></td>\n<td>Boolean value of expected state. Strings are interpreted as booleans. All strings are <code>${True}</code> except of the following <span class=\"name\">FALSE, NO, OFF, 0, UNCHECKED, NONE, ${EMPTY}</span>` (case-insensitive). Defaults to unchecked.</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>overrides the default error message for assertion.</td>\n</tr>\n</table>\n<ul>\n<li><code>checked</code> =&gt; <code>True</code></li>\n<li><code>unchecked</code> =&gt; <code>False</code></li>\n</ul>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#Get%20Checkbox%20State\" class=\"name\">Get Checkbox State</a>    [name=can_send_email]    ==    checked\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4261\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Checkbox%20State"
  },
  {
    "name": "Get Classes",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      },
      {
        "name": "assertion_operator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "AssertionOperator",
              "typedoc": "AssertionOperator",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_operator: AssertionOperator | None = None"
      },
      {
        "name": "assertion_expected",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*assertion_expected"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Returns all classes of an element as a list.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector from which the info is to be retrieved. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n<tr>\n<td><code>assertion_operator</code></td>\n<td>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details. Defaults to None.</td>\n</tr>\n<tr>\n<td><code>*assertion_expected</code></td>\n<td>Expected values for the state</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>overrides the default error message for assertion.</td>\n</tr>\n</table>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p>Optionally asserts that the value matches the specified assertion. See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. By default assertion is not done.</p>\n<p>Available assertions:</p>\n<ul>\n<li><code>==</code> , <code>!=</code> and <code>contains</code> / <code>*=</code> can work with multiple values</li>\n<li><code>validate</code> and <code>evaluate</code> only accepts one single expected value</li>\n</ul>\n<p>Other operators are not allowed.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#Get%20Classes\" class=\"name\">Get Classes</a>    id=draggable    ==    react-draggable    box    # Element contains exactly this class name.\n<a href=\"#Get%20Classes\" class=\"name\">Get Classes</a>    id=draggable    validate    \"react-draggable-dragged\" not in value    # Element does not contain react-draggable-dragged class.\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4262\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Classes"
  },
  {
    "name": "Get Client Size",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "selector: str | None = None"
      },
      {
        "name": "key",
        "type": {
          "name": "SizeFields",
          "typedoc": "SizeFields",
          "nested": [],
          "union": false
        },
        "defaultValue": "ALL",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "key: SizeFields = ALL"
      },
      {
        "name": "assertion_operator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "AssertionOperator",
              "typedoc": "AssertionOperator",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_operator: AssertionOperator | None = None"
      },
      {
        "name": "assertion_expected",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Any",
              "typedoc": "Any",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_expected: Any | None = None"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Gets elements or pages client size (<code>clientHeight</code>, <code>clientWidth</code>) as object {width: float, height: float}.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Optional selector from which shall be retrieved. If no selector is given the client size of the page itself is used (<code>document.scrollingElement</code>). See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n<tr>\n<td><code>key</code></td>\n<td>Optionally filters the returned values. If keys is set to <code>ALL</code> (default) it will return the scroll size as dictionary, otherwise it will just return the single value selected by the key.</td>\n</tr>\n<tr>\n<td><code>assertion_operator</code></td>\n<td>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details. Defaults to None.</td>\n</tr>\n<tr>\n<td><code>assertion_expected</code></td>\n<td>Expected value for the counting</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>overrides the default error message for assertion.</td>\n</tr>\n</table>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p>Optionally asserts that the value matches the specified assertion. See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. By default assertion is not done.</p>\n<p>See <a href=\"#Get%20BoundingBox\" class=\"name\">Get BoundingBox</a> or <a href=\"#Get%20Scroll%20Size\" class=\"name\">Get Scroll Size</a> for examples.</p>\n<p><a href=\"https://forum.robotframework.org/t//4263\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Client%20Size"
  },
  {
    "name": "Get Console Log",
    "library": "Browser",
    "args": [
      {
        "name": "assertion_operator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "AssertionOperator",
              "typedoc": "AssertionOperator",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_operator: AssertionOperator | None = None"
      },
      {
        "name": "assertion_expected",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Any",
              "typedoc": "Any",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_expected: Any | None = None"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      },
      {
        "name": "",
        "type": null,
        "defaultValue": null,
        "kind": "NAMED_ONLY_MARKER",
        "required": false,
        "repr": "*"
      },
      {
        "name": "full",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "full: bool = False"
      },
      {
        "name": "last",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "last: int | timedelta | None = None"
      }
    ],
    "doc": "<p>Returns the console log of the active page.</p>\n<p>If assertions are used and fail, this keyword will fail immediately without retrying.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td>assertion_operator</td>\n<td>Optional assertion operator. See <a href=\"#Assertions\" class=\"name\">Assertions</a> for more information.</td>\n</tr>\n<tr>\n<td>assertion_expected</td>\n<td>Optional expected value. See <a href=\"#Assertions\" class=\"name\">Assertions</a> for more information.</td>\n</tr>\n<tr>\n<td>message</td>\n<td>Optional custom message to use on failure. See <a href=\"#Assertions\" class=\"name\">Assertions</a> for more information.</td>\n</tr>\n<tr>\n<td>full</td>\n<td>If true, returns the full console log. If false, returns only new entries that were added since last time.</td>\n</tr>\n<tr>\n<td>last</td>\n<td>If set, returns only the last n entries. Can be <span class=\"name\">int</span> for number of entries or <a href=\"#type-timedelta\" class=\"name\">timedelta</a> for time period.</td>\n</tr>\n</table>\n<p>The returned data is a <a href=\"#type-list\" class=\"name\">list</a> of log messages.</p>\n<p>A log message is a <span class=\"name\">dict</span> with the following structure:</p>\n<pre>\n[{\n  \"type\": str,\n  \"text\": str,\n  \"location\": {\n    \"url\": str,\n    \"lineNumber\": int,\n    \"columnNumber\": int\n  },\n  \"time\": str\n}]\n</pre>\n<p>Example:</p>\n<pre>\n[{\n  'type': 'log',\n  'text': 'Stuff loaded...',\n  'location': {\n    'url': '<a href=\"https://example.com/js/chunk-769742de.6a462276.js\">https://example.com/js/chunk-769742de.6a462276.js</a>',\n    'lineNumber': 60,\n    'columnNumber': 63771\n  },\n  'time': '2023-02-05T17:42:52.064Z'\n}]\n</pre>\n<p>Keys:</p>\n<table border=\"1\">\n<tr>\n<th>Key</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>type</code></td>\n<td>One of the following values: <code>log</code>, <code>debug</code>, <code>info</code>, <code>error</code>, <code>warning</code>, <code>dir</code>, <code>dirxml</code>, <code>table</code>, <code>trace</code>, <code>clear</code>, <code>startGroup</code>, <code>startGroupCollapsed</code>, <code>endGroup</code>, <code>assert</code>, <code>profile</code>, <code>profileEnd</code>, <code>count</code>, <code>timeEnd</code></td>\n</tr>\n<tr>\n<td><code>text</code></td>\n<td>The text of the console message.</td>\n</tr>\n<tr>\n<td><code>location.url</code></td>\n<td>The URL of the resource that generated this message.</td>\n</tr>\n<tr>\n<td><code>location.lineNumber</code></td>\n<td>The line number in the resource that generated this message (0-based).</td>\n</tr>\n<tr>\n<td><code>location.columnNumber</code></td>\n<td>The column number in the resource that generated this message (0-based).</td>\n</tr>\n<tr>\n<td><code>time</code></td>\n<td>The timestamp of the log message as ISO 8601 string.</td>\n</tr>\n</table>\n<p><a href=\"https://forum.robotframework.org/t//5267\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Console%20Log"
  },
  {
    "name": "Get Context Ids",
    "library": "Browser",
    "args": [
      {
        "name": "context",
        "type": {
          "name": "SelectionType",
          "typedoc": "SelectionType",
          "nested": [],
          "union": false
        },
        "defaultValue": "ALL",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "context: SelectionType = ALL"
      },
      {
        "name": "browser",
        "type": {
          "name": "SelectionType",
          "typedoc": "SelectionType",
          "nested": [],
          "union": false
        },
        "defaultValue": "ALL",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "browser: SelectionType = ALL"
      }
    ],
    "doc": "<p>Returns a list of context ids based on the browser selection. See <a href=\"#Browser%2C%20Context%20and%20Page\" class=\"name\">Browser, Context and Page</a> for more information about Context and related concepts.</p>\n<p><code>ALL</code> and <code>ANY</code> are synonyms. <code>ACTIVE</code> and <code>CURRENT</code> are also synonyms.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>context</code></td>\n<td>The context to get the ids from. <code>ALL</code> will return all ids from selected browser(s), <code>ACTIVE</code> for the one active context of each selected browser.</td>\n</tr>\n<tr>\n<td><code>browser</code></td>\n<td>The browser to get the context ids from. <code>ALL</code> Context ids from all open browsers shall be fetched. <code>ACTIVE</code> Only context ids from the active browser shall be fetched.</td>\n</tr>\n</table>\n<p>The ACTIVE context of the ACTIVE Browser is the <code>Current</code> Context.</p>\n<p><a href=\"https://forum.robotframework.org/t//4264\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Context%20Ids"
  },
  {
    "name": "Get Cookie",
    "library": "Browser",
    "args": [
      {
        "name": "cookie",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "cookie: str"
      },
      {
        "name": "return_type",
        "type": {
          "name": "CookieType",
          "typedoc": "CookieType",
          "nested": [],
          "union": false
        },
        "defaultValue": "dictionary",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "return_type: CookieType = dictionary"
      }
    ],
    "doc": "<p>Returns information of cookie with <code>name</code> as a Robot Framework dot dictionary or a string.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>cookie</code></td>\n<td>Name of the cookie to be retrieved.</td>\n</tr>\n<tr>\n<td><code>return_type</code></td>\n<td>Type of the return value. Can be either <code>dictionary</code> or <code>string</code>. Defaults to <code>dictionary</code>.</td>\n</tr>\n</table>\n<p>If <code>return_type</code> is <code>dictionary</code> or <code>dict</code> then keyword returns a of Robot Framework <a href=\"https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#accessing-list-and-dictionary-items\">dot dictionary</a> The dictionary contains all possible key value pairs of the cookie. If <code>return_type</code> is <code>string</code> or <code>str</code>, then keyword returns the cookie as a string in format: <code>name1=value1</code>. The return value contains only <code>name</code> and <code>value</code> keys of the cookie.</p>\n<p>If no cookie is found with <code>name</code> keyword fails. The cookie dictionary contains details about the cookie. Keys available in the dictionary are documented in the table below.</p>\n<table border=\"1\">\n<tr>\n<td><b>Value</b></td>\n<td><b>Explanation</b></td>\n</tr>\n<tr>\n<td>name</td>\n<td>The name of a cookie, mandatory.</td>\n</tr>\n<tr>\n<td>value</td>\n<td>Value of the cookie, mandatory.</td>\n</tr>\n<tr>\n<td>url</td>\n<td>Define the scope of the cookie, what URLs the cookies should be sent to.</td>\n</tr>\n<tr>\n<td>domain</td>\n<td>Specifies which hosts are allowed to receive the cookie.</td>\n</tr>\n<tr>\n<td>path</td>\n<td>Indicates a URL path that must exist in the requested URL, for example <span class=\"name\">/</span>.</td>\n</tr>\n<tr>\n<td>expires</td>\n<td>Lifetime of a cookie. Returned as datatime object or None if not valid time received.</td>\n</tr>\n<tr>\n<td>httpOnly</td>\n<td>When true, the cookie is not accessible via JavaScript.</td>\n</tr>\n<tr>\n<td>secure</td>\n<td>When true, the cookie is only used with HTTPS connections.</td>\n</tr>\n<tr>\n<td>sameSite</td>\n<td>Attribute lets servers require that a cookie shouldn't be sent with cross-origin requests.</td>\n</tr>\n</table>\n<p>See <a href=\"https://playwright.dev/docs/api/class-browsercontext#browsercontextaddcookiescookies\">playwright documentation</a> for details about each attribute.</p>\n<p>Example:</p>\n<pre>\n${cookie}=        <a href=\"#Get%20Cookie\" class=\"name\">Get Cookie</a>              Foobar\nShould Be Equal   ${cookie.value}           Tidii\nShould Be Equal   ${cookie.expires.year}     ${2020}\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4265\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Cookie"
  },
  {
    "name": "Get Cookies",
    "library": "Browser",
    "args": [
      {
        "name": "return_type",
        "type": {
          "name": "CookieType",
          "typedoc": "CookieType",
          "nested": [],
          "union": false
        },
        "defaultValue": "dictionary",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "return_type: CookieType = dictionary"
      }
    ],
    "doc": "<p>Returns cookies from the current active browser context.</p>\n<p>If <code>return_type</code> is <code>dictionary</code> or <code>dict</code> then keyword returns list of Robot Framework <a href=\"https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#accessing-list-and-dictionary-items\">dot dictionaries</a> The dictionary contains all possible key value pairs of the cookie. See <a href=\"#Get%20Cookie\" class=\"name\">Get Cookie</a> keyword documentation about the dictionary keys and values.</p>\n<p>If <code>return_type</code> is <code>string</code> or <code>str</code>, then keyword returns the cookie as a string in format: <code>name1=value1; name2=value2; name3=value3</code>. The return value contains only <code>name</code> and <code>value</code> keys of the cookie.</p>\n<p><a href=\"https://forum.robotframework.org/t//4266\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Cookies"
  },
  {
    "name": "Get Device",
    "library": "Browser",
    "args": [
      {
        "name": "name",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name: str"
      }
    ],
    "doc": "<p>Get a single device descriptor with name exactly matching name.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>name</code></td>\n<td>Given name of the requested device. See Playwright's <a href=\"https://github.com/microsoft/playwright/blob/master/packages/playwright-core/src/server/deviceDescriptorsSource.json\">deviceDescriptorsSource.json</a> for a formatted list.</td>\n</tr>\n</table>\n<p>Allows a concise syntax to set website testing values to exact matches of specific mobile devices.</p>\n<p>Use by passing to a context. After creating a context with devicedescriptor, before using ensure your active page is on that context. Usage:</p>\n<pre>\n${device}=          <a href=\"#Get%20Device\" class=\"name\">Get Device</a>       iPhone X\n<a href=\"#New%20Context\" class=\"name\">New Context</a>         &amp;{device}\n<a href=\"#New%20Page\" class=\"name\">New Page</a>\n<a href=\"#Get%20Viewport%20Size\" class=\"name\">Get Viewport Size</a>   # returns { \"width\": 375, \"height\": 812 }\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4267\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Device"
  },
  {
    "name": "Get Devices",
    "library": "Browser",
    "args": [],
    "doc": "<p>Returns a dict of all playwright device descriptors.</p>\n<p>See Playwright's <a href=\"https://github.com/microsoft/playwright/blob/master/packages/playwright-core/src/server/deviceDescriptorsSource.json\">deviceDescriptorsSource.json</a> for a formatted list.</p>\n<p><a href=\"https://forum.robotframework.org/t//4268\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Devices"
  },
  {
    "name": "Get Download State",
    "library": "Browser",
    "args": [
      {
        "name": "download",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "DownloadInfo",
              "typedoc": "DownloadInfo",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "download: DownloadInfo | str"
      },
      {
        "name": "assertion_operator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "AssertionOperator",
              "typedoc": "AssertionOperator",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_operator: AssertionOperator | None = None"
      },
      {
        "name": "assertion_expected",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Any",
              "typedoc": "Any",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_expected: Any | None = None"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Gets the state of a download.</p>\n<p>Returns a dictionary of type <a href=\"#type-DownloadInfo\" class=\"name\">DownloadInfo</a> with the following keys:</p>\n<pre>\n{\n  saveAs: str\n  suggestedFilename: str\n  state: str\n  downloadID: Optional[str]\n}\n</pre>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>download</code></td>\n<td><a href=\"#type-DownloadInfo\" class=\"name\">DownloadInfo</a> dictionary returned from <a href=\"#Promise%20To%20Wait%20For%20Download\" class=\"name\">Promise To Wait For Download</a> or download id as string.</td>\n</tr>\n<tr>\n<td><code>assertion_operator</code></td>\n<td>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details. Defaults to None.</td>\n</tr>\n<tr>\n<td><code>assertion_expected</code></td>\n<td>Expected state of the download. Be aware that the returned value is a dictionary</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>overrides the default error message for assertion.</td>\n</tr>\n</table>\n<p><a href=\"https://forum.robotframework.org/t//6479\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Download%20State"
  },
  {
    "name": "Get Element",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      }
    ],
    "doc": "<p>Returns a reference to a Playwright <a href=\"https://playwright.dev/docs/api/class-locator\">Locator</a>.</p>\n<p>The reference can be used in subsequent selectors.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector from which shall be retrieved . See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n</table>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p>Example:</p>\n<pre>\n${element} =    <a href=\"#Get%20Element\" class=\"name\">Get Element</a>    \\#username_field\n${option_value} =    <a href=\"#Get%20Property\" class=\"name\">Get Property</a>    ${element} &gt;&gt; optionOne    value    # Locator is resolved from the page.\n${option_value} =    <a href=\"#Get%20Property\" class=\"name\">Get Property</a>    ${element} &gt;&gt; optionTwo    value    # Locator is resolved again from the page.\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4269\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Element"
  },
  {
    "name": "Get Element By",
    "library": "Browser",
    "args": [
      {
        "name": "selection_strategy",
        "type": {
          "name": "SelectionStrategy",
          "typedoc": "SelectionStrategy",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selection_strategy: SelectionStrategy"
      },
      {
        "name": "text",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "RegExp",
              "typedoc": "RegExp",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "text: str | RegExp"
      },
      {
        "name": "exact",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "exact: bool = False"
      },
      {
        "name": "all_elements",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "all_elements: bool = False"
      }
    ],
    "doc": "<p>Allows locating elements by their features.</p>\n<p>Selection strategies can be several Playwright strategies like AltText or Label. See <a href=\"https://playwright.dev/docs/locators\">Playwright Locators</a> for more information.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>locator_type</code></td>\n<td>SelectionStrategy to be used. Refers to Playwrights <code>page.getBy***</code> functions. See <a href=\"https://playwright.dev/docs/locators\">https://playwright.dev/docs/locators</a></td>\n</tr>\n<tr>\n<td><code>text</code></td>\n<td>Text to locate the element for.</td>\n</tr>\n<tr>\n<td><code>exact</code></td>\n<td>Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace. This has no effect if RegExp is used or if TestID is used as strategy.</td>\n</tr>\n<tr>\n<td><code>all_elements</code></td>\n<td>If True, returns all matched elements as a list.</td>\n</tr>\n</table>\n<p>This keywords implements the following Playwright functions:</p>\n<ul>\n<li><a href=\"https://playwright.dev/docs/api/class-page#page-get-by-alt-text\">page.getByAltText</a></li>\n<li><a href=\"https://playwright.dev/docs/api/class-page#page-get-by-label\">page.getByLabel</a></li>\n<li><a href=\"https://playwright.dev/docs/api/class-page#page-get-by-placeholder\">page.getByPlaceholder</a></li>\n<li><a href=\"https://playwright.dev/docs/api/class-page#page-get-by-test-id\">page.getByTestId</a></li>\n<li><a href=\"https://playwright.dev/docs/api/class-page#page-get-by-text\">page.getByText</a></li>\n<li><a href=\"https://playwright.dev/docs/api/class-page#page-get-by-title\">page.getByTitle</a></li>\n</ul>\n<p><code>page.getByRole</code> is supported by <a href=\"#Get%20Element%20By%20Role\" class=\"name\">Get Element By Role</a> keyword.</p>\n<p>If an element shall be fetched from an iframe, a selector prefix must be set using <a href=\"#Set%20Selector%20Prefix\" class=\"name\">Set Selector Prefix</a> keyword including <code>&gt;&gt;&gt;</code> as ending.</p>\n<p><a href=\"https://forum.robotframework.org/t//5937\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Element%20By"
  },
  {
    "name": "Get Element By Role",
    "library": "Browser",
    "args": [
      {
        "name": "role",
        "type": {
          "name": "ElementRole",
          "typedoc": "ElementRole",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "role: ElementRole"
      },
      {
        "name": "",
        "type": null,
        "defaultValue": null,
        "kind": "NAMED_ONLY_MARKER",
        "required": false,
        "repr": "*"
      },
      {
        "name": "all_elements",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "all_elements: bool = False"
      },
      {
        "name": "checked",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "checked: bool | None = None"
      },
      {
        "name": "disabled",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "disabled: bool | None = None"
      },
      {
        "name": "exact",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "exact: bool | None = None"
      },
      {
        "name": "expanded",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "expanded: bool | None = None"
      },
      {
        "name": "include_hidden",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "include_hidden: bool | None = None"
      },
      {
        "name": "level",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "level: int | None = None"
      },
      {
        "name": "name",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "RegExp",
              "typedoc": "RegExp",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "name: str | RegExp | None = None"
      },
      {
        "name": "pressed",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "pressed: bool | None = None"
      },
      {
        "name": "selected",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "selected: bool | None = None"
      }
    ],
    "doc": "<p>Returns a reference to Playwright <a href=\"https://playwright.dev/docs/api/class-locator\">Locator</a> for the matched element by <code>role</code> or a list of references if <code>all_elements</code> is set to <code>True</code>.</p>\n<p>Allows locating elements by their <a href=\"https://www.w3.org/TR/wai-aria-1.2/#roles\">ARIA role</a>, <a href=\"https://www.w3.org/TR/wai-aria-1.2/#aria-attributes\">ARIA attributes</a> and <a href=\"https://w3c.github.io/accname/#dfn-accessible-name\">accessible name</a>.</p>\n<p>Consider the following DOM structure.</p>\n<pre>\n&lt;h3&gt;Sign up&lt;/h3&gt;\n&lt;label&gt;\n  &lt;input type=\"checkbox\" /&gt; Subscribe\n&lt;/label&gt;\n&lt;br/&gt;\n&lt;button&gt;Submit&lt;/button&gt;\n</pre>\n<p>You can locate each element by it's implicit role:</p>\n<pre>\n${heading}    Get Element By Role    heading    name=Sign up\n${checkbox}   Get Element By Role    checkbox    name=Subscribe\n${button}     Get Element By Role    button    name=/submit/i\n</pre>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>all_elements</code></td>\n<td>If True, returns all matched elements as a list.</td>\n</tr>\n<tr>\n<td><code>role</code></td>\n<td>Role from which shall be retrieved.</td>\n</tr>\n<tr>\n<td><code>checked</code></td>\n<td>An attribute that is usually set by aria-checked or native &lt;input type=checkbox&gt; controls.</td>\n</tr>\n<tr>\n<td><code>disabled</code></td>\n<td>An attribute that is usually set by aria-disabled or disabled.</td>\n</tr>\n<tr>\n<td><code>exact</code></td>\n<td>Whether name is matched exactly: case-sensitive and whole-string. Defaults to false. Ignored when name is a regular expression. Note that exact match still trims whitespace.</td>\n</tr>\n<tr>\n<td><code>expanded</code></td>\n<td>An attribute that is usually set by aria-expanded.</td>\n</tr>\n<tr>\n<td><code>include_hidden</code></td>\n<td>Option that controls whether hidden elements are matched. By default, only non-hidden elements, as defined by ARIA, are matched by role selector.</td>\n</tr>\n<tr>\n<td><code>level</code></td>\n<td>A number attribute that is usually present for roles heading, list item, row, treeitem, with default values for &lt;h1&gt;-&lt;h6&gt; elements.</td>\n</tr>\n<tr>\n<td><code>name</code></td>\n<td>Option to match the accessible name. By default, matching is case-insensitive and searches for a substring, use exact to control this behavior.</td>\n</tr>\n<tr>\n<td><code>pressed</code></td>\n<td>An attribute that is usually set by aria-pressed.</td>\n</tr>\n<tr>\n<td><code>selected</code></td>\n<td>An attribute that is usually set by aria-selected.</td>\n</tr>\n</table>\n<p>If an element shall be fetched from an iframe, a selector prefix must be set using <a href=\"#Set%20Selector%20Prefix\" class=\"name\">Set Selector Prefix</a> keyword including <code>&gt;&gt;&gt;</code> as ending.</p>\n<p><a href=\"https://forum.robotframework.org/t//5938\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Element%20By%20Role"
  },
  {
    "name": "Get Element Count",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      },
      {
        "name": "assertion_operator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "AssertionOperator",
              "typedoc": "AssertionOperator",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_operator: AssertionOperator | None = None"
      },
      {
        "name": "assertion_expected",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "0",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_expected: int | str = 0"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Returns the count of elements found with <code>selector</code>.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector which shall be counted. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n<tr>\n<td><code>assertion_operator</code></td>\n<td>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details. Defaults to None.</td>\n</tr>\n<tr>\n<td><code>assertion_expected</code></td>\n<td>Expected value for the counting</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>overrides the default error message for assertion.</td>\n</tr>\n</table>\n<p>Optionally asserts that the state matches the specified assertion. See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. By default assertion is not done.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#Get%20Element%20Count\" class=\"name\">Get Element Count</a>    label    &gt;    1\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4270\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Element%20Count"
  },
  {
    "name": "Get Element States",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      },
      {
        "name": "assertion_operator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "AssertionOperator",
              "typedoc": "AssertionOperator",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_operator: AssertionOperator | None = None"
      },
      {
        "name": "assertion_expected",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "ElementState",
              "typedoc": "ElementState",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*assertion_expected: ElementState | str"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "message: str | None = None"
      },
      {
        "name": "return_names",
        "type": null,
        "defaultValue": "True",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "return_names=True"
      }
    ],
    "doc": "<p>Get the active states from the element found by <code>selector</code>.</p>\n<p>This Keyword returns a list of states that are valid for the selected element.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector of the corresponding object. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n<tr>\n<td><code>assertion_operator</code></td>\n<td>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details. Defaults to None.</td>\n</tr>\n<tr>\n<td><code>*assertion_expected</code></td>\n<td>Expected states</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>overrides the default error message for assertion.</td>\n</tr>\n<tr>\n<td><code>return_names</code></td>\n<td>If set to <code>False</code> the keyword does return an IntFlag object (<a href=\"#type-ElementState\" class=\"name\">ElementState</a>) instead of a list. <a href=\"#type-ElementState\" class=\"name\">ElementState</a> may contain multiple states at the same time. Defaults to <code>True</code>.</td>\n</tr>\n</table>\n<p>Optionally asserts that the state matches the specified assertion. See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. By default, assertion is not done.</p>\n<p>This keyword internally works with Python IntFlag. Flags can be processed using bitwise operators like &amp; (bitwise AND) and | (bitwise OR). When using the assertion operators <code>then</code>, <code>evaluate</code> or <code>validate</code> the <code>value</code> contain the states as <a href=\"#type-ElementState\" class=\"name\">ElementState</a>.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#Get%20Element%20States\" class=\"name\">Get Element States</a>    h1    validate    value &amp; visible   # Fails in case of an invisible element\n<a href=\"#Get%20Element%20States\" class=\"name\">Get Element States</a>    h1    then    value &amp; (visible | hidden)  # Returns either <code>['visible']</code> or <code>['hidden']</code>\n<a href=\"#Get%20Element%20States\" class=\"name\">Get Element States</a>    h1    then    bool(value &amp; visible)  # Returns <code>${True}</code> if element is visible\n</pre>\n<p>The most typical use case would be to verify if an element contains a specific state or multiple states.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#Get%20Element%20States\" class=\"name\">Get Element States</a>    id=checked_elem      *=    checked\n<a href=\"#Get%20Element%20States\" class=\"name\">Get Element States</a>    id=checked_elem      not contains    checked\n<a href=\"#Get%20Element%20States\" class=\"name\">Get Element States</a>    id=invisible_elem    contains    hidden    attached\n<a href=\"#Get%20Element%20States\" class=\"name\">Get Element States</a>    id=disabled_elem     contains    visible    disabled    readonly\n</pre>\n<p>Elements do return the positive and negative values if applicable. As example, a checkbox does return either <code>checked</code> or <code>unchecked</code> while a text input element has none of those two states. Select elements have also either <code>selected</code> or <code>unselected</code>.</p>\n<p>The state of <code>animating</code> will be set if an element is not considered <code>stable</code> within 300 ms.</p>\n<p>If an element is not attached to the dom, so it can not be found within 250ms it is marked as <code>detached</code> as the only state.</p>\n<p><code>stable</code> state is not returned, because it would cause too high delay in that keyword.</p>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p><a href=\"https://forum.robotframework.org/t//4272\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Element%20States"
  },
  {
    "name": "Get Elements",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      }
    ],
    "doc": "<p>Returns a reference to Playwright <a href=\"https://playwright.dev/docs/api/class-locator\">Locator</a> for all matched elements by <code>selector</code>.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector from which shall be retrieved. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n</table>\n<p>Example:</p>\n<pre>\n${elements} =    <a href=\"#Get%20Elements\" class=\"name\">Get Elements</a>\n${elem} =    Get From List    ${elements}    0\n${option_value} =    <a href=\"#Get%20Property\" class=\"name\">Get Property</a>    ${elem} &gt;&gt; option    value\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4273\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Elements"
  },
  {
    "name": "Get Page Errors",
    "library": "Browser",
    "args": [
      {
        "name": "assertion_operator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "AssertionOperator",
              "typedoc": "AssertionOperator",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_operator: AssertionOperator | None = None"
      },
      {
        "name": "assertion_expected",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Any",
              "typedoc": "Any",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_expected: Any | None = None"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      },
      {
        "name": "",
        "type": null,
        "defaultValue": null,
        "kind": "NAMED_ONLY_MARKER",
        "required": false,
        "repr": "*"
      },
      {
        "name": "full",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "full: bool = False"
      },
      {
        "name": "last",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "last: int | timedelta | None = None"
      }
    ],
    "doc": "<p>Returns the page errors of the active page.</p>\n<p>If assertions are used and fail, this keyword will fail immediately without retrying.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td>assertion_operator</td>\n<td>Optional assertion operator. See <a href=\"#Assertions\" class=\"name\">Assertions</a> for more information.</td>\n</tr>\n<tr>\n<td>assertion_expected</td>\n<td>Optional expected value. See <a href=\"#Assertions\" class=\"name\">Assertions</a> for more information.</td>\n</tr>\n<tr>\n<td>message</td>\n<td>Optional custom message to use on failure. See <a href=\"#Assertions\" class=\"name\">Assertions</a> for more information.</td>\n</tr>\n<tr>\n<td>full</td>\n<td>If true, returns the full console log. If false, returns only new entries that were added since last time.</td>\n</tr>\n<tr>\n<td>last</td>\n<td>If set, returns only the last n entries. Can be <span class=\"name\">int</span> for number of entries or <a href=\"#type-timedelta\" class=\"name\">timedelta</a> for time period.</td>\n</tr>\n</table>\n<p>The returned data is a <a href=\"#type-list\" class=\"name\">list</a> of error messages.</p>\n<p>An error message is a <span class=\"name\">dict</span> with the following structure:</p>\n<pre>\n{\n  \"name\": str,\n  \"message\": str,\n  \"stack\": str,\n  \"time\": str\n}\n</pre>\n<p>Example:</p>\n<pre>\n[{\n  'name': 'ReferenceError',\n  'message': 'YT is not defined',\n  'stack': 'ReferenceError: YT is not defined\\n    at HTMLIFrameElement.onload (<a href=\"https://example.com/:20:2245\">https://example.com/:20:2245</a>)',\n  'time': '2023-02-05T20:08:48.912Z'\n}]\n</pre>\n<p>Keys:</p>\n<table border=\"1\">\n<tr>\n<th>Key</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>name</code></td>\n<td>The name/type of the error.</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>The human readable error message.</td>\n</tr>\n<tr>\n<td><code>stack</code></td>\n<td>The stack trace of the error, if given.</td>\n</tr>\n<tr>\n<td><code>time</code></td>\n<td>The timestamp of the error as ISO 8601 string.</td>\n</tr>\n</table>\n<p><a href=\"https://forum.robotframework.org/t//5268\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Page%20Errors"
  },
  {
    "name": "Get Page Ids",
    "library": "Browser",
    "args": [
      {
        "name": "page",
        "type": {
          "name": "SelectionType",
          "typedoc": "SelectionType",
          "nested": [],
          "union": false
        },
        "defaultValue": "ALL",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "page: SelectionType = ALL"
      },
      {
        "name": "context",
        "type": {
          "name": "SelectionType",
          "typedoc": "SelectionType",
          "nested": [],
          "union": false
        },
        "defaultValue": "ALL",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "context: SelectionType = ALL"
      },
      {
        "name": "browser",
        "type": {
          "name": "SelectionType",
          "typedoc": "SelectionType",
          "nested": [],
          "union": false
        },
        "defaultValue": "ALL",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "browser: SelectionType = ALL"
      }
    ],
    "doc": "<p>Returns a list of page ids based on the context and browser selection. See <a href=\"#Browser%2C%20Context%20and%20Page\" class=\"name\">Browser, Context and Page</a> for more information about Page and related concepts.</p>\n<p><code>ALL</code> and <code>ANY</code> are synonyms. <code>ACTIVE</code> and <code>CURRENT</code> are also synonyms.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>page</code></td>\n<td>The page to get the ids from. <code>ALL</code> Returns all page ids as a list. <code>ACTIVE</code> Returns the id of the active page as a list.</td>\n</tr>\n<tr>\n<td><code>context</code></td>\n<td>The context to get the page ids from. <code>ALL</code> Page ids from all contexts shall be fetched. <code>ACTIVE</code> Only page ids from the active context shall be fetched.</td>\n</tr>\n<tr>\n<td><code>browser</code></td>\n<td>The browser to get the page ids from. <code>ALL</code> Page ids from all open browsers shall be fetched. <code>ACTIVE</code> Only page ids from the active browser shall be fetched.</td>\n</tr>\n</table>\n<p>Example:</p>\n<pre>\nTest Case\n    <a href=\"#New%20Page\" class=\"name\">New Page</a>    <a href=\"http://www.imbus.de\">http://www.imbus.de</a>\n    <a href=\"#New%20Page\" class=\"name\">New Page</a>    <a href=\"http://www.reaktor.com\">http://www.reaktor.com</a>\n    ${current_page}=   <a href=\"#Get%20Page%20Ids\" class=\"name\">Get Page IDs</a>    ACTIVE    ACTIVE    ACTIVE\n    Log                Current page ID is: ${current_page}[0]\n    ${all_pages}=      <a href=\"#Get%20Page%20Ids\" class=\"name\">Get Page IDs</a>    CURRENT   CURRENT   ALL\n    Log Many           These are all Page IDs    @{all_pages}\n</pre>\n<p>The ACTIVE page of the ACTIVE context of the ACTIVE Browser is the <code>Current</code> Page.</p>\n<p><a href=\"https://forum.robotframework.org/t//4274\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Page%20Ids"
  },
  {
    "name": "Get Page Source",
    "library": "Browser",
    "args": [
      {
        "name": "assertion_operator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "AssertionOperator",
              "typedoc": "AssertionOperator",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_operator: AssertionOperator | None = None"
      },
      {
        "name": "assertion_expected",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Any",
              "typedoc": "Any",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_expected: Any | None = None"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Gets pages HTML source as a string.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>assertion_operator</code></td>\n<td>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details. Defaults to None.</td>\n</tr>\n<tr>\n<td><code>assertion_expected</code></td>\n<td>Expected value for the state</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>overrides the default error message for assertion.</td>\n</tr>\n</table>\n<p>Optionally does a string assertion. See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. By default assertion is not done.</p>\n<p>If there need to get element html, use <a href=\"#Get%20Property\" class=\"name\">Get Property</a> instead. Example:</p>\n<table border=\"1\">\n<tr>\n<td>${html1} = [ <a href=\"#Get%20Property\" class=\"name\">Get Property</a></td>\n<td>${selector}</td>\n<td>innerHTML</td>\n</tr>\n<tr>\n<td>${html2} = [ <a href=\"#Get%20Property\" class=\"name\">Get Property</a></td>\n<td>${selector}</td>\n<td>outerHTML</td>\n</tr>\n</table>\n<p><a href=\"https://forum.robotframework.org/t//4275\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Page%20Source"
  },
  {
    "name": "Get Property",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      },
      {
        "name": "property",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "property: str"
      },
      {
        "name": "assertion_operator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "AssertionOperator",
              "typedoc": "AssertionOperator",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_operator: AssertionOperator | None = None"
      },
      {
        "name": "assertion_expected",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Any",
              "typedoc": "Any",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_expected: Any | None = None"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Returns the <code>property</code> of the element found by <code>selector</code>.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector from which the info is to be retrieved. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n<tr>\n<td><code>property</code></td>\n<td>Requested property name.</td>\n</tr>\n<tr>\n<td><code>assertion_operator</code></td>\n<td>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details. Defaults to None.</td>\n</tr>\n<tr>\n<td><code>assertion_expected</code></td>\n<td>Expected value for the state</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>overrides the default error message for assertion.</td>\n</tr>\n</table>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p>Optionally asserts that the property value matches the expected value. See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. By default assertion is not done.</p>\n<p>If <code>assertion_operator</code> is set and property is not found, <code>value</code> is <code>None</code> and Keyword does not fail. See <a href=\"#Get%20Attribute\" class=\"name\">Get Attribute</a> for examples.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#Get%20Property\" class=\"name\">Get Property</a>    h1    innerText    ==    Login Page\n${property} =    <a href=\"#Get%20Property\" class=\"name\">Get Property</a>    h1    innerText\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4276\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Property"
  },
  {
    "name": "Get Scroll Position",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "selector: str | None = None"
      },
      {
        "name": "key",
        "type": {
          "name": "AreaFields",
          "typedoc": "AreaFields",
          "nested": [],
          "union": false
        },
        "defaultValue": "ALL",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "key: AreaFields = ALL"
      },
      {
        "name": "assertion_operator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "AssertionOperator",
              "typedoc": "AssertionOperator",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_operator: AssertionOperator | None = None"
      },
      {
        "name": "assertion_expected",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Any",
              "typedoc": "Any",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_expected: Any | None = None"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Gets elements or pages current scroll position as object <code>{top: float, left: float, bottom: float, right: float}</code>.</p>\n<p>It describes the rectangle which is visible of the scrollable content of that element. all values are measured from position {top: 0, left: 0}.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Optional selector from which shall be retrieved. If no selector is given the client size of the page itself is used (<code>document.scrollingElement</code>). See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n<tr>\n<td><code>key</code></td>\n<td>Optionally filters the returned values. If keys is set to <code>ALL</code> (default) it will return the scroll position as dictionary, otherwise it will just return the single value selected by the key.</td>\n</tr>\n<tr>\n<td><code>assertion_operator</code></td>\n<td>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details. Defaults to None.</td>\n</tr>\n<tr>\n<td><code>assertion_expected</code></td>\n<td>Expected value for the counting</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>overrides the default error message for assertion.</td>\n</tr>\n</table>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p>Optionally asserts that the value matches the specified assertion. See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. By default assertion is not done.</p>\n<p>See <a href=\"#Get%20BoundingBox\" class=\"name\">Get BoundingBox</a> or <a href=\"#Get%20Scroll%20Size\" class=\"name\">Get Scroll Size</a> for examples.</p>\n<p><a href=\"https://forum.robotframework.org/t//4277\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Scroll%20Position"
  },
  {
    "name": "Get Scroll Size",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "selector: str | None = None"
      },
      {
        "name": "key",
        "type": {
          "name": "SizeFields",
          "typedoc": "SizeFields",
          "nested": [],
          "union": false
        },
        "defaultValue": "ALL",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "key: SizeFields = ALL"
      },
      {
        "name": "assertion_operator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "AssertionOperator",
              "typedoc": "AssertionOperator",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_operator: AssertionOperator | None = None"
      },
      {
        "name": "assertion_expected",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Any",
              "typedoc": "Any",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_expected: Any | None = None"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Gets elements or pages scrollable size as object <code>{width: float, height: float}</code>.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Optional selector from which shall be retrieved. If no selector is given the scroll size of the page itself is used. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n<tr>\n<td><code>key</code></td>\n<td>Optionally filters the returned values. If keys is set to <code>ALL</code> (default) it will return the scroll size as dictionary, otherwise it will just return the single value selected by the key.</td>\n</tr>\n<tr>\n<td><code>assertion_operator</code></td>\n<td>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details. Defaults to None.</td>\n</tr>\n<tr>\n<td><code>assertion_expected</code></td>\n<td>Expected value for the counting</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>overrides the default error message for assertion.</td>\n</tr>\n</table>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p>Optionally asserts that the state matches the specified assertion. See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. By default assertion is not done.</p>\n<p>See <a href=\"#Get%20BoundingBox\" class=\"name\">Get BoundingBox</a> for more similar examples.</p>\n<p>Example use:</p>\n<pre>\n${height}=         <a href=\"#Get%20Scroll%20Size\" class=\"name\">Get Scroll Size</a>    height                          # filtered page by height\nLog                Width: ${height}                                   # Height: 58425\n${scroll_size}=    <a href=\"#Get%20Scroll%20Size\" class=\"name\">Get Scroll Size</a>    id=keyword-shortcuts-container  # unfiltered element\nLog                ${scroll_size}                                     # {'width': 253, 'height': 3036}\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4278\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Scroll%20Size"
  },
  {
    "name": "Get Select Options",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      },
      {
        "name": "assertion_operator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "AssertionOperator",
              "typedoc": "AssertionOperator",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_operator: AssertionOperator | None = None"
      },
      {
        "name": "assertion_expected",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Any",
              "typedoc": "Any",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_expected: Any | None = None"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Returns attributes of options of a <code>select</code> element as a list of dictionaries.</p>\n<p>Returned dictionaries have the following keys and their values \"index\", \"value\", \"label\" and \"selected\".</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector from which the info is to be retrieved. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n<tr>\n<td><code>assertion_operator</code></td>\n<td>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details. Defaults to None.</td>\n</tr>\n<tr>\n<td><code>assertion_expected</code></td>\n<td>Expected value for the state</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>overrides the default error message for assertion.</td>\n</tr>\n</table>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p>Optionally asserts that these match the specified assertion. See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. By default assertion is not done.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#Get%20Select%20Options\" class=\"name\">Get Select Options</a>     //select[2]    validate  [v[\"label\"] for v in value] == [\"Email\", \"Mobile\"]\n<a href=\"#Get%20Select%20Options\" class=\"name\">Get Select Options</a>   select#names     validate  any(v[\"label\"] == \"Mikko\" for v in value)\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4279\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Select%20Options"
  },
  {
    "name": "Get Selected Options",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      },
      {
        "name": "option_attribute",
        "type": {
          "name": "SelectAttribute",
          "typedoc": "SelectAttribute",
          "nested": [],
          "union": false
        },
        "defaultValue": "label",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "option_attribute: SelectAttribute = label"
      },
      {
        "name": "assertion_operator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "AssertionOperator",
              "typedoc": "AssertionOperator",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_operator: AssertionOperator | None = None"
      },
      {
        "name": "assertion_expected",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*assertion_expected"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Returns the specified attribute of selected options of the <code>select</code> element.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector from which the info is to be retrieved. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n<tr>\n<td><code>option_attribute</code></td>\n<td>Which attribute shall be returned/verified. Defaults to label.</td>\n</tr>\n<tr>\n<td><code>assertion_operator</code></td>\n<td>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details. Defaults to None.</td>\n</tr>\n<tr>\n<td><code>*assertion_expected</code></td>\n<td>Expected value for the state</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>overrides the default error message for assertion.</td>\n</tr>\n</table>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p>Optionally asserts that these match the specified assertion. See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. By default assertion is not done.</p>\n<ul>\n<li><code>==</code> , <code>!=</code> and <code>contains</code> / <code>*=</code> can work with multiple values</li>\n<li><code>validate</code> and <code>evaluate</code> only accepts one single expected value</li>\n</ul>\n<p>Other operators are not allowed.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#Select%20Options%20By\" class=\"name\">Select Options By</a>      label                    //select[2]    Email      Mobile\n${selected_list}         <a href=\"#Get%20Selected%20Options\" class=\"name\">Get Selected Options</a>   //select[2]                                         # getter\n<a href=\"#Get%20Selected%20Options\" class=\"name\">Get Selected Options</a>   //select[2]              label          <span class=\"name\">==</span>       Mobile             Mail   #assertion content\n<a href=\"#Select%20Options%20By\" class=\"name\">Select Options By</a>      label                    select#names   2          4\n<a href=\"#Get%20Selected%20Options\" class=\"name\">Get Selected Options</a>   select#names             index          <span class=\"name\">==</span>       2                  4      #assertion index\n<a href=\"#Get%20Selected%20Options\" class=\"name\">Get Selected Options</a>   select#names             label          *=         Mikko                     #assertion contain\n<a href=\"#Get%20Selected%20Options\" class=\"name\">Get Selected Options</a>   select#names             label          validate   len(value) == 3           #assertion length\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4280\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Selected%20Options"
  },
  {
    "name": "Get Style",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      },
      {
        "name": "key",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "ALL",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "key: str | None = ALL"
      },
      {
        "name": "assertion_operator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "AssertionOperator",
              "typedoc": "AssertionOperator",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_operator: AssertionOperator | None = None"
      },
      {
        "name": "assertion_expected",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Any",
              "typedoc": "Any",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_expected: Any | None = None"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      },
      {
        "name": "pseudo_element",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "pseudo_element: str | None = None"
      }
    ],
    "doc": "<p>Gets the computed style properties of the element selected by <code>selector</code>.</p>\n<p>Optionally matches with any sequence assertion operator.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector from which the style shall be retrieved. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n<tr>\n<td><code>key</code></td>\n<td>Key of the requested CSS property. Retrieves \"ALL\" styles as dictionary by default. All css settings can be used as keys even if they are not all returned in the dictionary.</td>\n</tr>\n<tr>\n<td><code>assertion_operator</code></td>\n<td>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details. Defaults to None.</td>\n</tr>\n<tr>\n<td><code>assertion_expected</code></td>\n<td>Expected value for the counting</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>overrides the default error message for assertion.</td>\n</tr>\n<tr>\n<td><code>pseudo_element</code></td>\n<td>Pseudo element to match. Defaults to None. Pseudo elements are special css</td>\n</tr>\n</table>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements\">Pseudo element</a> is a css fuctionality to add styles. Example <span class=\"name\">::before</span> or <span class=\"name\">::after</span>.</p>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p>Optionally asserts that the style matches the specified assertion. See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. By default assertion is not done.</p>\n<p><a href=\"https://forum.robotframework.org/t//4281\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Style"
  },
  {
    "name": "Get Table Cell Element",
    "library": "Browser",
    "args": [
      {
        "name": "table",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "table: str"
      },
      {
        "name": "column",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "column: str"
      },
      {
        "name": "row",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "row: str"
      }
    ],
    "doc": "<p>Returns the Web Element that has the same column index and same row index as the selected elements.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>table</code></td>\n<td>selector must select the <code>&lt;table&gt;</code> element that contains both selected elements</td>\n</tr>\n<tr>\n<td><code>column</code></td>\n<td>selector can select any <code>&lt;th&gt;</code> or <code>&lt;td&gt;</code> element or one of their descendants.</td>\n</tr>\n<tr>\n<td><code>row</code></td>\n<td>selector can select any <code>&lt;tr&gt;</code> element or one of their descendant like <code>&lt;td&gt;</code> elements.</td>\n</tr>\n</table>\n<p><code>column</code> and <code>row</code> can also consume index numbers instead of selectors. Indexes are starting from <code>0</code> and <code>-1</code> is specific for the last element.</p>\n<p>Selectors for <code>column</code> and <code>row</code> are directly appended to <code>table</code> selector like this: <code>f\"{table} &gt;&gt; {row}\" .</code></p>\n<table border=\"1\">\n<tr>\n<th>GitHub</th>\n<th>Slack</th>\n<th>Real Name</th>\n</tr>\n<tr>\n<td>mkorpela</td>\n<td>@mkorpela</td>\n<td>Mikko Korpela</td>\n</tr>\n<tr>\n<td>aaltat</td>\n<td>@aaltat</td>\n<td>Tatu Aalto</td>\n</tr>\n<tr>\n<td>xylix</td>\n<td>@Kerkko Pelttari</td>\n<td>Kerkko Pelttari</td>\n</tr>\n<tr>\n<td>Snooz82</td>\n<td>@René</td>\n<td>René Rohner</td>\n</tr>\n</table>\n<p>Example:</p>\n<pre>\n${table}=    Set Variable    [id=\"Get Table Cell Element\"] &gt;&gt; div.kw-docs table &gt;&gt; nth=1\n${e}=    <a href=\"#Get%20Table%20Cell%20Element\" class=\"name\">Get Table Cell Element</a>    ${table}    \"Real Name\"    \"aaltat\"   # Returns element with text <code>Tatu Aalto</code>\nGet Text    ${e}    ==    Tatu Aalto\n${e}=    <a href=\"#Get%20Table%20Cell%20Element\" class=\"name\">Get Table Cell Element</a>    ${table}    \"Slack\"    \"Mikko Korpela\"   # Returns element with text <code>@mkorpela</code>\nGet Text    ${e}    ==    @mkorpela\n${e}=    <a href=\"#Get%20Table%20Cell%20Element\" class=\"name\">Get Table Cell Element</a>    ${table}    \"mkorpela\"    \"Kerkko Pelttari\"   # column does not need to be in row 0\nGet Text    ${e}    ==    @mkorpela\n${e}=    <a href=\"#Get%20Table%20Cell%20Element\" class=\"name\">Get Table Cell Element</a>    ${table}    2    -1   # Index is also directly possible\nGet Text    ${e}    ==    René Rohner\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4282\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Table%20Cell%20Element"
  },
  {
    "name": "Get Table Cell Index",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      },
      {
        "name": "assertion_operator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "AssertionOperator",
              "typedoc": "AssertionOperator",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_operator: AssertionOperator | None = None"
      },
      {
        "name": "assertion_expected",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "0",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_expected: int | str = 0"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Returns the index (0 based) of a table cell within its row.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>can select any <code>&lt;th&gt;</code> or <code>&lt;td&gt;</code> element or one of their descendants. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n<tr>\n<td><code>assertion_operator</code></td>\n<td>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details. Defaults to None.</td>\n</tr>\n<tr>\n<td><code>assertion_expected</code></td>\n<td>Expected value for the counting</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>overrides the default error message for assertion.</td>\n</tr>\n</table>\n<p>Example:</p>\n<pre>\n${table}=    Set Variable    id=<a href=\"#Get%20Table%20Cell%20Element\" class=\"name\">Get Table Cell Element</a> &gt;&gt; div.kw-docs table   #Table of keyword <a href=\"#Get%20Table%20Cell%20Element\" class=\"name\">Get Table Cell Element</a>\n${idx}=    <a href=\"#Get%20Table%20Cell%20Index\" class=\"name\">Get Table Cell Index</a>    ${table} &gt;&gt; \"Real Name\"\nShould Be Equal    ${idx}    ${2}\n<a href=\"#Get%20Table%20Cell%20Index\" class=\"name\">Get Table Cell Index</a>    ${table} &gt;&gt; \"@aaltat\"    ==    1\n</pre>\n<p>Optionally asserts that the index matches the specified assertion. See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. By default assertion is not done.</p>\n<p><a href=\"https://forum.robotframework.org/t//4283\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Table%20Cell%20Index"
  },
  {
    "name": "Get Table Row Index",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      },
      {
        "name": "assertion_operator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "AssertionOperator",
              "typedoc": "AssertionOperator",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_operator: AssertionOperator | None = None"
      },
      {
        "name": "assertion_expected",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "0",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_expected: int | str = 0"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Returns the index (0 based) of a table row.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>can select any <code>&lt;th&gt;</code> or <code>&lt;td&gt;</code> element or one of their descendants. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n<tr>\n<td><code>assertion_operator</code></td>\n<td>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details. Defaults to None.</td>\n</tr>\n<tr>\n<td><code>assertion_expected</code></td>\n<td>Expected value for the counting</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>overrides the default error message for assertion.</td>\n</tr>\n</table>\n<p>Example:</p>\n<pre>\n${table}=    Set Variable    id=<a href=\"#Get%20Table%20Cell%20Element\" class=\"name\">Get Table Cell Element</a> &gt;&gt; div.kw-docs table   #Table of keyword <a href=\"#Get%20Table%20Cell%20Element\" class=\"name\">Get Table Cell Element</a>\n${idx}=    <a href=\"#Get%20Table%20Row%20Index\" class=\"name\">Get Table Row Index</a>    ${table} &gt;&gt; \"@René\"\nShould Be Equal    ${idx}    ${4}\n<a href=\"#Get%20Table%20Row%20Index\" class=\"name\">Get Table Row Index</a>    ${table} &gt;&gt; \"@aaltat\"    ==    2\n</pre>\n<p>Optionally asserts that the index matches the specified assertion. See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. By default assertion is not done.</p>\n<p><a href=\"https://forum.robotframework.org/t//4284\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Table%20Row%20Index"
  },
  {
    "name": "Get Text",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      },
      {
        "name": "assertion_operator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "AssertionOperator",
              "typedoc": "AssertionOperator",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_operator: AssertionOperator | None = None"
      },
      {
        "name": "assertion_expected",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Any",
              "typedoc": "Any",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_expected: Any | None = None"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Returns text attribute of the element found by <code>selector</code>.</p>\n<p>Keyword can also return <span class=\"name\">input</span> or <span class=\"name\">textarea</span> value property text. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>assertion_operator</code></td>\n<td>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details. Defaults to None.</td>\n</tr>\n<tr>\n<td><code>assertion_expected</code></td>\n<td>Expected value for the state</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>overrides the default error message for assertion.</td>\n</tr>\n</table>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p>Optionally asserts that the text matches the specified assertion. See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. By default, assertion is not done.</p>\n<p>Example:</p>\n<pre>\n${text} =    <a href=\"#Get%20Text\" class=\"name\">Get Text</a>    id=important                            # Returns element text without assertion.\n${text} =    <a href=\"#Get%20Text\" class=\"name\">Get Text</a>    id=important    ==    Important text    # Returns element text with assertion.\n${text} =    <a href=\"#Get%20Text\" class=\"name\">Get Text</a>    //input         ==    root              # Returns input element text with assertion.\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4285\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Text"
  },
  {
    "name": "Get Title",
    "library": "Browser",
    "args": [
      {
        "name": "assertion_operator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "AssertionOperator",
              "typedoc": "AssertionOperator",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_operator: AssertionOperator | None = None"
      },
      {
        "name": "assertion_expected",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Any",
              "typedoc": "Any",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_expected: Any | None = None"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Returns the title of the current page.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>assertion_operator</code></td>\n<td>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details. Defaults to None.</td>\n</tr>\n<tr>\n<td><code>assertion_expected</code></td>\n<td>Expected value for the state</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>overrides the default error message for assertion.</td>\n</tr>\n</table>\n<p>Optionally asserts that title matches the specified assertion. See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. By default assertion is not done.</p>\n<p><a href=\"https://forum.robotframework.org/t//4286\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Title"
  },
  {
    "name": "Get Url",
    "library": "Browser",
    "args": [
      {
        "name": "assertion_operator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "AssertionOperator",
              "typedoc": "AssertionOperator",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_operator: AssertionOperator | None = None"
      },
      {
        "name": "assertion_expected",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Any",
              "typedoc": "Any",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_expected: Any | None = None"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Returns the current URL.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>assertion_operator</code></td>\n<td>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details. Defaults to None.</td>\n</tr>\n<tr>\n<td><code>assertion_expected</code></td>\n<td>Expected value for the state</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>overrides the default error message for assertion.</td>\n</tr>\n</table>\n<p>Optionally asserts that it matches the specified assertion. See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. By default assertion is not done.</p>\n<p><a href=\"https://forum.robotframework.org/t//4287\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Url"
  },
  {
    "name": "Get Viewport Size",
    "library": "Browser",
    "args": [
      {
        "name": "key",
        "type": {
          "name": "SizeFields",
          "typedoc": "SizeFields",
          "nested": [],
          "union": false
        },
        "defaultValue": "ALL",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "key: SizeFields = ALL"
      },
      {
        "name": "assertion_operator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "AssertionOperator",
              "typedoc": "AssertionOperator",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_operator: AssertionOperator | None = None"
      },
      {
        "name": "assertion_expected",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Any",
              "typedoc": "Any",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_expected: Any | None = None"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Returns the current viewport dimensions.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>key</code></td>\n<td>Optionally filters the returned values. If keys is set to <code>ALL</code> (default) it will return the viewport size as dictionary, otherwise it will just return the single value selected by the key. Note: If a single value is retrieved, an assertion does <b>not</b> need a <code>validate</code> combined with a cast of <code>value</code>.</td>\n</tr>\n<tr>\n<td><code>assertion_operator</code></td>\n<td>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details. Defaults to None.</td>\n</tr>\n<tr>\n<td><code>assertion_expected</code></td>\n<td>Expected value for the counting</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>overrides the default error message for assertion.</td>\n</tr>\n</table>\n<p>Optionally asserts that the state matches the specified assertion. See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. By default assertion is not done.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#Get%20Viewport%20Size\" class=\"name\">Get Viewport Size</a>    ALL    ==    {'width':1280, 'height':720}\n<a href=\"#Get%20Viewport%20Size\" class=\"name\">Get Viewport Size</a>    width    &gt;=    1200\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4288\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Get%20Viewport%20Size"
  },
  {
    "name": "Go Back",
    "library": "Browser",
    "args": [],
    "doc": "<p>Navigates to the previous page in history.</p>\n<p><a href=\"https://forum.robotframework.org/t//4289\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Go%20Back"
  },
  {
    "name": "Go Forward",
    "library": "Browser",
    "args": [],
    "doc": "<p>Navigates to the next page in history.</p>\n<p><a href=\"https://forum.robotframework.org/t//4290\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Go%20Forward"
  },
  {
    "name": "Go To",
    "library": "Browser",
    "args": [
      {
        "name": "url",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "url: str"
      },
      {
        "name": "timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout: timedelta | None = None"
      },
      {
        "name": "wait_until",
        "type": {
          "name": "PageLoadStates",
          "typedoc": "PageLoadStates",
          "nested": [],
          "union": false
        },
        "defaultValue": "load",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "wait_until: PageLoadStates = load"
      }
    ],
    "doc": "<p>Navigates to the given <code>url</code>.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>url</code></td>\n<td>URL to be navigated to.</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td>time to wait page to load. If not defined will use the library default timeout.</td>\n</tr>\n<tr>\n<td><code>wait_until</code></td>\n<td>When to consider operation succeeded, defaults to load. Events can be either: <code>domcontentloaded</code> - consider operation to be finished when the DOMContentLoaded event is fired. <code>load</code> - consider operation to be finished when the load event is fired. <code>networkidle</code> - consider operation to be finished when there are no network connections for at least 500 ms. <code>commit</code> - consider operation to be finished when network response is received and the document started loading.</td>\n</tr>\n</table>\n<p>Returns the HTTP status code for the navigation request as integer or 0 if non received.</p>\n<p><a href=\"https://forum.robotframework.org/t//4291\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Go%20To"
  },
  {
    "name": "Grant Permissions",
    "library": "Browser",
    "args": [
      {
        "name": "permissions",
        "type": {
          "name": "Permission",
          "typedoc": "Permission",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*permissions: Permission"
      },
      {
        "name": "origin",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "origin: str | None = None"
      }
    ],
    "doc": "<p>Grants permissions to the current context.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>permissions</code></td>\n<td>is a list of permissions to grant. Permissions can be one of the following: geolocation, notifications, camera, microphone,</td>\n</tr>\n<tr>\n<td><code>origin</code></td>\n<td>The origin to grant permissions to, e.g. \"<a href=\"https://example.com\">https://example.com</a>\".</td>\n</tr>\n</table>\n<p>Example:</p>\n<pre>\n<a href=\"#New%20Context\" class=\"name\">New Context</a>\n<a href=\"#Grant%20Permissions\" class=\"name\">Grant Permissions</a>    geolocation\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4292\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Grant%20Permissions"
  },
  {
    "name": "Handle Future Dialogs",
    "library": "Browser",
    "args": [
      {
        "name": "action",
        "type": {
          "name": "DialogAction",
          "typedoc": "DialogAction",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "action: DialogAction"
      },
      {
        "name": "prompt_input",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "prompt_input: str = "
      }
    ],
    "doc": "<p>Handle next dialog on page with <code>action</code>.</p>\n<p>Dialog can be any of alert, beforeunload, confirm or prompt. Handling dialogue must be called before the action, like example click, that triggers the dialogue.</p>\n<p>If a handler is not set dialogs are dismissed by default.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>action</code></td>\n<td>How to handle the alert. Can be <code>accept</code> or <code>dismiss</code>.</td>\n</tr>\n<tr>\n<td><code>prompt_input</code></td>\n<td>The value to enter into prompt. Only valid if <code>action</code> argument equals <code>accept</code>. Defaults to empty string.</td>\n</tr>\n</table>\n<p>Example:</p>\n<pre>\n<a href=\"#Handle%20Future%20Dialogs\" class=\"name\">Handle Future Dialogs</a>    action=accept\n<a href=\"#Click\" class=\"name\">Click</a>                    \\#alerts\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4293\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Handle%20Future%20Dialogs"
  },
  {
    "name": "Highlight Elements",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      },
      {
        "name": "duration",
        "type": {
          "name": "timedelta",
          "typedoc": "timedelta",
          "nested": [],
          "union": false
        },
        "defaultValue": "0:00:05",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "duration: timedelta = 0:00:05"
      },
      {
        "name": "width",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "2px",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "width: str = 2px"
      },
      {
        "name": "style",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "dotted",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "style: str = dotted"
      },
      {
        "name": "color",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "blue",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "color: str = blue"
      },
      {
        "name": "",
        "type": null,
        "defaultValue": null,
        "kind": "NAMED_ONLY_MARKER",
        "required": false,
        "repr": "*"
      },
      {
        "name": "mode",
        "type": {
          "name": "HighlightMode",
          "typedoc": "HighlightMode",
          "nested": [],
          "union": false
        },
        "defaultValue": "border",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "mode: HighlightMode = border"
      }
    ],
    "doc": "<p>Adds a highlight to elements matched by the <code>selector</code>. Provides a style adjustment.</p>\n<p>Returns the number of highlighted elements. Keyword does not fail, if <span class=\"name\">locator</span> matched zero elements in the page. Keyword does not scroll elements to viewport and highlighted element might be outside the viewport. Use <a href=\"#Scroll%20To%20Element\" class=\"name\">Scroll To Element</a> keyword to scroll element in viewport.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selectors which shall be highlighted. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n<tr>\n<td><code>duration</code></td>\n<td>Sets for how long the selector shall be highlighted. Defaults to <code>5s</code> =&gt; 5 seconds. If set to 0 seconds, the highlighting is not deleted.</td>\n</tr>\n<tr>\n<td><code>width</code></td>\n<td>Sets the width of the highlight border. Defaults to 2px.</td>\n</tr>\n<tr>\n<td><code>style</code></td>\n<td>Sets the style of the border. Defaults to dotted.</td>\n</tr>\n<tr>\n<td><code>color</code></td>\n<td>Sets the color of the border. Valid colors i.e. are: <code>red</code>, <code>blue</code>, <code>yellow</code>, <code>pink</code>, <code>black</code></td>\n</tr>\n<tr>\n<td><code>mode</code></td>\n<td>Sets the mode of the highlight. Valid modes are: <code>border</code> (classic mode), <code>playwright</code> (Playwrights native). If <code>playwright</code> is used, <code>width</code>, <code>style</code> and <code>color</code> is ignored and only one highlighting can happen at the same time.</td>\n</tr>\n</table>\n<p>Keyword does not fail if selector resolves to multiple elements.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#Highlight%20Elements\" class=\"name\">Highlight Elements</a>    input#login_button    duration=200ms\n${count} =    <a href=\"#Highlight%20Elements\" class=\"name\">Highlight Elements</a>    input#login_button    duration=200ms    width=4px    style=solid    color=\\#FF00FF\nShould Be Equal    ${count}    ${5}\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4294\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Highlight%20Elements"
  },
  {
    "name": "Hover",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      },
      {
        "name": "position_x",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "float",
              "typedoc": "float",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "position_x: float | None = None"
      },
      {
        "name": "position_y",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "float",
              "typedoc": "float",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "position_y: float | None = None"
      },
      {
        "name": "force",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "force: bool = False"
      },
      {
        "name": "modifiers",
        "type": {
          "name": "KeyboardModifier",
          "typedoc": "KeyboardModifier",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*modifiers: KeyboardModifier"
      }
    ],
    "doc": "<p>Moves the virtual mouse and scrolls to the element found by <code>selector</code>.</p>\n<p>This method hovers over an element matching <code>selector</code> by performing the following steps:</p>\n<ul>\n<li>Find an element match matching <code>selector</code>. If there is none, wait until a matching element is attached to the DOM.</li>\n<li>Wait for actionability checks on the matched element, unless <code>force</code> option is set. If the element is detached during the checks, the whole action is retried.</li>\n<li>Scroll the element into view if needed.</li>\n<li>Use <a href=\"#Mouse%20Move\" class=\"name\">Mouse Move</a> to hover over the center of the element, or the specified <code>position</code>.</li>\n</ul>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n<td></td>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector element to hover. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n<td></td>\n</tr>\n<tr>\n<td><code>position_x</code> &amp; <code>position_y</code></td>\n<td>A point to hover relative to the top-left corner of element bounding box. If not specified, hovers over some visible point of the element. Only positive values within the bounding-box are allowed.</td>\n<td></td>\n</tr>\n<tr>\n<td><code>force</code></td>\n<td>Set to True to skip Playwright's [<a href=\"https://playwright.dev/docs/actionability\">https://playwright.dev/docs/actionability</a></td>\n<td>Actionability checks].</td>\n</tr>\n<tr>\n<td><code>*modifiers</code></td>\n<td>Modifier keys to press. Ensures that only these modifiers are pressed during the hover, and then restores current modifiers back. If not specified, currently pressed modifiers are used.</td>\n<td></td>\n</tr>\n</table>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#Hover\" class=\"name\">Hover</a>    h1\n<a href=\"#Hover\" class=\"name\">Hover</a>    h1    10   20    Alt\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4295\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Hover"
  },
  {
    "name": "Http",
    "library": "Browser",
    "args": [
      {
        "name": "url",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "url: str"
      },
      {
        "name": "method",
        "type": {
          "name": "RequestMethod",
          "typedoc": "RequestMethod",
          "nested": [],
          "union": false
        },
        "defaultValue": "GET",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "method: RequestMethod = GET"
      },
      {
        "name": "body",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "body: str | None = None"
      },
      {
        "name": "headers",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "dict",
              "typedoc": "dictionary",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "headers: dict | None = None"
      }
    ],
    "doc": "<p>Performs an HTTP request in the current browser context</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>url</code></td>\n<td>The request url, e.g. <code>/api/foo</code>.</td>\n</tr>\n<tr>\n<td><code>method</code></td>\n<td>The HTTP method for the request. Defaults to GET.</td>\n</tr>\n<tr>\n<td><code>body</code></td>\n<td>The request body. GET requests cannot have a body. If the body can be parsed as JSON, the <code>Content-Type</code> header for the request will be automatically set to <code>application/json</code>. Defaults to None.</td>\n</tr>\n<tr>\n<td><code>headers</code></td>\n<td>A dictionary of additional request headers. Defaults to None.</td>\n</tr>\n</table>\n<p>The response is a Python dictionary with following attributes:</p>\n<ul>\n<li><code>status</code> &lt;int&gt; The status code of the response.</li>\n<li><code>statusText</code> &lt;str&gt; Status text corresponding to <code>status</code>, e.g OK or INTERNAL SERVER ERROR. This may not be available for all browser.</li>\n<li><code>body</code> &lt;dict&gt; | &lt;str&gt; The response body. If the body can be parsed as a JSON object, it will be returned as Python dictionary, otherwise it is returned as a string.</li>\n<li><code>headers</code> &lt;dict&gt; A dictionary containing all response headers.</li>\n<li><code>ok</code> &lt;bool&gt; Whether the request was successful, i.e. the <code>status</code> is range 200-299.</li>\n</ul>\n<p>Here's an example of using Robot Framework dictionary variables and extended variable syntax to do assertions on the response object:</p>\n<pre>\n&amp;{res}=             <a href=\"#Http\" class=\"name\">HTTP</a>                       /api/endpoint\nShould Be Equal     ${res.status}              200\nShould Be Equal     ${res.body.some_field}     some value\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4296\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Http"
  },
  {
    "name": "Keyboard Input",
    "library": "Browser",
    "args": [
      {
        "name": "action",
        "type": {
          "name": "KeyboardInputAction",
          "typedoc": "KeyboardInputAction",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "action: KeyboardInputAction"
      },
      {
        "name": "input",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "input: str"
      },
      {
        "name": "delay",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "0:00:00",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "delay: int | timedelta = 0:00:00"
      }
    ],
    "doc": "<p>Input text into page with virtual keyboard.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>action</code></td>\n<td><code>insertText</code>: Dispatches only input event, does not emit the keydown, keyup or keypress events. <code>type</code>: Sends a keydown, keypress/input, and keyup event for each character in the text.</td>\n</tr>\n<tr>\n<td><code>input</code></td>\n<td>The inputstring to be typed. <i>No special keys possible.</i></td>\n</tr>\n<tr>\n<td><code>delay</code></td>\n<td>Time to wait between key presses in Robot Framework's time format. Defaults to 0.</td>\n</tr>\n</table>\n<p><b>Attention:</b> Argument type <span class=\"name\">int</span> for 'delay' in milliseconds has been changed to <a href=\"#type-timedelta\" class=\"name\">timedelta</a> in Browser 14.0.0. Use Robot Framework time format with units instead.</p>\n<p>Note: To press a special key, like Control or ArrowDown, use keyboard.press. Modifier keys DO NOT effect these methods. For testing modifier effects use single key presses with <code>Keyboard Key  press</code></p>\n<p>Example:</p>\n<pre>\n<a href=\"#Keyboard%20Input\" class=\"name\">Keyboard Input</a>    insertText    0123456789\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4297\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Keyboard%20Input"
  },
  {
    "name": "Keyboard Key",
    "library": "Browser",
    "args": [
      {
        "name": "action",
        "type": {
          "name": "KeyAction",
          "typedoc": "KeyAction",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "action: KeyAction"
      },
      {
        "name": "key",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "key: str"
      }
    ],
    "doc": "<p>Press a keyboard key on the virtual keyboard or set a key up or down.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>action</code></td>\n<td>Determine whether the key should be released (<code>up</code>), hold (<code>down</code>) or pressed once (<code>press</code>). <code>down</code> or <code>up</code> are useful for combinations i.e. with Shift.</td>\n</tr>\n<tr>\n<td><code>key</code></td>\n<td>The key to be pressed. An example of valid keys are: <code>F1</code> - <code>F12</code>, <code>Digit0</code> - <code>Digit9</code>, <code>KeyA</code> - <code>KeyZ</code>, <code>Backquote</code>, <code>Minus</code>, <code>Equal</code>, <code>Backslash</code>, <code>Backspace</code>, <code>Tab</code>, <code>Delete</code>, <code>Escape</code>, <code>ArrowDown</code>, <code>End</code>, <code>Enter</code>, <code>Home</code>, <code>Insert</code>, <code>PageDown</code>, <code>PageUp</code>, <code>ArrowRight</code>, <code>ArrowUp</code> , etc.</td>\n</tr>\n</table>\n<p>Useful keys for <code>down</code> and <code>up</code> for example are: <code>Shift</code>, <code>Control</code>, <code>Alt</code>, <code>Meta</code>, <code>ShiftLeft</code></p>\n<p>Example execution:</p>\n<pre>\n<a href=\"#Keyboard%20Key\" class=\"name\">Keyboard Key</a>    press    S\n<a href=\"#Keyboard%20Key\" class=\"name\">Keyboard Key</a>    down     Shift\n<a href=\"#Keyboard%20Key\" class=\"name\">Keyboard Key</a>    press    ArrowLeft\n<a href=\"#Keyboard%20Key\" class=\"name\">Keyboard Key</a>    press    Delete\n<a href=\"#Keyboard%20Key\" class=\"name\">Keyboard Key</a>    up       Shift\n</pre>\n<p>Note: Capital letters don't need to be written by the help of Shift. You can type them in directly.</p>\n<p><a href=\"https://forum.robotframework.org/t//4298\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Keyboard%20Key"
  },
  {
    "name": "Launch Browser Server",
    "library": "Browser",
    "args": [
      {
        "name": "browser",
        "type": {
          "name": "SupportedBrowsers",
          "typedoc": "SupportedBrowsers",
          "nested": [],
          "union": false
        },
        "defaultValue": "chromium",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "browser: SupportedBrowsers = chromium"
      },
      {
        "name": "headless",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "headless: bool = True"
      },
      {
        "name": "",
        "type": null,
        "defaultValue": null,
        "kind": "NAMED_ONLY_MARKER",
        "required": false,
        "repr": "*"
      },
      {
        "name": "args",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "list",
              "typedoc": "list",
              "nested": [
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "args: list[str] | None = None"
      },
      {
        "name": "channel",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "channel: str | None = None"
      },
      {
        "name": "chromiumSandbox",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "chromiumSandbox: bool = False"
      },
      {
        "name": "devtools",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "devtools: bool = False"
      },
      {
        "name": "downloadsPath",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "downloadsPath: str | None = None"
      },
      {
        "name": "env",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "dict",
              "typedoc": "dictionary",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "env: dict | None = None"
      },
      {
        "name": "executablePath",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "executablePath: str | None = None"
      },
      {
        "name": "firefoxUserPrefs",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "dict",
              "typedoc": "dictionary",
              "nested": [
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                },
                {
                  "name": "Union",
                  "typedoc": null,
                  "nested": [
                    {
                      "name": "str",
                      "typedoc": "string",
                      "nested": [],
                      "union": false
                    },
                    {
                      "name": "int",
                      "typedoc": "integer",
                      "nested": [],
                      "union": false
                    },
                    {
                      "name": "float",
                      "typedoc": "float",
                      "nested": [],
                      "union": false
                    },
                    {
                      "name": "bool",
                      "typedoc": "boolean",
                      "nested": [],
                      "union": false
                    }
                  ],
                  "union": true
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "firefoxUserPrefs: dict[str, str | int | float | bool] | None = None"
      },
      {
        "name": "handleSIGHUP",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "handleSIGHUP: bool = True"
      },
      {
        "name": "handleSIGINT",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "handleSIGINT: bool = True"
      },
      {
        "name": "handleSIGTERM",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "handleSIGTERM: bool = True"
      },
      {
        "name": "ignoreDefaultArgs",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "list",
              "typedoc": "list",
              "nested": [
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "ignoreDefaultArgs: list[str] | bool | None = None"
      },
      {
        "name": "port",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "port: int | None = None"
      },
      {
        "name": "proxy",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Proxy",
              "typedoc": "Proxy",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "proxy: Proxy | None = None"
      },
      {
        "name": "reuse_existing",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "reuse_existing: bool = True"
      },
      {
        "name": "slowMo",
        "type": {
          "name": "timedelta",
          "typedoc": "timedelta",
          "nested": [],
          "union": false
        },
        "defaultValue": "0:00:00",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "slowMo: timedelta = 0:00:00"
      },
      {
        "name": "timeout",
        "type": {
          "name": "timedelta",
          "typedoc": "timedelta",
          "nested": [],
          "union": false
        },
        "defaultValue": "0:00:30",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "timeout: timedelta = 0:00:30"
      },
      {
        "name": "wsPath",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "wsPath: str | None = None"
      }
    ],
    "doc": "<p>Launches a new playwright Browser server with specified options.</p>\n<p>Returns a websocket endpoint (wsEndpoint) string that can be used to connect to the server.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>port</code></td>\n<td>Port to use for the browser server. Defaults to 0, which results in a random free port being assigned.</td>\n</tr>\n<tr>\n<td><code>wsPath</code></td>\n<td>If set, Playwright will listen on the given path in addition to the main port. For security, this defaults to an unguessable string.</td>\n</tr>\n</table>\n<p>Check <a href=\"#New%20Browser\" class=\"name\">New Browser</a> for the other argument docs.</p>\n<p>The launched browser server can be used to connect to it with <a href=\"#Connect%20To%20Browser\" class=\"name\">Connect To Browser</a> keyword. This keyword can also be used from command line with <code>rfbrowser launch-browser-server</code> command.</p>\n<p>see <a href=\"https://playwright.dev/docs/api/class-browserserver#browser-server\">Playwright documentation</a> for more information.</p>\n<p><a href=\"https://forum.robotframework.org/t//4306\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Launch%20Browser%20Server"
  },
  {
    "name": "LocalStorage Clear",
    "library": "Browser",
    "args": [
      {
        "name": "frame_selector",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "frame_selector: str | None = None"
      }
    ],
    "doc": "<p>Remove all saved data from the local storage.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>frame_selector</code></td>\n<td>If this selector points to an element inside an iframe, the LocalStorage of that frame is used. Example: <code>iframe[name=\"test\"] &gt;&gt;&gt; body</code></td>\n</tr>\n</table>\n<p>Example:</p>\n<pre>\n<a href=\"#LocalStorage%20Set%20Item\" class=\"name\">Local Storage Set Item</a>      Foo    bar\n<a href=\"#LocalStorage%20Clear\" class=\"name\">LocalStorage Clear</a>\n${item} =    <a href=\"#LocalStorage%20Get%20Item\" class=\"name\">Local Storage Get Item</a>    Foo\nShould Be Equal    ${item}    ${None}\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4299\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#LocalStorage%20Clear"
  },
  {
    "name": "LocalStorage Get Item",
    "library": "Browser",
    "args": [
      {
        "name": "key",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "key: str"
      },
      {
        "name": "assertion_operator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "AssertionOperator",
              "typedoc": "AssertionOperator",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_operator: AssertionOperator | None = None"
      },
      {
        "name": "assertion_expected",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Any",
              "typedoc": "Any",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_expected: Any | None = None"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      },
      {
        "name": "frame_selector",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "frame_selector: str | None = None"
      }
    ],
    "doc": "<p>Get saved data from the local storage.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>key</code></td>\n<td>Named key of the item in the storage.</td>\n</tr>\n<tr>\n<td><code>assertion_operator</code></td>\n<td>Assertion operator to use. See <a href=\"#Assertions\" class=\"name\">Assertions</a> for more information.</td>\n</tr>\n<tr>\n<td><code>assertion_expected</code></td>\n<td>Expected value to compare with.</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>Custom error message to use.</td>\n</tr>\n<tr>\n<td><code>frame_selector</code></td>\n<td>If this selector points to an element inside an iframe, the LocalStorage of that frame is used. Example: <code>iframe[name=\"test\"] &gt;&gt;&gt; body</code></td>\n</tr>\n</table>\n<p>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. Defaults to None.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#LocalStorage%20Get%20Item\" class=\"name\">Local Storage Get Item</a>    Key    ==    Value    My error\n${value} =    <a href=\"#LocalStorage%20Get%20Item\" class=\"name\">Local Storage Get Item</a>    Key\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4300\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#LocalStorage%20Get%20Item"
  },
  {
    "name": "LocalStorage Remove Item",
    "library": "Browser",
    "args": [
      {
        "name": "key",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "key: str"
      },
      {
        "name": "frame_selector",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "frame_selector: str | None = None"
      }
    ],
    "doc": "<p>Remove saved data with key from the local storage.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>key</code></td>\n<td>The name of the item which shall be deleted.</td>\n</tr>\n<tr>\n<td><code>frame_selector</code></td>\n<td>If this selector points to an element inside an iframe, the LocalStorage of that frame is used. Example: <code>iframe[name=\"test\"] &gt;&gt;&gt; body</code></td>\n</tr>\n</table>\n<p>Example:</p>\n<pre>\n<a href=\"#LocalStorage%20Set%20Item\" class=\"name\">Local Storage Set Item</a>      Foo    bar\n<a href=\"#LocalStorage%20Remove%20Item\" class=\"name\">LocalStorage Remove Item</a>    Foo\n${item} =    <a href=\"#LocalStorage%20Get%20Item\" class=\"name\">Local Storage Get Item</a>    Foo\nShould Be Equal    ${item}    ${None}\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4301\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#LocalStorage%20Remove%20Item"
  },
  {
    "name": "LocalStorage Set Item",
    "library": "Browser",
    "args": [
      {
        "name": "key",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "key: str"
      },
      {
        "name": "value",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "value: str"
      },
      {
        "name": "frame_selector",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "frame_selector: str | None = None"
      }
    ],
    "doc": "<p>Save data to the local storage.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>key</code></td>\n<td>The name of the key under which it should be saved.</td>\n</tr>\n<tr>\n<td><code>value</code></td>\n<td>The value which shall be saved as a string.</td>\n</tr>\n<tr>\n<td><code>frame_selector</code></td>\n<td>If this selector points to an element inside an iframe, the LocalStorage of that frame is used. Example: <code>iframe[name=\"test\"] &gt;&gt;&gt; body</code></td>\n</tr>\n</table>\n<p>Example:</p>\n<pre>\n<a href=\"#LocalStorage%20Set%20Item\" class=\"name\">Local Storage Set Item</a>    Key    Value\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4302\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#LocalStorage%20Set%20Item"
  },
  {
    "name": "Mouse Button",
    "library": "Browser",
    "args": [
      {
        "name": "action",
        "type": {
          "name": "MouseButtonAction",
          "typedoc": "MouseButtonAction",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "action: MouseButtonAction"
      },
      {
        "name": "x",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "float",
              "typedoc": "float",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "x: float | None = None"
      },
      {
        "name": "y",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "float",
              "typedoc": "float",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "y: float | None = None"
      },
      {
        "name": "button",
        "type": {
          "name": "MouseButton",
          "typedoc": "MouseButton",
          "nested": [],
          "union": false
        },
        "defaultValue": "left",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "button: MouseButton = left"
      },
      {
        "name": "clickCount",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "1",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "clickCount: int = 1"
      },
      {
        "name": "delay",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "0:00:00",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "delay: int | timedelta = 0:00:00"
      }
    ],
    "doc": "<p>Clicks, presses or releases a mouse button.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>action</code></td>\n<td>Defines if it is a mouseclick (<code>click</code>), holding down a button (<code>down</code>) or releasing it (<code>up</code>).</td>\n</tr>\n<tr>\n<td><code>x</code>, <code>y</code></td>\n<td>Coordinates to move before action is executed.</td>\n</tr>\n<tr>\n<td><code>button</code></td>\n<td>One of <code>left</code>, <code>middle</code> or <code>up</code>. Defaults to <code>left</code>.</td>\n</tr>\n<tr>\n<td><code>clickCount</code></td>\n<td>Determine how often the button shall be clicked if action is equal to <code>click</code>. Defaults to 1.</td>\n</tr>\n<tr>\n<td><code>delay</code></td>\n<td>Delay in Robot Framework time format between the mousedown and mouseup event. Can only be set if the action is <code>click</code>.</td>\n</tr>\n</table>\n<p><b>Attention:</b> Argument type <span class=\"name\">int</span> for 'delay' in milliseconds has been changed to <a href=\"#type-timedelta\" class=\"name\">timedelta</a> in Browser 14.0.0. Use Robot Framework time format instead. For refactoring just add 'ms' after the delay number.</p>\n<p>Delay Example:</p>\n<pre>\n<a href=\"#Mouse%20Button\" class=\"name\">Mouse Button</a>    click    100 ms\n<a href=\"#Mouse%20Button\" class=\"name\">Mouse Button</a>    click    ${dyn_delay} ms\n</pre>\n<p>Moving the mouse between holding down and releasing it, is possible with <a href=\"#Mouse%20Move\" class=\"name\">Mouse Move</a>.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#Hover\" class=\"name\">Hover</a>                     \"Obstacle\"           # Move mouse over the element\n<a href=\"#Mouse%20Button\" class=\"name\">Mouse Button</a>              down                 # Press mouse button down\n<a href=\"#Mouse%20Move%20Relative%20To\" class=\"name\">Mouse Move Relative To</a>    \"Obstacle\"    500    # Drag mouse\n<a href=\"#Mouse%20Button\" class=\"name\">Mouse Button</a>              up                   # Release mouse button\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4303\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Mouse%20Button"
  },
  {
    "name": "Mouse Move",
    "library": "Browser",
    "args": [
      {
        "name": "x",
        "type": {
          "name": "float",
          "typedoc": "float",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "x: float"
      },
      {
        "name": "y",
        "type": {
          "name": "float",
          "typedoc": "float",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "y: float"
      },
      {
        "name": "steps",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "1",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "steps: int = 1"
      }
    ],
    "doc": "<p>Instead of selectors command mouse with coordinates. The Click commands will leave the virtual mouse on the specified coordinates.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>x</code> &amp; <code>y</code></td>\n<td>Are absolute coordinates starting at the top left of the page.</td>\n</tr>\n<tr>\n<td><code>steps</code></td>\n<td>Number of intermediate steps for the mouse event. Often it is necessary to send more than one intermediate event to get the desired result. Defaults to 1.</td>\n</tr>\n</table>\n<p>Example:</p>\n<pre>\n<a href=\"#Mouse%20Move\" class=\"name\">Mouse Move</a>    400    400\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4304\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Mouse%20Move"
  },
  {
    "name": "Mouse Move Relative To",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      },
      {
        "name": "x",
        "type": {
          "name": "float",
          "typedoc": "float",
          "nested": [],
          "union": false
        },
        "defaultValue": "0.0",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "x: float = 0.0"
      },
      {
        "name": "y",
        "type": {
          "name": "float",
          "typedoc": "float",
          "nested": [],
          "union": false
        },
        "defaultValue": "0.0",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "y: float = 0.0"
      },
      {
        "name": "steps",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "1",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "steps: int = 1"
      }
    ],
    "doc": "<p>Moves the mouse cursor relative to the selected element.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Identifies the element, which center is the start-point.</td>\n</tr>\n<tr>\n<td><code>x</code> &amp; <code>y</code></td>\n<td>Are relative coordinates to the center of the elements bounding box.</td>\n</tr>\n<tr>\n<td><code>steps</code></td>\n<td>Number of intermediate steps for the mouse event. Often it is necessary to send more than one intermediate event to get the desired result. Defaults to 1.</td>\n</tr>\n</table>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#Mouse%20Move%20Relative%20To\" class=\"name\">Mouse Move Relative To</a>    id=indicator    -100\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4305\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Mouse%20Move%20Relative%20To"
  },
  {
    "name": "Mouse Wheel",
    "library": "Browser",
    "args": [
      {
        "name": "deltaX",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "deltaX: int"
      },
      {
        "name": "deltaY",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "deltaY: int"
      }
    ],
    "doc": "<p>Simulates the user rotation of a mouse wheel.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>deltaX</code> &amp; <code>deltaY</code></td>\n<td>Pixels that are scrolled horizontally &amp; vertically.</td>\n</tr>\n</table>\n<p>Example:</p>\n<pre>\n# Before doing a mouse wheel interaction. A mouse needs to be positioned on the browser window.\n<a href=\"#Hover\" class=\"name\">Hover</a>    body\n<a href=\"#Mouse%20Wheel\" class=\"name\">Mouse Wheel</a>    0    250\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//5186\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Mouse%20Wheel"
  },
  {
    "name": "New Browser",
    "library": "Browser",
    "args": [
      {
        "name": "browser",
        "type": {
          "name": "SupportedBrowsers",
          "typedoc": "SupportedBrowsers",
          "nested": [],
          "union": false
        },
        "defaultValue": "chromium",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "browser: SupportedBrowsers = chromium"
      },
      {
        "name": "headless",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "headless: bool = True"
      },
      {
        "name": "",
        "type": null,
        "defaultValue": null,
        "kind": "NAMED_ONLY_MARKER",
        "required": false,
        "repr": "*"
      },
      {
        "name": "args",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "list",
              "typedoc": "list",
              "nested": [
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "args: list[str] | None = None"
      },
      {
        "name": "channel",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "channel: str | None = None"
      },
      {
        "name": "chromiumSandbox",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "chromiumSandbox: bool = False"
      },
      {
        "name": "devtools",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "devtools: bool = False"
      },
      {
        "name": "downloadsPath",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "downloadsPath: str | None = None"
      },
      {
        "name": "env",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "dict",
              "typedoc": "dictionary",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "env: dict | None = None"
      },
      {
        "name": "executablePath",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "executablePath: str | None = None"
      },
      {
        "name": "firefoxUserPrefs",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "dict",
              "typedoc": "dictionary",
              "nested": [
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                },
                {
                  "name": "Union",
                  "typedoc": null,
                  "nested": [
                    {
                      "name": "str",
                      "typedoc": "string",
                      "nested": [],
                      "union": false
                    },
                    {
                      "name": "int",
                      "typedoc": "integer",
                      "nested": [],
                      "union": false
                    },
                    {
                      "name": "float",
                      "typedoc": "float",
                      "nested": [],
                      "union": false
                    },
                    {
                      "name": "bool",
                      "typedoc": "boolean",
                      "nested": [],
                      "union": false
                    }
                  ],
                  "union": true
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "firefoxUserPrefs: dict[str, str | int | float | bool] | None = None"
      },
      {
        "name": "handleSIGHUP",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "handleSIGHUP: bool = True"
      },
      {
        "name": "handleSIGINT",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "handleSIGINT: bool = True"
      },
      {
        "name": "handleSIGTERM",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "handleSIGTERM: bool = True"
      },
      {
        "name": "ignoreDefaultArgs",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "list",
              "typedoc": "list",
              "nested": [
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "ignoreDefaultArgs: list[str] | bool | None = None"
      },
      {
        "name": "proxy",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Proxy",
              "typedoc": "Proxy",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "proxy: Proxy | None = None"
      },
      {
        "name": "reuse_existing",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "reuse_existing: bool = True"
      },
      {
        "name": "slowMo",
        "type": {
          "name": "timedelta",
          "typedoc": "timedelta",
          "nested": [],
          "union": false
        },
        "defaultValue": "0:00:00",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "slowMo: timedelta = 0:00:00"
      },
      {
        "name": "timeout",
        "type": {
          "name": "timedelta",
          "typedoc": "timedelta",
          "nested": [],
          "union": false
        },
        "defaultValue": "0:00:30",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "timeout: timedelta = 0:00:30"
      }
    ],
    "doc": "<p>Create a new playwright Browser with specified options.</p>\n<p>See <a href=\"#Browser%2C%20Context%20and%20Page\" class=\"name\">Browser, Context and Page</a> for more information about Browser and related concepts.</p>\n<p>Returns a stable identifier for the created browser.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>browser</code></td>\n<td>Opens the specified <a href=\"#type-SupportedBrowsers\">browser</a>. Defaults to chromium.</td>\n</tr>\n<tr>\n<td><code>headless</code></td>\n<td>Set to False if you want a GUI. Defaults to True.</td>\n</tr>\n<tr>\n<td><code>args</code></td>\n<td>Additional arguments to pass to the browser instance. The list of Chromium flags can be found <a href=\"http://peter.sh/experiments/chromium-command-line-switches/\">here</a>. Defaults to None.</td>\n</tr>\n<tr>\n<td><code>channel</code></td>\n<td>Allows to operate against the stock Google Chrome and Microsoft Edge browsers. For more details see: <a href=\"https://playwright.dev/docs/browsers#google-chrome--microsoft-edge\">Playwright documentation</a>.</td>\n</tr>\n<tr>\n<td><code>chromiumSandbox</code></td>\n<td>Enable Chromium sandboxing. Defaults to False.</td>\n</tr>\n<tr>\n<td><code>devtools</code></td>\n<td>Chromium-only Whether to auto-open a Developer Tools panel for each tab.</td>\n</tr>\n<tr>\n<td><code>downloadsPath</code></td>\n<td>If specified, accepted downloads are downloaded into this folder. Otherwise, temporary folder is created and is deleted when browser is closed. Regarding file deletion, see the docs of <a href=\"#Download\" class=\"name\">Download</a> and <a href=\"#Promise%20To%20Wait%20For%20Download\" class=\"name\">Promise To Wait For Download</a>.</td>\n</tr>\n<tr>\n<td><code>env</code></td>\n<td>Specifies environment variables that will be visible to the browser. Dictionary keys are variable names, values are the content. Defaults to None.</td>\n</tr>\n<tr>\n<td><code>executablePath</code></td>\n<td>Path to a browser executable to run instead of the bundled one. If executablePath is a relative path, then it is resolved relative to current working directory. Note that Playwright only works with the bundled Chromium, Firefox or WebKit, use at your own risk. Defaults to None.</td>\n</tr>\n<tr>\n<td><code>firefoxUserPrefs</code> |Firefox user preferences. Learn more about the Firefox user preferences at <a href=\"https://support.mozilla.org/en-US/kb/about-config-editor-firefox\">about:config</a>.</td>\n<td></td>\n</tr>\n<tr>\n<td><code>handleSIGHUP</code></td>\n<td>Close the browser process on SIGHUP. Defaults to True.</td>\n</tr>\n<tr>\n<td><code>handleSIGINT</code></td>\n<td>Close the browser process on Ctrl-C. Defaults to True.</td>\n</tr>\n<tr>\n<td><code>handleSIGTERM</code></td>\n<td>Close the browser process on SIGTERM. Defaults to True.</td>\n</tr>\n<tr>\n<td><code>ignoreDefaultArgs</code></td>\n<td>If True, Playwright does not pass its own configurations args and only uses the ones from args. If a list is given, then filters out the given default arguments. Dangerous option; use with care. Defaults to False.</td>\n</tr>\n<tr>\n<td><code>proxy</code></td>\n<td>Network <a href=\"#type-Proxy\">Proxy</a> settings. Structure: <code>{'server': &lt;str&gt;, 'bypass': &lt;Optional[str]&gt;, 'username': &lt;Optional[str]&gt;, 'password': &lt;Optional[str]&gt;}</code></td>\n</tr>\n<tr>\n<td><code>reuse_existing</code></td>\n<td>If set to True, an existing browser instance, that matches the same arguments, will be reused. If no same configured Browser exist, a new one is started. Defaults to True.</td>\n</tr>\n<tr>\n<td><code>slowMo</code></td>\n<td>Slows down Playwright operations by the specified amount of seconds or <a href=\"#type-timedelta\" class=\"name\">timedelta</a>. Useful so that you can see what is going on. Defaults to no delay.</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td>Maximum time in Robot Framework time format to wait for the browser instance to start. Defaults to 30 seconds. Pass 0 to disable timeout.</td>\n</tr>\n</table>\n<p><a href=\"https://forum.robotframework.org/t//4306\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#New%20Browser"
  },
  {
    "name": "New Context",
    "library": "Browser",
    "args": [
      {
        "name": "",
        "type": null,
        "defaultValue": null,
        "kind": "NAMED_ONLY_MARKER",
        "required": false,
        "repr": "*"
      },
      {
        "name": "acceptDownloads",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "acceptDownloads: bool = True"
      },
      {
        "name": "baseURL",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "baseURL: str | None = None"
      },
      {
        "name": "bypassCSP",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "bypassCSP: bool = False"
      },
      {
        "name": "clientCertificates",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "list",
              "typedoc": "list",
              "nested": [
                {
                  "name": "ClientCertificate",
                  "typedoc": "ClientCertificate",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "clientCertificates: list[ClientCertificate] | None = None"
      },
      {
        "name": "colorScheme",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "ColorScheme",
              "typedoc": "ColorScheme",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "colorScheme: ColorScheme | None = None"
      },
      {
        "name": "defaultBrowserType",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "SupportedBrowsers",
              "typedoc": "SupportedBrowsers",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "defaultBrowserType: SupportedBrowsers | None = None"
      },
      {
        "name": "deviceScaleFactor",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "float",
              "typedoc": "float",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "deviceScaleFactor: float | None = None"
      },
      {
        "name": "extraHTTPHeaders",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "dict",
              "typedoc": "dictionary",
              "nested": [
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                },
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "extraHTTPHeaders: dict[str, str] | None = None"
      },
      {
        "name": "forcedColors",
        "type": {
          "name": "ForcedColors",
          "typedoc": "ForcedColors",
          "nested": [],
          "union": false
        },
        "defaultValue": "none",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "forcedColors: ForcedColors = none"
      },
      {
        "name": "geolocation",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "GeoLocation",
              "typedoc": "GeoLocation",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "geolocation: GeoLocation | None = None"
      },
      {
        "name": "hasTouch",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "hasTouch: bool | None = None"
      },
      {
        "name": "httpCredentials",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "HttpCredentials",
              "typedoc": "HttpCredentials",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "httpCredentials: HttpCredentials | None = None"
      },
      {
        "name": "ignoreHTTPSErrors",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "ignoreHTTPSErrors: bool = False"
      },
      {
        "name": "isMobile",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "isMobile: bool | None = None"
      },
      {
        "name": "javaScriptEnabled",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "javaScriptEnabled: bool = True"
      },
      {
        "name": "locale",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "locale: str | None = None"
      },
      {
        "name": "offline",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "offline: bool = False"
      },
      {
        "name": "permissions",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "list",
              "typedoc": "list",
              "nested": [
                {
                  "name": "Permission",
                  "typedoc": "Permission",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "permissions: list[Permission] | None = None"
      },
      {
        "name": "proxy",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Proxy",
              "typedoc": "Proxy",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "proxy: Proxy | None = None"
      },
      {
        "name": "recordHar",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "RecordHar",
              "typedoc": "RecordHar",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "recordHar: RecordHar | None = None"
      },
      {
        "name": "recordVideo",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "RecordVideo",
              "typedoc": "RecordVideo",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "recordVideo: RecordVideo | None = None"
      },
      {
        "name": "reducedMotion",
        "type": {
          "name": "ReduceMotion",
          "typedoc": "ReduceMotion",
          "nested": [],
          "union": false
        },
        "defaultValue": "no_preference",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "reducedMotion: ReduceMotion = no_preference"
      },
      {
        "name": "screen",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "dict",
              "typedoc": "dictionary",
              "nested": [
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                },
                {
                  "name": "int",
                  "typedoc": "integer",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "screen: dict[str, int] | None = None"
      },
      {
        "name": "serviceWorkers",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "ServiceWorkersPermissions",
              "typedoc": "ServiceWorkersPermissions",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "allow",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "serviceWorkers: ServiceWorkersPermissions | None = allow"
      },
      {
        "name": "storageState",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "storageState: str | None = None"
      },
      {
        "name": "timezoneId",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "timezoneId: str | None = None"
      },
      {
        "name": "tracing",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "Path",
              "typedoc": "Path",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "tracing: bool | Path | None = None"
      },
      {
        "name": "userAgent",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "userAgent: str | None = None"
      },
      {
        "name": "viewport",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "ViewportDimensions",
              "typedoc": "ViewportDimensions",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "{'width': 1280, 'height': 720}",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "viewport: ViewportDimensions | None = {'width': 1280, 'height': 720}"
      }
    ],
    "doc": "<p>Create a new BrowserContext with specified options.</p>\n<p>See <a href=\"#Browser%2C%20Context%20and%20Page\" class=\"name\">Browser, Context and Page</a> for more information about BrowserContext.</p>\n<p>Returns a stable identifier for the created context that can be used in <a href=\"#Switch%20Context\" class=\"name\">Switch Context</a>.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>acceptDownloads</code></td>\n<td>Whether to automatically download all the attachments. Defaults to True where all the downloads are accepted.</td>\n</tr>\n<tr>\n<td><code>baseURL</code></td>\n<td>When using <a href=\"#Go%20To\" class=\"name\">Go To</a>, <a href=\"#Wait%20For%20Request\" class=\"name\">Wait For Request</a>, <a href=\"#Wait%20For%20Response\" class=\"name\">Wait For Response</a> or <a href=\"#Wait%20For%20Navigation\" class=\"name\">Wait For Navigation</a> it takes the base URL in consideration by using the URL() constructor for building the corresponding URL. Unset by default. Examples: <code>baseURL=http://localhost:3000</code> and navigating to <code>/bar.html</code> results in <code>http://localhost:3000/bar.html</code>. <code>baseURL=http://localhost:3000/foo/</code> and navigating to <code>./bar.html</code> results in <code>http://localhost:3000/foo/bar.html</code>. <code>baseURL=http://localhost:3000/foo</code> (without trailing slash) and navigating to <code>./bar.html</code> results in <code>http://localhost:3000/bar.html</code>.</td>\n</tr>\n<tr>\n<td><code>bypassCSP</code></td>\n<td>Toggles bypassing page's Content-Security-Policy. Defaults to False.</td>\n</tr>\n<tr>\n<td><code>clientCertificates</code></td>\n<td>Specifies a client certificate for mTLS authentication, for example <code>clientCertificates=[{'origin': '<a href=\"https://playwright.dev\">https://playwright.dev</a>', 'pfxPath': 'certificate.p12', 'passphrase': 'password'}]</code>. <b>NOTE:</b> The origin needs to be exact whithout any path.</td>\n</tr>\n<tr>\n<td><code>colorScheme</code></td>\n<td>Emulates <span class=\"name\">'prefers-colors-scheme'</span> media feature, supported values are <span class=\"name\">'light'</span>, <span class=\"name\">'dark'</span>, <span class=\"name\">'no-preference'</span>.</td>\n</tr>\n<tr>\n<td><code>defaultBrowserType</code></td>\n<td>If no browser is open and <a href=\"#New%20Context\" class=\"name\">New Context</a> opens a new browser with defaults, it now uses this setting. Very useful together with <a href=\"#Get%20Device\" class=\"name\">Get Device</a> keyword.</td>\n</tr>\n<tr>\n<td><code>deviceScaleFactor</code></td>\n<td>Specify device scale factor (can be thought of as dpr). Defaults to <code>1</code>.</td>\n</tr>\n<tr>\n<td><code>extraHTTPHeaders</code></td>\n<td>A dictionary containing additional HTTP headers to be sent with every request. All header values must be strings.</td>\n</tr>\n<tr>\n<td><code>forcedColors</code></td>\n<td>Emulates <span class=\"name\">forced-colors</span> media feature, supported values are <span class=\"name\">active</span> and <a href=\"#type-None\" class=\"name\">none</a>.</td>\n</tr>\n<tr>\n<td><code>geolocation</code></td>\n<td>A dictionary containing <code>latitude</code> and <code>longitude</code> or <code>accuracy</code> to emulate. If <code>latitude</code> or <code>longitude</code> is not specified, the device geolocation won't be overriden.</td>\n</tr>\n<tr>\n<td><code>hasTouch</code></td>\n<td>Specifies if viewport supports touch events. Defaults to False.</td>\n</tr>\n<tr>\n<td><code>httpCredentials</code></td>\n<td>Credentials for <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication\">HTTP authentication</a>.</td>\n</tr>\n<tr>\n<td><code>ignoreHTTPSErrors</code></td>\n<td>Whether to ignore HTTPS errors during navigation. Defaults to False.</td>\n</tr>\n<tr>\n<td><code>isMobile</code></td>\n<td>Whether the meta viewport tag is taken into account and touch events are enabled. Defaults to False.</td>\n</tr>\n<tr>\n<td><code>javaScriptEnabled</code></td>\n<td>Whether or not to enable JavaScript in the context. Defaults to True.</td>\n</tr>\n<tr>\n<td><code>locale</code></td>\n<td>Specify user locale, for example <code>en-GB</code>, <code>de-DE</code>, etc.</td>\n</tr>\n<tr>\n<td><code>offline</code></td>\n<td>Toggles browser's offline mode. Defaults to False.</td>\n</tr>\n<tr>\n<td><code>permissions</code></td>\n<td>A list containing permissions to grant to all pages in this context. All permissions that are not listed here will be automatically denied.</td>\n</tr>\n<tr>\n<td><code>proxy</code></td>\n<td>Network proxy settings to use with this context. Defaults to None. <b>NOTE:</b> For Chromium on Windows the browser needs to be launched with the global proxy for this option to work. If all contexts override the proxy, global proxy will be never used and can be any string, for example <code>proxy={ server: '<a href=\"http://per-context\">http://per-context</a>' }</code>.</td>\n</tr>\n<tr>\n<td><code>recordHar</code></td>\n<td>Enables <a href=\"http://www.softwareishard.com/blog/har-12-spec/\">HAR</a> recording for all pages into to a file. Must be path to file, example ${OUTPUT_DIR}/har.file. If not specified, the HAR is not recorded. Make sure to await context to close for the to be saved.</td>\n</tr>\n<tr>\n<td><code>recordVideo</code></td>\n<td>Enables video recording for all pages into a folder. If not specified videos are not recorded. Make sure to close context for videos to be saved. Video is not support in remote browsers.</td>\n</tr>\n<tr>\n<td><code>reduceMotion</code></td>\n<td>Emulates <span class=\"name\">prefers-reduced-motion</span> media feature, supported values are <span class=\"name\">reduce</span>, <span class=\"name\">no-preference</span>.</td>\n</tr>\n<tr>\n<td><code>screen</code></td>\n<td>Emulates consistent window screen size available inside web page via window.screen. Is only used when the viewport is set. Example {'width': 414, 'height': 896}</td>\n</tr>\n<tr>\n<td><code>serviceWorkers</code></td>\n<td>Whether to allow sites to register Service workers. Defaults to 'allow'.</td>\n</tr>\n<tr>\n<td><code>storageState</code></td>\n<td>Restores the storage stated created by the <a href=\"#Save%20Storage%20State\" class=\"name\">Save Storage State</a> keyword. Must be full path to the file.</td>\n</tr>\n<tr>\n<td><code>timezoneId</code></td>\n<td>Changes the timezone of the context. See <a href=\"https://source.chromium.org/chromium/chromium/src/+/master:third_party/icu/source/data/misc/metaZones.txt\">ICU`s metaZones.txt</a> for a list of supported timezone IDs.</td>\n</tr>\n<tr>\n<td><code>tracing</code></td>\n<td>Boolean <code>True</code> (recommendation) or file path or directory where the <a href=\"https://playwright.dev/docs/api/class-tracing/\">tracing</a> file is saved. The string <span class=\"name\">{contextid}</span> will be replaces with the context id. Path to *.zip files can be absolute or relative to ${OUTPUT_DIR}. Path to folders can be absolute or relative to ${OUTPUT_DIR}/browser/traces. If boolean <code>True</code> or a directory is given, the trace file will automatically be named <code>trace_{contextid}.tip</code>. Temporary trace files will be saved to ${OUTPUT_DIR}/Browser/traces/temp. Tracing is automatically closed when context is closed. Temporary trace files will be automatically deleted at start of each test execution. Trace file can be opened after the test execution by running command from shell: <code>rfbrowser show-trace /path/to/trace.zip</code>. Tracing can also be enables by setting a Robot Framework variable or environment variable <code>ROBOT_FRAMEWORK_BROWSER_TRACING</code> to <code>True</code>.</td>\n</tr>\n<tr>\n<td><code>userAgent</code></td>\n<td>Specific user agent to use in this context.</td>\n</tr>\n<tr>\n<td><code>viewport</code></td>\n<td>A dictionary containing <code>width</code> and <code>height</code>. Emulates consistent viewport for each page. Defaults to 1280x720. null disables the default viewport. If <code>width</code> and <code>height</code> is  <code>0</code>, the viewport will scale with the window.</td>\n</tr>\n</table>\n<p>Example:</p>\n<pre>\nTest an iPhone\n    ${device}=    <a href=\"#Get%20Device\" class=\"name\">Get Device</a>    iPhone X\n    <a href=\"#New%20Context\" class=\"name\">New Context</a>    &amp;{device}        # unpacking here with &amp;\n    <a href=\"#New%20Page\" class=\"name\">New Page</a>    <a href=\"http://example.com\">http://example.com</a>\n</pre>\n<p>A BrowserContext is the Playwright object that controls a single browser profile. Within a context caches and cookies are shared. See <a href=\"https://playwright.dev/docs/api/class-browser#browsernewcontextoptions\">Playwright browser.newContext</a> for a list of supported options.</p>\n<p>If there's no open Browser this keyword will open one. Does not create pages.</p>\n<p><a href=\"https://forum.robotframework.org/t//4307\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#New%20Context"
  },
  {
    "name": "New Page",
    "library": "Browser",
    "args": [
      {
        "name": "url",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "url: str | None = None"
      },
      {
        "name": "wait_until",
        "type": {
          "name": "PageLoadStates",
          "typedoc": "PageLoadStates",
          "nested": [],
          "union": false
        },
        "defaultValue": "load",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "wait_until: PageLoadStates = load"
      }
    ],
    "doc": "<p>Open a new Page.</p>\n<p>A Page is the Playwright equivalent to a tab. See <a href=\"#Browser%2C%20Context%20and%20Page\" class=\"name\">Browser, Context and Page</a> for more information about Page concept.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>url</code></td>\n<td>Optional URL to navigate the page to. The url should include protocol, e.g. <span class=\"name\">https://</span></td>\n</tr>\n<tr>\n<td><code>wait_until</code></td>\n<td>When to consider operation succeeded, defaults to load. Events can be either: <code>domcontentloaded</code> - consider operation to be finished when the DOMContentLoaded event is fired. <code>load</code> - consider operation to be finished when the load event is fired. <code>networkidle</code> - consider operation to be finished when there are no network connections for at least 500 ms. <code>commit</code> - consider operation to be finished when network response is received and the document started loading.</td>\n</tr>\n</table>\n<p>Returns <a href=\"#type-NewPageDetails\" class=\"name\">NewPageDetails</a> as dictionary for created page. <a href=\"#type-NewPageDetails\" class=\"name\">NewPageDetails</a> (dict) contains the keys <code>page_id</code> and <code>video_path</code>. <code>page_id</code> is a stable identifier for the created page. <code>video_path</code> is path to the created video or empty if video is not created.</p>\n<p>When a <a href=\"#New%20Page\" class=\"name\">New Page</a> is called without an open browser, <a href=\"#New%20Browser\" class=\"name\">New Browser</a> and <a href=\"#New%20Context\" class=\"name\">New Context</a> are executed with default values first.</p>\n<p><a href=\"https://forum.robotframework.org/t//4308\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#New%20Page"
  },
  {
    "name": "New Persistent Context",
    "library": "Browser",
    "args": [
      {
        "name": "userDataDir",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "userDataDir: str = "
      },
      {
        "name": "browser",
        "type": {
          "name": "SupportedBrowsers",
          "typedoc": "SupportedBrowsers",
          "nested": [],
          "union": false
        },
        "defaultValue": "chromium",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "browser: SupportedBrowsers = chromium"
      },
      {
        "name": "headless",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "headless: bool = True"
      },
      {
        "name": "",
        "type": null,
        "defaultValue": null,
        "kind": "NAMED_ONLY_MARKER",
        "required": false,
        "repr": "*"
      },
      {
        "name": "acceptDownloads",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "acceptDownloads: bool = True"
      },
      {
        "name": "args",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "list",
              "typedoc": "list",
              "nested": [
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "args: list[str] | None = None"
      },
      {
        "name": "baseURL",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "baseURL: str | None = None"
      },
      {
        "name": "bypassCSP",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "bypassCSP: bool = False"
      },
      {
        "name": "channel",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "channel: str | None = None"
      },
      {
        "name": "chromiumSandbox",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "chromiumSandbox: bool = False"
      },
      {
        "name": "colorScheme",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "ColorScheme",
              "typedoc": "ColorScheme",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "colorScheme: ColorScheme | None = None"
      },
      {
        "name": "defaultBrowserType",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "SupportedBrowsers",
              "typedoc": "SupportedBrowsers",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "defaultBrowserType: SupportedBrowsers | None = None"
      },
      {
        "name": "deviceScaleFactor",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "float",
              "typedoc": "float",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "deviceScaleFactor: float | None = None"
      },
      {
        "name": "devtools",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "devtools: bool = False"
      },
      {
        "name": "downloadsPath",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "downloadsPath: str | None = None"
      },
      {
        "name": "env",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "dict",
              "typedoc": "dictionary",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "env: dict | None = None"
      },
      {
        "name": "executablePath",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "executablePath: str | None = None"
      },
      {
        "name": "extraHTTPHeaders",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "dict",
              "typedoc": "dictionary",
              "nested": [
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                },
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "extraHTTPHeaders: dict[str, str] | None = None"
      },
      {
        "name": "forcedColors",
        "type": {
          "name": "ForcedColors",
          "typedoc": "ForcedColors",
          "nested": [],
          "union": false
        },
        "defaultValue": "none",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "forcedColors: ForcedColors = none"
      },
      {
        "name": "geolocation",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "GeoLocation",
              "typedoc": "GeoLocation",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "geolocation: GeoLocation | None = None"
      },
      {
        "name": "handleSIGHUP",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "handleSIGHUP: bool = True"
      },
      {
        "name": "handleSIGINT",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "handleSIGINT: bool = True"
      },
      {
        "name": "handleSIGTERM",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "handleSIGTERM: bool = True"
      },
      {
        "name": "hasTouch",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "hasTouch: bool | None = None"
      },
      {
        "name": "httpCredentials",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "HttpCredentials",
              "typedoc": "HttpCredentials",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "httpCredentials: HttpCredentials | None = None"
      },
      {
        "name": "ignoreDefaultArgs",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "list",
              "typedoc": "list",
              "nested": [
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "ignoreDefaultArgs: list[str] | bool | None = None"
      },
      {
        "name": "ignoreHTTPSErrors",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "ignoreHTTPSErrors: bool = False"
      },
      {
        "name": "isMobile",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "isMobile: bool | None = None"
      },
      {
        "name": "javaScriptEnabled",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "javaScriptEnabled: bool = True"
      },
      {
        "name": "locale",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "locale: str | None = None"
      },
      {
        "name": "offline",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "offline: bool = False"
      },
      {
        "name": "permissions",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "list",
              "typedoc": "list",
              "nested": [
                {
                  "name": "Permission",
                  "typedoc": "Permission",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "permissions: list[Permission] | None = None"
      },
      {
        "name": "proxy",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Proxy",
              "typedoc": "Proxy",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "proxy: Proxy | None = None"
      },
      {
        "name": "recordHar",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "RecordHar",
              "typedoc": "RecordHar",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "recordHar: RecordHar | None = None"
      },
      {
        "name": "recordVideo",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "RecordVideo",
              "typedoc": "RecordVideo",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "recordVideo: RecordVideo | None = None"
      },
      {
        "name": "reducedMotion",
        "type": {
          "name": "ReduceMotion",
          "typedoc": "ReduceMotion",
          "nested": [],
          "union": false
        },
        "defaultValue": "no_preference",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "reducedMotion: ReduceMotion = no_preference"
      },
      {
        "name": "screen",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "dict",
              "typedoc": "dictionary",
              "nested": [
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                },
                {
                  "name": "int",
                  "typedoc": "integer",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "screen: dict[str, int] | None = None"
      },
      {
        "name": "serviceWorkers",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "ServiceWorkersPermissions",
              "typedoc": "ServiceWorkersPermissions",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "allow",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "serviceWorkers: ServiceWorkersPermissions | None = allow"
      },
      {
        "name": "slowMo",
        "type": {
          "name": "timedelta",
          "typedoc": "timedelta",
          "nested": [],
          "union": false
        },
        "defaultValue": "0:00:00",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "slowMo: timedelta = 0:00:00"
      },
      {
        "name": "timeout",
        "type": {
          "name": "timedelta",
          "typedoc": "timedelta",
          "nested": [],
          "union": false
        },
        "defaultValue": "0:00:30",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "timeout: timedelta = 0:00:30"
      },
      {
        "name": "timezoneId",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "timezoneId: str | None = None"
      },
      {
        "name": "tracing",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "Path",
              "typedoc": "Path",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "tracing: bool | Path | None = None"
      },
      {
        "name": "url",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "url: str | None = None"
      },
      {
        "name": "userAgent",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "userAgent: str | None = None"
      },
      {
        "name": "viewport",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "ViewportDimensions",
              "typedoc": "ViewportDimensions",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "{'width': 1280, 'height': 720}",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "viewport: ViewportDimensions | None = {'width': 1280, 'height': 720}"
      }
    ],
    "doc": "<p>Open a new <a href=\"https://playwright.dev/docs/api/class-browsertype#browser-type-launch-persistent-context\">persistent context</a>.</p>\n<p><a href=\"#New%20Persistent%20Context\" class=\"name\">New Persistent Context</a> does basically executes <a href=\"#New%20Browser\" class=\"name\">New Browser</a>, <a href=\"#New%20Context\" class=\"name\">New Context</a> and <a href=\"#New%20Page\" class=\"name\">New Page</a> in one step with setting a profile at the same time.</p>\n<p>This keyword returns a tuple of browser id, context id and page details. (New in Browser 15.0.0)</p>\n<table border=\"1\">\n<tr>\n<th>Argument</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>userDataDir</code></td>\n<td>Path to a User Data Directory, which stores browser session data like cookies and local storage. More details for Chromium and Firefox. Note that Chromium's user data directory is the parent directory of the \"Profile Path\" seen at <a href=\"chrome://version\">chrome://version</a>. Pass an empty string to use a temporary directory instead.</td>\n</tr>\n<tr>\n<td><code>browser</code></td>\n<td>Browser type to use. Default is Chromium.</td>\n</tr>\n<tr>\n<td><code>headless</code></td>\n<td>Whether to run browser in headless mode. Defaults to <code>True</code>.</td>\n</tr>\n<tr>\n<td>other arguments</td>\n<td>Please see <a href=\"#New%20Browser\" class=\"name\">New Browser</a>, <a href=\"#New%20Context\" class=\"name\">New Context</a> and <a href=\"#New%20Page\" class=\"name\">New Page</a> for more information about the other arguments.</td>\n</tr>\n</table>\n<p>If you want to use extensions you need to download the extension as a .zip, enable loading the extension, and load the extensions using chromium arguments like below. Extensions only work with chromium and with a headful browser.</p>\n<pre>\n${launch_args}=  Set Variable  [\"--disable-extensions-except=./ublock/uBlock0.chromium\", \"--load-extension=./ublock/uBlock0.chromium\"]\n${browserId}  ${contextId}  ${pageDetails}=  <a href=\"#New%20Persistent%20Context\" class=\"name\">New Persistent Context</a>  browser=chromium  headless=False  url=https://robocon,io  args=${launch_args}\n</pre>\n<p>Check <a href=\"#New%20Browser\" class=\"name\">New Browser</a>, <a href=\"#New%20Context\" class=\"name\">New Context</a> and <a href=\"#New%20Page\" class=\"name\">New Page</a> for the specific argument docs.</p>\n<p><a href=\"https://forum.robotframework.org/t//4309\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#New%20Persistent%20Context"
  },
  {
    "name": "Open Browser",
    "library": "Browser",
    "args": [
      {
        "name": "url",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "url: str | None = None"
      },
      {
        "name": "browser",
        "type": {
          "name": "SupportedBrowsers",
          "typedoc": "SupportedBrowsers",
          "nested": [],
          "union": false
        },
        "defaultValue": "chromium",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "browser: SupportedBrowsers = chromium"
      },
      {
        "name": "headless",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "headless: bool = False"
      },
      {
        "name": "pause_on_failure",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "pause_on_failure: bool = True"
      },
      {
        "name": "bypassCSP",
        "type": null,
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "bypassCSP=True"
      }
    ],
    "doc": "<p>Opens a new browser instance. Use this keyword for quick experiments or debugging sessions.</p>\n<p>Use <a href=\"#New%20Page\" class=\"name\">New Page</a> directly instead of <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a> for production and automated execution. See <a href=\"#Browser%2C%20Context%20and%20Page\" class=\"name\">Browser, Context and Page</a> for more information about Browser and related concepts.</p>\n<p>Creates a new browser, context and page with specified settings.</p>\n<table border=\"1\">\n<tr>\n<th>Argument</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>url</code></td>\n<td>Navigates to URL if provided. Defaults to None.</td>\n</tr>\n<tr>\n<td><code>browser</code></td>\n<td>Specifies which browser to use. The supported browsers are listed in the table below.</td>\n</tr>\n<tr>\n<td><code>headless</code></td>\n<td>If set to False, a GUI is provided otherwise it is hidden. Defaults to False.</td>\n</tr>\n<tr>\n<td><code>pause_on_failure</code></td>\n<td>Stop execution when failure detected and leave browser open. Defaults to True.</td>\n</tr>\n<tr>\n<td><code>bypassCSP</code></td>\n<td>Defaults to bypassing CSP and enabling custom script attach to the page.</td>\n</tr>\n</table>\n<p>Browsers:</p>\n<table border=\"1\">\n<tr>\n<th>Value</th>\n<th>Name(s)</th>\n</tr>\n<tr>\n<td><code>firefox</code></td>\n<td><a href=\"https://www.mozilla.org/en-US/firefox/new\">Firefox</a></td>\n</tr>\n<tr>\n<td><code>chromium</code></td>\n<td><a href=\"https://www.chromium.org/Home\">Chromium</a></td>\n</tr>\n<tr>\n<td><code>webkit</code></td>\n<td><a href=\"https://webkit.org/\">webkit</a></td>\n</tr>\n</table>\n<p><a href=\"https://forum.robotframework.org/t//4310\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Open%20Browser"
  },
  {
    "name": "Pause At",
    "library": "Browser",
    "args": [
      {
        "name": "time",
        "type": {
          "name": "datetime",
          "typedoc": "datetime",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "time: datetime"
      }
    ],
    "doc": "<p>Advance the clock by jumping forward in time and pause the time.</p>\n<table border=\"1\">\n<tr>\n<td>Argument</td>\n<td>Description</td>\n</tr>\n<tr>\n<td>time</td>\n<td>The time to pause the clock at.</td>\n</tr>\n</table>\n<p>Only fires due timers at most once. This is equivalent to user closing the laptop lid for a while and reopening it at the specified time and pausing. Pause can not move clock backwards.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Set%20Time\" class=\"name\">Set Time</a></td>\n<td>2024-10-31 17:34:00</td>\n<td># Set the clock to a specific time</td>\n</tr>\n<tr>\n<td>Do Something</td>\n<td># Implement this in your keyword</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Pause%20At\" class=\"name\">Pause At</a></td>\n<td>2024-10-31 18:34:00</td>\n<td># Pause the clock at a specific time</td>\n</tr>\n<tr>\n<td>Check Something</td>\n<td># Also this is implemented in your keyword</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Resume%20Clock\" class=\"name\">Resume Clock</a></td>\n<td># Resume the clock</td>\n<td></td>\n</tr>\n<tr>\n<td>Do Something Else</td>\n<td># Do something after clock runs normally</td>\n<td></td>\n</tr>\n</table>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Pause%20At"
  },
  {
    "name": "Press Keys",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      },
      {
        "name": "keys",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*keys: str"
      }
    ],
    "doc": "<p>Types the given key combination into element found by <code>selector</code>.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector of the text field. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n<tr>\n<td><code>*keys</code></td>\n<td>Keys to be press after each other. Using + to chain combine modifiers with a single keypress <code>Control+Shift+T</code> is supported.</td>\n</tr>\n</table>\n<p>Supports values like \"a, b\" which will be automatically typed.</p>\n<p>Also supports identifiers for keys like <code>ArrowLeft</code> or <code>Backspace</code>.</p>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p>See playwright's documentation for a more comprehensive list of supported input keys. <a href=\"https://playwright.dev/docs/api/class-page#page-press\">Playwright docs for press.</a></p>\n<p>Example:</p>\n<pre>\n# Keyword         Selector                    *Keys\n<a href=\"#Press%20Keys\" class=\"name\">Press Keys</a>      //*[@id=\"username_field\"]    h    e   l   o   ArrowLeft   l\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4311\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Press%20Keys"
  },
  {
    "name": "Promise To",
    "library": "Browser",
    "args": [
      {
        "name": "kw",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "kw: str"
      },
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      }
    ],
    "doc": "<p>Wrap a Browser library keyword and make it a promise.</p>\n<p>Promised keyword is executed and started on background. Test execution continues without waiting for <code>kw</code> to finish.</p>\n<p>Returns reference to the promised keyword.</p>\n<p><code>kw</code> Keyword that will work async on background.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>kw</code></td>\n<td>Keyword that will work async on background.</td>\n</tr>\n<tr>\n<td><code>*args</code></td>\n<td>Keyword arguments as normally used.</td>\n</tr>\n</table>\n<p>Example:</p>\n<pre>\n${promise}=     <a href=\"#Promise%20To\" class=\"name\">Promise To</a>            Wait For Response     matcher=     timeout=3\n<a href=\"#Click\" class=\"name\">Click</a>           \\#delayed_request\n${body}=        <a href=\"#Wait%20For\" class=\"name\">Wait For</a>              ${promise}\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4312\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Promise%20To"
  },
  {
    "name": "Promise To Upload File",
    "library": "Browser",
    "args": [
      {
        "name": "path",
        "type": {
          "name": "PathLike",
          "typedoc": "Path",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path: PathLike"
      }
    ],
    "doc": "<p>Returns a promise that resolves when file from <code>path</code> has been uploaded.</p>\n<p>Fails if the upload has not happened during timeout.</p>\n<p>Upload file from <code>path</code> into next file chooser dialog on page.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>path</code></td>\n<td>Path to file to be uploaded.</td>\n</tr>\n</table>\n<p>Example use:</p>\n<pre>\n${promise}=    <a href=\"#Promise%20To%20Upload%20File\" class=\"name\">Promise To Upload File</a>    ${CURDIR}/test_upload_file.txt\n<a href=\"#Click\" class=\"name\">Click</a>          id=open_file_chooser_button\n${upload_result}=    <a href=\"#Wait%20For\" class=\"name\">Wait For</a>    ${promise}\n</pre>\n<p>Alternatively, you can use <a href=\"#Upload%20File%20By%20Selector\" class=\"name\">Upload File By Selector</a> keyword.</p>\n<p><a href=\"https://forum.robotframework.org/t//4313\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Promise%20To%20Upload%20File"
  },
  {
    "name": "Promise To Wait For Download",
    "library": "Browser",
    "args": [
      {
        "name": "saveAs",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "saveAs: str = "
      },
      {
        "name": "wait_for_finished",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "wait_for_finished: bool = True"
      },
      {
        "name": "download_timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "download_timeout: timedelta | None = None"
      }
    ],
    "doc": "<p>Returns a promise that waits for next download event on page.</p>\n<p>To enable downloads context's <code>acceptDownloads</code> needs to be true.</p>\n<p>With default filepath downloaded files are deleted when Context the download happened in is closed.</p>\n<p>If browser is connected remotely with <a href=\"#Connect%20To%20Browser\" class=\"name\">Connect To Browser</a> then <code>saveAs</code> must be set to store it locally where the browser runs!</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>saveAs</code></td>\n<td>Defines path where the file is saved persistently. File will also temporarily be saved in playwright context's default download location. If empty, generated unique path (GUID) is used and file is deleted when the context is closed.</td>\n</tr>\n<tr>\n<td><code>wait_for_finished</code></td>\n<td>If true, promise will wait for download to finish. If false, promise will resolve immediately after download has started.</td>\n</tr>\n<tr>\n<td><code>download_timeout</code></td>\n<td>Maximum time to wait for download to finish, if <code>wait_for_finished</code> is set to <code>True</code>. If download is not finished during this time, keyword will be fail.</td>\n</tr>\n</table>\n<p>Keyword returns dictionary of type <a href=\"#type-DownloadInfo\" class=\"name\">DownloadInfo</a> which contains downloaded file path and suggested filename as well as state and downloadID. Example:</p>\n<pre>\n{\n  \"saveAs\": \"/tmp/robotframework-browser/downloads/2f1b3b7c-1b1b-4b1b-9b1b-1b1b1b1b1b1b\",\n  \"suggestedFilename\": \"downloaded_file.txt\"\n}\n</pre>\n<p>The keyword <a href=\"#New%20Browser\" class=\"name\">New Browser</a> has a <code>downloadsPath</code> setting which can be used to set the default download directory. If <span class=\"name\">saveAs</span> is set to a relative path, the file will be saved relative to the browser's <code>downloadsPath</code> setting or if that is not set, relative to the Playwright's working directory. If <code>saveAs</code> is set to an absolute path, the file will be saved to that absolute path independent of <code>downloadsPath</code>.</p>\n<p>If the URL for the file to download shall be used, <a href=\"#Download\" class=\"name\">Download</a> keyword may be a simpler alternative way to download the file.</p>\n<p>Waited promise returns a dictionary which contains saveAs and suggestedFilename as keys. The saveAs contains where the file is downloaded and suggestedFilename contains the name suggested name for the download. The suggestedFilename is typically computed by the browser from the Content-Disposition response header or the download attribute. See the spec on <a href=\"https://html.spec.whatwg.org/#downloading-resources\">whatwg</a>. Different browsers can use different logic for computing it.</p>\n<p>Example usage:</p>\n<pre>\n<a href=\"#New%20Context\" class=\"name\">New Context</a>            acceptDownloads=True\n<a href=\"#New%20Page\" class=\"name\">New Page</a>               ${LOGIN_URL}\n${dl_promise}          <a href=\"#Promise%20To%20Wait%20For%20Download\" class=\"name\">Promise To Wait For Download</a>    /path/to/download/file.name\n<a href=\"#Click\" class=\"name\">Click</a>                  id=file_download\n${file_obj}=           <a href=\"#Wait%20For\" class=\"name\">Wait For</a>    ${dl_promise}\nFile Should Exist      ${file_obj}[saveAs]\nShould Be True         ${file_obj.suggestedFilename}\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4314\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Promise%20To%20Wait%20For%20Download"
  },
  {
    "name": "Record Selector",
    "library": "Browser",
    "args": [
      {
        "name": "label",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "label: str | None = None"
      }
    ],
    "doc": "<p>Record the selector that is under mouse.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>label</code></td>\n<td>text to show when on the box in the page while recording.</td>\n</tr>\n</table>\n<p>Focus on the page and move mouse over the element you want to select.</p>\n<p>Example:</p>\n<pre>\n${selector} =    <a href=\"#Record%20Selector\" class=\"name\">Record Selector</a>   Button\n<a href=\"#Click\" class=\"name\">Click</a>  ${selector}\n${selector2} =    <a href=\"#Record%20Selector\" class=\"name\">Record Selector</a>  Page header\n<a href=\"#Get%20Text\" class=\"name\">Get Text</a>  ${selector2}  ==  Expected text\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4315\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Record%20Selector"
  },
  {
    "name": "Register Keyword To Run On Failure",
    "library": "Browser",
    "args": [
      {
        "name": "keyword",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "keyword: str | None"
      },
      {
        "name": "args",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args: str"
      },
      {
        "name": "scope",
        "type": {
          "name": "Scope",
          "typedoc": "Scope",
          "nested": [],
          "union": false
        },
        "defaultValue": "Global",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "scope: Scope = Global"
      }
    ],
    "doc": "<p>Sets the keyword to execute, when a Browser keyword fails.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>keyword</code></td>\n<td>The name of a keyword that will be executed if a Browser keyword fails. It is possible to use any available keyword, including user keywords or keywords from other libraries.</td>\n</tr>\n<tr>\n<td><code>*args</code></td>\n<td>The arguments to the keyword if any.</td>\n</tr>\n<tr>\n<td><code>scope</code></td>\n<td>Scope defines the live time of this setting. Available values are <code>Global</code>, <code>Suite</code> or <code>Test</code> / <code>Task</code>. See <span class=\"name\">Scope Settings</span> for more details.</td>\n</tr>\n</table>\n<p>The initial keyword to use is set when <a href=\"#Importing\" class=\"name\">importing</a> the library, and the keyword that is used by default is <a href=\"#Take%20Screenshot\" class=\"name\">Take Screenshot</a>. Taking a screenshot when something failed is a very useful feature, but notice that it can slow down the execution.</p>\n<p>It is possible to use string <code>NONE</code> or any other robot falsy name, case-insensitively, as well as Python <code>None</code> to disable this feature altogether.</p>\n<p>This keyword returns an object which contains the the previously registered failure keyword. The return value can be always used to restore the original value later. The returned object contains keyword name and the possible arguments used to for the keyword.</p>\n<p>If <a href=\"#Take%20Screenshot\" class=\"name\">Take Screenshot</a> keyword, without arguments, is register as run on failure keyword, then filename argument default value is not used as screenshot file name. Instead, ${TEST NAME}_FAILURE_SCREENSHOT_{index} is used as file name. If there is need to use the filename argument default value, use robotframework-browser-screenshot-{index} as filename argument value.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#Register%20Keyword%20To%20Run%20On%20Failure\" class=\"name\">Register Keyword To Run On Failure</a>    Take Screenshot    # Uses ${TEST NAME}_FAILURE_SCREENSHOT_{index} as filename\n<a href=\"#Register%20Keyword%20To%20Run%20On%20Failure\" class=\"name\">Register Keyword To Run On Failure</a>    Take Screenshot    robotframework-browser-screenshot-{index}    # Uses robotframework-browser-screenshot-{index} as filename\n${previous kw}=    <a href=\"#Register%20Keyword%20To%20Run%20On%20Failure\" class=\"name\">Register Keyword To Run On Failure</a>    NONE    # Disables run on failure functionality.\n<a href=\"#Register%20Keyword%20To%20Run%20On%20Failure\" class=\"name\">Register Keyword To Run On Failure</a>    ${previous kw}\n<a href=\"#Register%20Keyword%20To%20Run%20On%20Failure\" class=\"name\">Register Keyword To Run On Failure</a>    Take Screenshot    fullPage=True\n<a href=\"#Register%20Keyword%20To%20Run%20On%20Failure\" class=\"name\">Register Keyword To Run On Failure</a>    Take Screenshot    failure-{index}    fullPage=True\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4316\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Register%20Keyword%20To%20Run%20On%20Failure"
  },
  {
    "name": "Reload",
    "library": "Browser",
    "args": [
      {
        "name": "timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout: timedelta | None = None"
      },
      {
        "name": "waitUntil",
        "type": {
          "name": "PageLoadStates",
          "typedoc": "PageLoadStates",
          "nested": [],
          "union": false
        },
        "defaultValue": "load",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "waitUntil: PageLoadStates = load"
      }
    ],
    "doc": "<p>Reloads current active page.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td>Maximum time for the reload to succeed.</td>\n</tr>\n<tr>\n<td><code>waitUntil</code></td>\n<td>When to consider operation succeeded, defaults to <span class=\"name\">load</span>.</td>\n</tr>\n</table>\n<p>waitUntill events can be either: <code>domcontentloaded</code> - consider operation to be finished when the DOMContentLoaded event is fired. <code>load</code> - consider operation to be finished when the load event is fired. <code>networkidle</code> - consider operation to be finished when there are no network connections for at least 500 ms. <code>commit</code> - consider operation to be finished when network response is received and the document started loading. |</p>\n<p><a href=\"https://forum.robotframework.org/t//4317\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Reload"
  },
  {
    "name": "Remove Locator Handler",
    "library": "Browser",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: str"
      }
    ],
    "doc": "<p>Remove locator handler indicated by selector.</p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Remove%20Locator%20Handler"
  },
  {
    "name": "Resume Clock",
    "library": "Browser",
    "args": [],
    "doc": "<p>Resumes the clock.</p>\n<p>Once keyword method is called, time resumes flowing, timers are fired as usual.</p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Resume%20Clock"
  },
  {
    "name": "Save Page As Pdf",
    "library": "Browser",
    "args": [
      {
        "name": "path",
        "type": {
          "name": "PathLike",
          "typedoc": "Path",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path: PathLike"
      },
      {
        "name": "",
        "type": null,
        "defaultValue": null,
        "kind": "NAMED_ONLY_MARKER",
        "required": false,
        "repr": "*"
      },
      {
        "name": "displayHeaderFooter",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "displayHeaderFooter: bool = False"
      },
      {
        "name": "footerTemplate",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "footerTemplate: str = "
      },
      {
        "name": "format",
        "type": {
          "name": "PdfFormat",
          "typedoc": "PdfFormat",
          "nested": [],
          "union": false
        },
        "defaultValue": "Letter",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "format: PdfFormat = Letter"
      },
      {
        "name": "headerTemplate",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "headerTemplate: str = "
      },
      {
        "name": "height",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "0px",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "height: str = 0px"
      },
      {
        "name": "landscape",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "landscape: bool = False"
      },
      {
        "name": "margin",
        "type": {
          "name": "PdfMarging",
          "typedoc": "PdfMarging",
          "nested": [],
          "union": false
        },
        "defaultValue": "{'top': '0px', 'right': '0px', 'bottom': '0px', 'left': '0px'}",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "margin: PdfMarging = {'top': '0px', 'right': '0px', 'bottom': '0px', 'left': '0px'}"
      },
      {
        "name": "outline",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "outline: bool = False"
      },
      {
        "name": "pageRanges",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "pageRanges: str = "
      },
      {
        "name": "preferCSSPageSize",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "preferCSSPageSize: bool = False"
      },
      {
        "name": "printBackground",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "printBackground: bool = False"
      },
      {
        "name": "scale",
        "type": {
          "name": "float",
          "typedoc": "float",
          "nested": [],
          "union": false
        },
        "defaultValue": "1",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "scale: float = 1"
      },
      {
        "name": "tagged",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "tagged: bool = False"
      },
      {
        "name": "width",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "0px",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "width: str = 0px"
      }
    ],
    "doc": "<p>Saves page as PDF.</p>\n<p>Saving a pdf is currently only supported in Chromium headless.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>path</code></td>\n<td>Where pdf is saved, if not full path, will be saved to ${OUTPUT_DIR}</td>\n</tr>\n<tr>\n<td><code>displayHeaderFooter</code></td>\n<td>Display header and footer. Defaults to False.</td>\n</tr>\n<tr>\n<td><code>footerTemplate</code></td>\n<td>HTML template for the print footer. Should use the same format as the <code>headerTemplate</code>.</td>\n</tr>\n<tr>\n<td><code>format</code></td>\n<td>Paper format. If set, takes priority over width or height options. Defaults to 'Letter'.</td>\n</tr>\n<tr>\n<td><code>headerTemplate</code></td>\n<td>HTML template for the print header.  See detailed explanation in below</td>\n</tr>\n<tr>\n<td><code>height</code></td>\n<td>Paper height, accepts values labeled with units.</td>\n</tr>\n<tr>\n<td><code>landscape</code></td>\n<td>Paper orientation. Defaults to false.</td>\n</tr>\n<tr>\n<td><code>margin</code></td>\n<td>Defines pdf margins, see <a href=\"#type-PdfMarging\" class=\"name\">PdfMarging</a> for more details</td>\n</tr>\n<tr>\n<td><code>outline</code></td>\n<td>Whether or not to embed the document outline into the PDF. Defaults to false.</td>\n</tr>\n<tr>\n<td><code>pageRanges</code></td>\n<td>Paper ranges to print, e.g., '1-5, 8, 11-13'. Defaults to the empty string, which means print all pages.</td>\n</tr>\n<tr>\n<td><code>preferCSSPageSize</code></td>\n<td>Give any CSS @page size declared in the page priority over what is declared in width and height or format options. Defaults to false, which will scale the content to fit the paper size.</td>\n</tr>\n<tr>\n<td><code>printBackground</code></td>\n<td>Print background graphics. Defaults to false.</td>\n</tr>\n<tr>\n<td><code>scale</code></td>\n<td>Scale of the webpage rendering. Defaults to 1. Scale amount must be between 0.1 and 2.</td>\n</tr>\n<tr>\n<td><code>tagged</code></td>\n<td>Whether or not to generate tagged (accessible) PDF. Defaults to false.</td>\n</tr>\n<tr>\n<td><code>width</code></td>\n<td>Paper width, accepts values labeled with units.</td>\n</tr>\n</table>\n<p><code>headerTemplate</code> and <code>footerTemplate</code> Should be valid HTML markup with following classes used to inject printing values into them:</p>\n<ul>\n<li><span class=\"name\">date</span> formatted print date</li>\n<li><span class=\"name\">title</span> document title</li>\n<li><span class=\"name\">url</span> document location</li>\n<li><span class=\"name\">pageNumber</span> current page number</li>\n<li><span class=\"name\">totalPages</span> total pages in the document</li>\n</ul>\n<p>All possible units are:</p>\n<ul>\n<li><span class=\"name\">px</span> - pixel</li>\n<li><span class=\"name\">in</span> - inch</li>\n<li><span class=\"name\">cm</span> - centimeter</li>\n<li><span class=\"name\">mm</span> - millimeter</li>\n</ul>\n<p>headerTemplate and footerTemplate markup have the following limitations: &gt; 1. Script tags inside templates are not evaluated. &gt; 2. Page styles are not visible inside templates.</p>\n<p>Returns the path to the saved PDF file.</p>\n<p>More details can be found from <a href=\"https://playwright.dev/docs/api/class-page#page-pdf\">Playwright pdf documentation</a></p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#New%20Browser\" class=\"name\">New Browser</a></td>\n<td>Chromium</td>\n<td>headless=True</td>\n</tr>\n<tr>\n<td><a href=\"#New%20Page\" class=\"name\">New Page</a></td>\n<td>${URL}</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Emulate%20Media\" class=\"name\">Emulate Media</a></td>\n<td>media=screen</td>\n<td></td>\n</tr>\n<tr>\n<td>${pdf_path} =</td>\n<td><a href=\"#Save%20Page%20As%20Pdf\" class=\"name\">Save Page As Pdf</a></td>\n<td>page.pdf</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${pdf_path}</td>\n<td>${OUTPUT_DIR}${/}page.pdf</td>\n</tr>\n</table>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Save%20Page%20As%20Pdf"
  },
  {
    "name": "Save Storage State",
    "library": "Browser",
    "args": [],
    "doc": "<p>Saves the current active context storage state to a file.</p>\n<p>Web apps use cookie-based or token-based authentication, where authenticated state is stored as <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies\">cookies</a> or in <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage\">local storage</a>. Keyword retrieves the storage state from authenticated contexts and save it to disk. Then <a href=\"#New%20Context\" class=\"name\">New Context</a> can be created with prepopulated state.</p>\n<p>Please note state file may contains secrets and should not be shared with people outside of your organisation.</p>\n<p>The file is created in ${OUTPUTDIR}/browser/state folder and file(s) are automatically deleted when new test execution starts. File path is returned by the keyword.</p>\n<p>Example:</p>\n<pre>\nTest Case\n    <a href=\"#New%20Context\" class=\"name\">New context</a>\n    <a href=\"#New%20Page\" class=\"name\">New Page</a>    <a href=\"https://login.page.html\">https://login.page.html</a>\n    #  Perform login\n    <a href=\"#Fill%20Secret\" class=\"name\">Fill Secret</a>    id=username    $username\n    <a href=\"#Fill%20Secret\" class=\"name\">Fill Secret</a>    id=password    $password\n    <a href=\"#Click\" class=\"name\">Click</a>    id=button\n    <a href=\"#Get%20Text\" class=\"name\">Get Text</a>    id=header    ==    Something\n    #  Save storage to disk\n    ${state_file} =    <a href=\"#Save%20Storage%20State\" class=\"name\">Save Storage State</a>\n    #  Create new context with saved state\n    <a href=\"#New%20Context\" class=\"name\">New context</a>    storageState=${state_file}\n    <a href=\"#New%20Page\" class=\"name\">New Page</a>    <a href=\"https://login.page.html\">https://login.page.html</a>\n    #  Login is not needed because authentication is read from state file\n    <a href=\"#Get%20Text\" class=\"name\">Get Text</a>    id=header    ==    Something\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4318\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Save%20Storage%20State"
  },
  {
    "name": "Scroll By",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "selector: str | None = None"
      },
      {
        "name": "vertical",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "height",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "vertical: str = height"
      },
      {
        "name": "horizontal",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "0",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "horizontal: str = 0"
      },
      {
        "name": "behavior",
        "type": {
          "name": "ScrollBehavior",
          "typedoc": "ScrollBehavior",
          "nested": [],
          "union": false
        },
        "defaultValue": "auto",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "behavior: ScrollBehavior = auto"
      }
    ],
    "doc": "<p>Scrolls an element or the page relative from current position by the given values.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector of the element. If the selector is <code>${None}</code> or <code>${Empty}</code> the page itself is scrolled. To ensure an element is in view use <a href=\"#Hover\" class=\"name\">Hover</a> instead. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n<tr>\n<td><code>vertical</code></td>\n<td>defines how far and in which direction to scroll vertically. It can be a positive or negative number. Positive scrolls down, like <code>50</code>, negative scrolls up, like <code>-50</code>. It can be a percentage value of the absolute scrollable size, like <code>9.95%</code> or negative like <code>-10%</code>. It can be the string <code>height</code> to defining to scroll exactly one visible height down or up with <code>-height</code>. <i>Be aware that some pages do lazy loading and load more content once you scroll down.</i> The percentage of the current scrollable height is used and may change.</td>\n</tr>\n<tr>\n<td><code>horizontal</code></td>\n<td>defines where to scroll horizontally. Works same as vertical but defines positive values for right and negative values for left. <code>width</code> defines to scroll exactly one visible range to the right.</td>\n</tr>\n<tr>\n<td><code>behavior</code></td>\n<td>defines whether the scroll happens directly or it scrolls smoothly.</td>\n</tr>\n</table>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p><a href=\"https://forum.robotframework.org/t//4319\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Scroll%20By"
  },
  {
    "name": "Scroll To",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "selector: str | None = None"
      },
      {
        "name": "vertical",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "top",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "vertical: str = top"
      },
      {
        "name": "horizontal",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "left",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "horizontal: str = left"
      },
      {
        "name": "behavior",
        "type": {
          "name": "ScrollBehavior",
          "typedoc": "ScrollBehavior",
          "nested": [],
          "union": false
        },
        "defaultValue": "auto",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "behavior: ScrollBehavior = auto"
      }
    ],
    "doc": "<p>Scrolls an element or the page to an absolute position based on given coordinates.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n<td></td>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector of the element. If the selector is <code>${None}</code> or <code>${Empty}</code> the page itself is scrolled. To ensure an element is in view use <a href=\"#Hover\" class=\"name\">Hover</a> instead. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n<td></td>\n</tr>\n<tr>\n<td><code>vertical</code></td>\n<td>defines where to scroll vertically. It can be a positive number, like <code>300</code>. It can be a percentage value of the absolute scrollable size, like <code>50%</code>. It can be a string defining that top or the bottom of the scroll area. &lt; <code>top</code></td>\n<td><code>bottom</code> &gt; <i>Be aware that some pages do lazy loading and load more content once you scroll down.</i> Bottom defines the current known bottom coordinate.</td>\n</tr>\n<tr>\n<td><code>horizontal</code></td>\n<td>defines where to scroll horizontally. Works same as vertical but defines &lt; <code>left</code></td>\n<td><code>right</code> &gt; as start and end.</td>\n</tr>\n<tr>\n<td><code>behavior</code></td>\n<td>defines whether the scroll happens directly or it scrolls smoothly.</td>\n<td></td>\n</tr>\n</table>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p><a href=\"https://forum.robotframework.org/t//4320\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Scroll%20To"
  },
  {
    "name": "Scroll To Element",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      }
    ],
    "doc": "<p>This method waits for actionability checks, then tries to scroll element into view, unless it is completely visible.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector of the checkbox. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n</table>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p>Does nothing if the element is already visible.</p>\n<p><a href=\"https://forum.robotframework.org/t//4321\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Scroll%20To%20Element"
  },
  {
    "name": "Select Options By",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      },
      {
        "name": "attribute",
        "type": {
          "name": "SelectAttribute",
          "typedoc": "SelectAttribute",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "attribute: SelectAttribute"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*values"
      }
    ],
    "doc": "<p>Selects options from select element found by <code>selector</code>.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector of the <code>&lt;select&gt;</code> tag. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n<tr>\n<td><code>attribute</code></td>\n<td>Attribute to select options by. Can be <code>value</code>, <code>label</code>, <code>text</code> or <code>index</code>. Where <code>label</code> and <code>text</code> are same.</td>\n</tr>\n<tr>\n<td><code>*values</code></td>\n<td>Values to select.</td>\n</tr>\n</table>\n<p>Returns list of options which keyword was able to select. The type of list item matches to <code>attribute</code> definition. Example if <code>attribute</code> equals to <span class=\"name\">label</span> returned list contains label values. Or in case of <span class=\"name\">index</span> it contains list of selected indexes.</p>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p>If no values to select are passed will deselect options in element.</p>\n<p>Example:</p>\n<pre>\n${selected} =    <a href=\"#Select%20Options%20By\" class=\"name\">Select Options By</a>    select[name=preferred_channel]    label    Direct mail\nList Should Contain Value    ${selected}    Direct mail\n${selected} =    <a href=\"#Select%20Options%20By\" class=\"name\">Select Options By</a>    select[name=interests]    value    males    females    others\nList Should Contain Value    ${selected}    males\nList Should Contain Value    ${selected}    females\nList Should Contain Value    ${selected}    others\nLength Should Be    ${selected}    3\n${selected} =    <a href=\"#Select%20Options%20By\" class=\"name\">Select Options By</a>    select[name=possible_channels]    index    0    2\nList Should Contain Value    ${selected}    0\nList Should Contain Value    ${selected}    2\n${selected} =    <a href=\"#Select%20Options%20By\" class=\"name\">Select Options By</a>    select[name=interests]    text     Males    Females\nList Should Contain Value    ${selected}    Males\nList Should Contain Value    ${selected}    Females\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4322\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Select%20Options%20By"
  },
  {
    "name": "SessionStorage Clear",
    "library": "Browser",
    "args": [
      {
        "name": "frame_selector",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "frame_selector: str | None = None"
      }
    ],
    "doc": "<p>Remove all saved data from the session storage.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>frame_selector</code></td>\n<td>If this selector points to an element inside an iframe, the SessionStorage of that frame is used. Example: <code>iframe[name=\"test\"] &gt;&gt;&gt; body</code></td>\n</tr>\n</table>\n<p>Example:</p>\n<pre>\n<a href=\"#SessionStorage%20Set%20Item\" class=\"name\">SessionStorage Set Item</a>    mykey3    myvalue3\n <a href=\"#SessionStorage%20Clear\" class=\"name\">SessionStorage Clear</a>\n<a href=\"#SessionStorage%20Get%20Item\" class=\"name\">SessionStorage Get Item</a>    mykey3    ==    ${None}\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4323\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#SessionStorage%20Clear"
  },
  {
    "name": "SessionStorage Get Item",
    "library": "Browser",
    "args": [
      {
        "name": "key",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "key: str"
      },
      {
        "name": "assertion_operator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "AssertionOperator",
              "typedoc": "AssertionOperator",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_operator: AssertionOperator | None = None"
      },
      {
        "name": "assertion_expected",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Any",
              "typedoc": "Any",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_expected: Any | None = None"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      },
      {
        "name": "frame_selector",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "frame_selector: str | None = None"
      }
    ],
    "doc": "<p>Get saved data from from session storage.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>key</code></td>\n<td>Named key of the item in the storage.</td>\n</tr>\n<tr>\n<td><code>assertion_operator</code></td>\n<td>Assertion operator to use. See <a href=\"#Assertions\" class=\"name\">Assertions</a> for more information.</td>\n</tr>\n<tr>\n<td><code>assertion_expected</code></td>\n<td>Expected value to compare with.</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>Custom error message to use.</td>\n</tr>\n<tr>\n<td><code>frame_selector</code></td>\n<td>If this selector points to an element inside an iframe, the SessionStorage of that frame is used. Example: <code>iframe[name=\"test\"] &gt;&gt;&gt; body</code></td>\n</tr>\n</table>\n<p>Example:</p>\n<pre>\n<a href=\"#SessionStorage%20Set%20Item\" class=\"name\">SessionStorage Set Item</a>    key2    value2\n${item} =    <a href=\"#SessionStorage%20Get%20Item\" class=\"name\">SessionStorage Get Item</a>    key1\nShould Be Equal    ${item}    value2\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4324\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#SessionStorage%20Get%20Item"
  },
  {
    "name": "SessionStorage Remove Item",
    "library": "Browser",
    "args": [
      {
        "name": "key",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "key: str"
      },
      {
        "name": "frame_selector",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "frame_selector: str | None = None"
      }
    ],
    "doc": "<p>Remove saved data with key from the session storage.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>key</code></td>\n<td>The name of the item which shall be deleted.</td>\n</tr>\n<tr>\n<td><code>frame_selector</code></td>\n<td>If this selector points to an element inside an iframe, the SessionStorage of that frame is used. Example: <code>iframe[name=\"test\"] &gt;&gt;&gt; body</code></td>\n</tr>\n</table>\n<p>Example:</p>\n<pre>\n<a href=\"#SessionStorage%20Set%20Item\" class=\"name\">SessionStorage Set Item</a>       mykey2    myvalue2\n<a href=\"#SessionStorage%20Remove%20Item\" class=\"name\">SessionStorage Remove Item</a>    mykey2\n<a href=\"#SessionStorage%20Get%20Item\" class=\"name\">SessionStorage Get Item</a>       mykey2    ==    ${None}\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4325\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#SessionStorage%20Remove%20Item"
  },
  {
    "name": "SessionStorage Set Item",
    "library": "Browser",
    "args": [
      {
        "name": "key",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "key: str"
      },
      {
        "name": "value",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "value: str"
      },
      {
        "name": "frame_selector",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "frame_selector: str | None = None"
      }
    ],
    "doc": "<p>Save data to session storage.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>key</code></td>\n<td>The name of the key under which it should be saved.</td>\n</tr>\n<tr>\n<td><code>value</code></td>\n<td>The value which shall be saved as a string.</td>\n</tr>\n<tr>\n<td><code>frame_selector</code></td>\n<td>If this selector points to an element inside an iframe, the SessionStorage of that frame is used. Example: <code>iframe[name=\"test\"] &gt;&gt;&gt; body</code></td>\n</tr>\n</table>\n<p>Example:</p>\n<pre>\n<a href=\"#SessionStorage%20Set%20Item\" class=\"name\">SessionStorage Set Item</a>    key2    value2\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4326\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#SessionStorage%20Set%20Item"
  },
  {
    "name": "Set Assertion Formatters",
    "library": "Browser",
    "args": [
      {
        "name": "formatters",
        "type": {
          "name": "Dict",
          "typedoc": "dictionary",
          "nested": [
            {
              "name": "FormatterKeywords",
              "typedoc": "FormatterKeywords",
              "nested": [],
              "union": false
            },
            {
              "name": "list",
              "typedoc": "list",
              "nested": [
                {
                  "name": "Union",
                  "typedoc": null,
                  "nested": [
                    {
                      "name": "FormatingRules",
                      "typedoc": "FormatingRules",
                      "nested": [],
                      "union": false
                    },
                    {
                      "name": "LambdaFunction",
                      "typedoc": "LambdaFunction",
                      "nested": [],
                      "union": false
                    }
                  ],
                  "union": true
                }
              ],
              "union": false
            }
          ],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "formatters: Dict[FormatterKeywords, list[FormatingRules | LambdaFunction]]"
      },
      {
        "name": "scope",
        "type": {
          "name": "Scope",
          "typedoc": "Scope",
          "nested": [],
          "union": false
        },
        "defaultValue": "Suite",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "scope: Scope = Suite"
      }
    ],
    "doc": "<p>Set keywords formatters for assertions.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>formatters</code></td>\n<td>Dictionary of keywords and formatters, where key is the keyword name where formatters are applied. Dictionary value is a list of formatter which are applied. Formatters for a defined keyword are always overwritten. An empty list will clear all formatters for the keyword. If <code>formatters</code> is empty dictionary, then all formatters are cleared from all keywords.</td>\n</tr>\n<tr>\n<td><code>scope</code></td>\n<td>Defines the lifetime of the formatter, possible values are Global, Suite and Test.</td>\n</tr>\n</table>\n<p>See type documentation of <span class=\"name\">FormatterTypes</span> for more information.</p>\n<p>It is possible to define own formatters as lambda functions.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#Set%20Assertion%20Formatters\" class=\"name\">Set Assertion Formatters</a>    {\"Get Text\": [\"strip\", \"normalize spaces\"]}  # This will convert all kind of spaces to single space and removes spaces from start and end of the string.\n<a href=\"#Set%20Assertion%20Formatters\" class=\"name\">Set Assertion Formatters</a>    {\"Get Title\": [\"apply to expected\",\"lambda x: x.replace(' ', '')\"]}  # This will remove all spaces from the string.\n${value} =    <a href=\"#Get%20Text\" class=\"name\">Get Text</a>    //div    ==    ${SPACE}Expected${SPACE * 2}Text\nShould Be Equal    ${value}    Expected Text\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4327\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Set%20Assertion%20Formatters"
  },
  {
    "name": "Set Browser Timeout",
    "library": "Browser",
    "args": [
      {
        "name": "timeout",
        "type": {
          "name": "timedelta",
          "typedoc": "timedelta",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "timeout: timedelta"
      },
      {
        "name": "scope",
        "type": {
          "name": "Scope",
          "typedoc": "Scope",
          "nested": [],
          "union": false
        },
        "defaultValue": "Suite",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "scope: Scope = Suite"
      }
    ],
    "doc": "<p>Sets the timeout used by most input and getter keywords.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td>Timeout of it is for current playwright context and for new contexts. Supports Robot Framework <a href=\"https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#time-format\">time format</a> . Returns the previous value of the timeout.</td>\n</tr>\n<tr>\n<td><code>scope</code></td>\n<td>Scope defines the live time of that setting. Available values are <code>Global</code>, <code>Suite</code> or <code>Test</code> / <code>Task</code>. See <span class=\"name\">Scope Settings</span> for more details.</td>\n</tr>\n</table>\n<p>Example:</p>\n<pre>\n${old_timeout} =    <a href=\"#Set%20Browser%20Timeout\" class=\"name\">Set Browser Timeout</a>    1m 30 seconds\nClick     //button\n<a href=\"#Set%20Browser%20Timeout\" class=\"name\">Set Browser Timeout</a>    ${old_timeout}\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4328\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Set%20Browser%20Timeout"
  },
  {
    "name": "Set Default Run Before Unload",
    "library": "Browser",
    "args": [
      {
        "name": "runBeforeUnload",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "runBeforeUnload: bool"
      }
    ],
    "doc": "<p>Set default runBeforeUnload value when <a href=\"#Close%20Page\" class=\"name\">Close Page</a> is called indirectly.</p>\n<p>Close Page is called indirectly when <a href=\"https://marketsquare.github.io/robotframework-browser/Browser.html#Automatic%20page%20and%20context%20closing\">automatic page closing</a> is done. The default value is false and this keyword can be used to change value. Returns the old runBeforeUnload value.</p>\n<p><a href=\"https://forum.robotframework.org/t/6203\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Set%20Default%20Run%20Before%20Unload"
  },
  {
    "name": "Set Geolocation",
    "library": "Browser",
    "args": [
      {
        "name": "latitude",
        "type": {
          "name": "float",
          "typedoc": "float",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "latitude: float"
      },
      {
        "name": "longitude",
        "type": {
          "name": "float",
          "typedoc": "float",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "longitude: float"
      },
      {
        "name": "accuracy",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "float",
              "typedoc": "float",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "accuracy: float | None = None"
      }
    ],
    "doc": "<p>Updated the correct Context's geolocation.</p>\n<p>Latitude can be between -90 and 90 and longitude can be between -180 and 180. Accuracy of the location must be positive number and defaults to 0. When creating context, grant <code>geolocation</code> permission for pages to read its geolocation.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>latitude</code></td>\n<td>Latitude between -90 and 90.</td>\n</tr>\n<tr>\n<td><code>longitude</code></td>\n<td>Longitude between -180 and 180.</td>\n</tr>\n<tr>\n<td><code>accuracy</code></td>\n<td>Non-negative accuracy value. Defaults to 0.</td>\n</tr>\n</table>\n<p>Example:</p>\n<pre>\n${permissions} =    Create List    geolocation\n<a href=\"#New%20Context\" class=\"name\">New Context</a>    permissions=${permissions}\n<a href=\"#Set%20Geolocation\" class=\"name\">Set Geolocation</a>    60.173708    24.982263    3    # Points to Korkeasaari in Helsinki.\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4329\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Set%20Geolocation"
  },
  {
    "name": "Set Highlight On Failure",
    "library": "Browser",
    "args": [
      {
        "name": "highlight",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "highlight: bool = True"
      },
      {
        "name": "scope",
        "type": {
          "name": "Scope",
          "typedoc": "Scope",
          "nested": [],
          "union": false
        },
        "defaultValue": "Suite",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "scope: Scope = Suite"
      }
    ],
    "doc": "<p>Controls if the element is highlighted on failure.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>highlight</code></td>\n<td>If <span class=\"name\">True</span> element is highlighted on failure during a screenshot is taken. If <span class=\"name\">False</span> element is not highlighted in the screenshot.</td>\n</tr>\n<tr>\n<td><code>scope</code></td>\n<td>Scope defines the live time of that setting. Available values are <code>Global</code>, <code>Suite</code> or <code>Test</code> / <code>Task</code>. See <a href=\"#type-Scope\" class=\"name\">Scope</a> for more details.</td>\n</tr>\n</table>\n<p>Example:</p>\n<pre>\n<a href=\"#Set%20Highlight%20On%20Failure\" class=\"name\">Set Highlight On Failure</a>    True\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4740\">Comment &gt;&gt;</a> #TODO add real link</p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Set%20Highlight%20On%20Failure"
  },
  {
    "name": "Set Offline",
    "library": "Browser",
    "args": [
      {
        "name": "offline",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "offline: bool = True"
      }
    ],
    "doc": "<p>Toggles current Context's offline emulation.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>offline</code></td>\n<td>Toggles the offline mode. Set to False to switch back to online mode. Defaults to True.</td>\n</tr>\n</table>\n<p><a href=\"https://forum.robotframework.org/t//4330\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Set%20Offline"
  },
  {
    "name": "Set Retry Assertions For",
    "library": "Browser",
    "args": [
      {
        "name": "timeout",
        "type": {
          "name": "timedelta",
          "typedoc": "timedelta",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "timeout: timedelta"
      },
      {
        "name": "scope",
        "type": {
          "name": "Scope",
          "typedoc": "Scope",
          "nested": [],
          "union": false
        },
        "defaultValue": "Suite",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "scope: Scope = Suite"
      }
    ],
    "doc": "<p>Sets the timeout used in retrying assertions when they fail.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td>Assertion retry timeout will determine how long Browser library will retry an assertion to be true.</td>\n</tr>\n<tr>\n<td><code>scope</code></td>\n<td>Scope defines the live time of that setting. Available values are <code>Global</code>, <code>Suite</code> or <code>Test</code> / <code>Task</code>. See <a href=\"#type-Scope\" class=\"name\">Scope</a> for more details.</td>\n</tr>\n</table>\n<p>The other keyword <a href=\"#Set%20Browser%20Timeout\" class=\"name\">Set Browser timeout</a> controls how long Playwright will perform waiting in the node side for Elements to fulfill the requirements of the specific keyword.</p>\n<p>Returns the previous value of the assertion retry timeout.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#Set%20Browser%20Timeout\" class=\"name\">Set Browser Timeout</a>    10 seconds\n${old} =    <a href=\"#Set%20Retry%20Assertions%20For\" class=\"name\">Set Retry Assertions For</a>    30s\n<a href=\"#Get%20Title\" class=\"name\">Get Title</a>    ==    Login Page\n<a href=\"#Set%20Retry%20Assertions%20For\" class=\"name\">Set Retry Assertions For</a>    ${old}\n</pre>\n<p>Example waits 10 seconds on Playwright to get the page title and library will retry 30 seconds to make sure that title is correct.</p>\n<p><a href=\"https://forum.robotframework.org/t//4331\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Set%20Retry%20Assertions%20For"
  },
  {
    "name": "Set Selector Prefix",
    "library": "Browser",
    "args": [
      {
        "name": "prefix",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "prefix: str | None"
      },
      {
        "name": "scope",
        "type": {
          "name": "Scope",
          "typedoc": "Scope",
          "nested": [],
          "union": false
        },
        "defaultValue": "Suite",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "scope: Scope = Suite"
      }
    ],
    "doc": "<p>Sets the prefix for all selectors in the given scope.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>prefix</code></td>\n<td>Prefix for all selectors. Prefix and selector will be separated by a single space. Use <code>${None}</code> or <code>${EMPTY}</code> to disable the prefix.</td>\n</tr>\n<tr>\n<td><code>scope</code></td>\n<td>Scope defines the live time of that setting. Available values are <code>Global</code>, <code>Suite</code> or <code>Test</code> / <code>Task</code>. See <a href=\"#type-Scope\" class=\"name\">Scope</a> for more details.</td>\n</tr>\n</table>\n<p>Returns the previous value of the prefix.</p>\n<p>Example:</p>\n<pre>\n${old} =    <a href=\"#Set%20Selector%20Prefix\" class=\"name\">Set Selector Prefix</a>    iframe#embedded_page &gt;&gt;&gt;\n<a href=\"#Click\" class=\"name\">Click</a>    button#login_btn       # Clicks on button inside iframe with the selector <code>iframe#embedded_page &gt;&gt;&gt; button#login_btn</code>\n<a href=\"#Set%20Selector%20Prefix\" class=\"name\">Set Selector Prefix</a>    ${old}\n</pre>\n<p>Example will click on button with id <code>login_btn</code> inside iframe with id <code>embedded_page</code>. The resulting selector will be <code>iframe#embedded_page &gt;&gt;&gt; button#login_btn</code>.</p>\n<p>The effect of this prefix can be disable by prefixing any selector with <code>!prefix </code>, with a trailing space, for single keyword calls. i.e. <code>!prefix id=btn_outside_a_frame</code></p>\n<p><a href=\"#Get%20Element\" class=\"name\">Get Element</a>, <a href=\"#Get%20Elements\" class=\"name\">Get Elements</a>, <a href=\"#Get%20Element%20By\" class=\"name\">Get Element By</a> and <a href=\"#Get%20Element%20By%20Role\" class=\"name\">Get Element By Role</a> do automatically prefix the returned selector with <code>!prefix </code> so that it is possible to use them directly without setting the prefix to <code>${None}</code> before usage.</p>\n<p><a href=\"https://forum.robotframework.org/t//4741\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Set%20Selector%20Prefix"
  },
  {
    "name": "Set Strict Mode",
    "library": "Browser",
    "args": [
      {
        "name": "mode",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "mode: bool"
      },
      {
        "name": "scope",
        "type": {
          "name": "Scope",
          "typedoc": "Scope",
          "nested": [],
          "union": false
        },
        "defaultValue": "Suite",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "scope: Scope = Suite"
      }
    ],
    "doc": "<p>Controls library strict mode.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>mode</code></td>\n<td>When set to <code>True</code>, keywords that are searching elements will use Playwright <a href=\"https://playwright.dev/docs/api/class-page#page-query-selector\">strict mode</a>. Keyword changes library strict mode value and keyword also return the previous strict mode value.</td>\n</tr>\n<tr>\n<td><code>scope</code></td>\n<td>Scope defines the live time of that setting. Available values are <code>Global</code>, <code>Suite</code> or <code>Test</code> / <code>Task</code>. See <a href=\"#type-Scope\" class=\"name\">Scope</a> for more details.</td>\n</tr>\n</table>\n<p>Example:</p>\n<pre>\n${old_mode} =      Set Strict Mode    False\nGet Text           //input            # Does not fail if selector points to one or more elements\nSet Strict Mode    ${old_mode}\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4332\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Set%20Strict%20Mode"
  },
  {
    "name": "Set Time",
    "library": "Browser",
    "args": [
      {
        "name": "time",
        "type": {
          "name": "datetime",
          "typedoc": "datetime",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "time: datetime"
      },
      {
        "name": "clock_type",
        "type": {
          "name": "ClockType",
          "typedoc": "ClockType",
          "nested": [],
          "union": false
        },
        "defaultValue": "install",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "clock_type: ClockType = install"
      }
    ],
    "doc": "<p>Sets the time of the browser's internal clock.</p>\n<table border=\"1\">\n<tr>\n<td>Argument</td>\n<td>Description</td>\n</tr>\n<tr>\n<td>time</td>\n<td>The time to set. Supports Robot Framework date and time format</td>\n</tr>\n<tr>\n<td>clock_type</td>\n<td>The clock type to set. Default is <span class=\"name\">install</span>.</td>\n</tr>\n</table>\n<p>The fixed makes Date.now and new Date() return fixed fake time at all times, keeps all the timers running.</p>\n<p>The system sets current system time but does not trigger any timers.</p>\n<p>The install fake timers are used to manually control the flow of time in tests. They allow you to advance time, fire timers, and control the behavior of time-dependent functions.</p>\n<p>How to use clock related keywords, see <a href=\"https://playwright.dev/docs/clock\">Playwright clock documentation</a>. Also reviewing the Playwright <a href=\"https://playwright.dev/docs/api/class-clock\">Clock API</a> is recommended.</p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Set%20Time"
  },
  {
    "name": "Set Viewport Size",
    "library": "Browser",
    "args": [
      {
        "name": "width",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "width: int"
      },
      {
        "name": "height",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "height: int"
      }
    ],
    "doc": "<p>Sets current Pages viewport size to specified dimensions.</p>\n<p>In the case of multiple pages in a single browser, each page can have its own viewport size. However, <a href=\"#New%20Context\" class=\"name\">New Context</a> allows to set viewport size (and more) for all later opened pages in the context at once.</p>\n<p><a href=\"#Set%20Viewport%20Size\" class=\"name\">Set Viewport Size</a> will resize the page. A lot of websites don't expect phones to change size, so you should set the viewport size before navigating to the page with <a href=\"#New%20Context\" class=\"name\">New Context</a> before opening the page itself.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>width</code></td>\n<td>Sets the width size.</td>\n</tr>\n<tr>\n<td><code>height</code></td>\n<td>Sets the height size.</td>\n</tr>\n</table>\n<p><a href=\"https://forum.robotframework.org/t//4333\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Set%20Viewport%20Size"
  },
  {
    "name": "Show Keyword Banner",
    "library": "Browser",
    "args": [
      {
        "name": "show",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "show: bool = True"
      },
      {
        "name": "style",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "style: str = "
      },
      {
        "name": "scope",
        "type": {
          "name": "Scope",
          "typedoc": "Scope",
          "nested": [],
          "union": false
        },
        "defaultValue": "Suite",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "scope: Scope = Suite"
      }
    ],
    "doc": "<p>Controls if the keyword banner is shown on page or not.</p>\n<p>Keyword call banner is a css overlay that shows the currently executed keyword directly on page. This is useful for debugging and for showing the test execution on video recordings. By default, the banner is not shown on page except when running in presenter mode.</p>\n<p>The banner can be controlled by an import setting of Browser library. (see <a href=\"#Importing\" class=\"name\">Importing</a> section)</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>show</code></td>\n<td>If <span class=\"name\">True</span> banner is shown on page. If <span class=\"name\">False</span> banner is not shown on page. If <a href=\"#type-None\" class=\"name\">None</a> banner is shown on page only when running in presenter mode.</td>\n</tr>\n<tr>\n<td><code>style</code></td>\n<td>Additional css styles to be applied to the banner. These styles are css settings and may override the existing ones for the banner.</td>\n</tr>\n<tr>\n<td><code>scope</code></td>\n<td>Scope defines the live time of that setting. Available values are <code>Global</code>, <code>Suite</code> or <code>Test</code> / <code>Task</code>. See <a href=\"#type-Scope\" class=\"name\">Scope</a> for more details.</td>\n</tr>\n</table>\n<p>Example:</p>\n<pre>\nShow Keyword Banner     True    top: 5px; bottom: auto; left: 5px; background-color: #00909077; font-size: 9px; color: black;   # Show banner on top left corner with custom styles\nShow Keyword Banner     False   # Hide banner\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4716\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Show%20Keyword%20Banner"
  },
  {
    "name": "Start Coverage",
    "library": "Browser",
    "args": [
      {
        "name": "",
        "type": null,
        "defaultValue": null,
        "kind": "NAMED_ONLY_MARKER",
        "required": false,
        "repr": "*"
      },
      {
        "name": "config_file",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "PathLike",
              "typedoc": "Path",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "config_file: PathLike | None = None"
      },
      {
        "name": "coverage_type",
        "type": {
          "name": "CoverageType",
          "typedoc": "CoverageType",
          "nested": [],
          "union": false
        },
        "defaultValue": "all",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "coverage_type: CoverageType = all"
      },
      {
        "name": "path",
        "type": {
          "name": "Path",
          "typedoc": "Path",
          "nested": [],
          "union": false
        },
        "defaultValue": ".",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "path: Path = ."
      },
      {
        "name": "raw",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "raw: bool = False"
      },
      {
        "name": "reportAnonymousScripts",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "reportAnonymousScripts: bool = False"
      },
      {
        "name": "resetOnNavigation",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "resetOnNavigation: bool = True"
      }
    ],
    "doc": "<p>Starts the coverage for the current page.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>config_file</code></td>\n<td>Optional path to <a href=\"https://www.npmjs.com/package/monocart-coverage-reports#options\">options file</a></td>\n</tr>\n<tr>\n<td><code>coverage_type</code></td>\n<td>Type of coverage to start. Default is <span class=\"name\">all</span>.</td>\n</tr>\n<tr>\n<td><code>path</code></td>\n<td>Absolute or relative directory path (relative to <code>${OUTPUT_DIR}/browser/coverage/</code>) where the coverage is store in a directory with the page id name.</td>\n</tr>\n<tr>\n<td><code>raw</code></td>\n<td>Whether to save raw coverage data. Default is <span class=\"name\">False</span>.</td>\n</tr>\n<tr>\n<td><code>reportAnonymousScripts</code></td>\n<td>Whether to report anonymous scripts. Default is <span class=\"name\">False</span>. Only valid for JS coverage.</td>\n</tr>\n<tr>\n<td><code>resetOnNavigation</code></td>\n<td>Whether to reset coverage on navigation. Default is <span class=\"name\">True</span>.</td>\n</tr>\n</table>\n<p>The <span class=\"name\">coverage_type</span> can be one of the following:</p>\n<ul>\n<li><code>all</code>: Both <a href=\"https://playwright.dev/docs/api/class-coverage/#coverage-start-css-coverage\">CSS</a> and <a href=\"https://playwright.dev/docs/api/class-coverage/#coverage-start-js-coverage\">JS</a>.</li>\n<li><code>css</code>: <a href=\"https://playwright.dev/docs/api/class-coverage/#coverage-start-css-coverage\">CSS</a>.</li>\n<li><code>js</code>: <a href=\"https://playwright.dev/docs/api/class-coverage/#coverage-start-js-coverage\">JS</a>.</li>\n</ul>\n<p>Coverage must started when page is open and before any action is performed on the page. Coverage will be stored when calling <a href=\"#Stop%20Coverage\" class=\"name\">Stop Coverage</a> keyword or page or context is closed. This is done automatically when using the auto closing.</p>\n<p>The <span class=\"name\">raw</span> argument saves the raw coverage data in the coverage folder. The raw data is needed to combine multiple coverage reports to single report. Singel report can be created with <span class=\"name\">rfbrowser coverage /path/to/basefolder/ /path/to/outputfolder/</span> command. Pleaee note that the <span class=\"name\">raw</span> argument is ignored if the <span class=\"name\">config_file</span> is defined. In this case user is responsible to also set the raw reporter in the config file. To see more details about combining coverage data, run: <span class=\"name\">rfbrowser coverage --help</span> command.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#New%20Page\" class=\"name\">New Page</a>\n<a href=\"#Start%20Coverage\" class=\"name\">Start Coverage</a>\n<a href=\"#Go%20To\" class=\"name\">Go To</a>    ${LOGIN_URL}\nDo Something In The Page\n<a href=\"#Stop%20Coverage\" class=\"name\">Stop Coverage</a>\n</pre>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Start%20Coverage"
  },
  {
    "name": "Stop Coverage",
    "library": "Browser",
    "args": [],
    "doc": "<p>Stops the coverage for the current page.</p>\n<p>Creates a coverage report by using <a href=\"https://www.npmjs.com/package/monocart-coverage-reports\">monocart-coverage-reports</a> To see the default and all possible options, see <a href=\"https://github.com/cenfun/monocart-coverage-reports/blob/HEAD/lib/default/options.js\">options.js</a> file for more details. Returns the path to the folder where coverage reported.</p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Stop%20Coverage"
  },
  {
    "name": "Switch Browser",
    "library": "Browser",
    "args": [
      {
        "name": "id",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "id: str"
      }
    ],
    "doc": "<p>Switches the currently active Browser to another open Browser.</p>\n<p>Returns a stable identifier for the previous browser. See <a href=\"#Browser%2C%20Context%20and%20Page\" class=\"name\">Browser, Context and Page</a> for more information about Browser and related concepts.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td>id</td>\n<td>The id of the browser to switch to. Example: <code>browser=96207191-8147-44e7-b9ac-5e04f2709c1d</code>. A browser id is returned by <a href=\"#New%20Browser\" class=\"name\">New Browser</a> when it is started or can be fetched from the browser catalog when returned by <a href=\"#Get%20Browser%20Catalog\" class=\"name\">Get Browser Catalog</a>.</td>\n</tr>\n</table>\n<p><a href=\"https://forum.robotframework.org/t//4334\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Switch%20Browser"
  },
  {
    "name": "Switch Context",
    "library": "Browser",
    "args": [
      {
        "name": "id",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "id: str"
      },
      {
        "name": "browser",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "SelectionType",
              "typedoc": "SelectionType",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "CURRENT",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "browser: SelectionType | str = CURRENT"
      }
    ],
    "doc": "<p>Switches the active BrowserContext to another open context.</p>\n<p>Returns a stable identifier for the previous context. See <a href=\"#Browser%2C%20Context%20and%20Page\" class=\"name\">Browser, Context and Page</a> for more information about Context and related concepts.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>id</code></td>\n<td>The id of the context to switch to. Example: <code>context=525d8e5b-3c4e-4baa-bfd4-dfdbc6e86089</code>. A context id is returned by <a href=\"#New%20Context\" class=\"name\">New Context</a> when it is started or can be fetched from the browser catalog when returned by <a href=\"#Get%20Browser%20Catalog\" class=\"name\">Get Browser Catalog</a>.</td>\n</tr>\n<tr>\n<td><code>browser</code></td>\n<td>The browser in which to search for that context. <code>CURRENT</code> for the currently active browser, <code>ALL</code> to search in all open browsers or the id of the browser where to switch context.</td>\n</tr>\n</table>\n<p>Example:</p>\n<pre>\n${first_context} =     <a href=\"#New%20Context\" class=\"name\">New Context</a>\n<a href=\"#New%20Page\" class=\"name\">New Page</a>             ${URL1}\n${second_context} =    <a href=\"#New%20Context\" class=\"name\">New Context</a>\n<a href=\"#New%20Page\" class=\"name\">New Page</a>             ${URL2}\n<a href=\"#Switch%20Context\" class=\"name\">Switch Context</a>       ${first_context}    # Switches back to first context and page.\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4335\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Switch%20Context"
  },
  {
    "name": "Switch Page",
    "library": "Browser",
    "args": [
      {
        "name": "id",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "NewPageDetails",
              "typedoc": "NewPageDetails",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "id: NewPageDetails | str"
      },
      {
        "name": "context",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "SelectionType",
              "typedoc": "SelectionType",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "CURRENT",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "context: SelectionType | str = CURRENT"
      },
      {
        "name": "browser",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "SelectionType",
              "typedoc": "SelectionType",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "CURRENT",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "browser: SelectionType | str = CURRENT"
      }
    ],
    "doc": "<p>Switches the active browser page to another open page by <code>id</code> or <code>NEW</code>.</p>\n<p>Returns a stable identifier <code>id</code> for the previous page. See <a href=\"#Browser%2C%20Context%20and%20Page\" class=\"name\">Browser, Context and Page</a> for more information about Page and related concepts.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>id</code></td>\n<td>The id or alias of the page to switch to. Example: <code>page=8baf2991-5eaf-444d-a318-8045f914e96a</code> or <code>NEW</code>. Can be a string or a dictionary returned by <a href=\"#New%20Page\" class=\"name\">New Page</a> Keyword. A page id can be fetched from the browser catalog when returned by <a href=\"#Get%20Browser%20Catalog\" class=\"name\">Get Browser Catalog</a>. <code>NEW</code> can be used to switch to a pop-up that just has been opened by the webpage, <code>CURRENT</code> can be used to switch to the active page of a different context or browser, identified by their id.</td>\n</tr>\n<tr>\n<td><code>context</code></td>\n<td>The context in which to search for that page. <code>CURRENT</code> for the currently active context, <code>ALL</code> to search in all open contexts or the id of the context where to switch page.</td>\n</tr>\n<tr>\n<td><code>browser</code></td>\n<td>The browser in which to search for that page. <code>CURRENT</code> for the currently active browser, <code>ALL</code> to search in all open browsers or the id of the browser where to switch page.</td>\n</tr>\n</table>\n<p><code>New</code> may timeout if no new pages exists before library timeout.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#Click\" class=\"name\">Click</a>           button#pops_up    # Open new page\n${previous} =    <a href=\"#Switch%20Page\" class=\"name\">Switch Page</a>      NEW\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4336\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Switch%20Page"
  },
  {
    "name": "Take Screenshot",
    "library": "Browser",
    "args": [
      {
        "name": "filename",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "robotframework-browser-screenshot-{index}",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "filename: str | None = robotframework-browser-screenshot-{index}"
      },
      {
        "name": "selector",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "selector: str | None = None"
      },
      {
        "name": "",
        "type": null,
        "defaultValue": null,
        "kind": "NAMED_ONLY_MARKER",
        "required": false,
        "repr": "*"
      },
      {
        "name": "crop",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "BoundingBox",
              "typedoc": "BoundingBox",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "crop: BoundingBox | None = None"
      },
      {
        "name": "disableAnimations",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "disableAnimations: bool = False"
      },
      {
        "name": "fileType",
        "type": {
          "name": "ScreenshotFileTypes",
          "typedoc": "ScreenshotFileTypes",
          "nested": [],
          "union": false
        },
        "defaultValue": "png",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "fileType: ScreenshotFileTypes = png"
      },
      {
        "name": "fullPage",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "fullPage: bool = False"
      },
      {
        "name": "highlight_selector",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "highlight_selector: str | None = None"
      },
      {
        "name": "log_screenshot",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "log_screenshot: bool = True"
      },
      {
        "name": "mask",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "list",
              "typedoc": "list",
              "nested": [
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "mask: list[str] | str = "
      },
      {
        "name": "maskColor",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "maskColor: str | None = None"
      },
      {
        "name": "omitBackground",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "omitBackground: bool = False"
      },
      {
        "name": "quality",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "quality: int | None = None"
      },
      {
        "name": "scale",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Scale",
              "typedoc": "Scale",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "scale: Scale | None = None"
      },
      {
        "name": "return_as",
        "type": {
          "name": "ScreenshotReturnType",
          "typedoc": "ScreenshotReturnType",
          "nested": [],
          "union": false
        },
        "defaultValue": "path_string",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "return_as: ScreenshotReturnType = path_string"
      },
      {
        "name": "timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "timeout: timedelta | None = None"
      }
    ],
    "doc": "<p>Takes a screenshot of the current window or element and saves it to disk.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>Filename into which to save. The file will be saved into the robot framework  ${OUTPUTDIR}/browser/screenshot directory by default, but it can be overwritten by providing custom path or filename. String <code>{index}</code> in filename will be replaced with a rolling number. Use this to not override filenames. If filename equals to UUID, then filename is created by Python uuid; <a href=\"https://docs.python.org/3/library/uuid.html\">https://docs.python.org/3/library/uuid.html</a>. If filename equals to EMBED (case insensitive) or ${NONE},  then screenshot is embedded as Base64 image to the log.html. The image is saved temporally to the disk and warning is displayed if removing the temporary file fails. The ${OUTPUTDIR}/browser/ is removed at the first suite startup.</td>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Take a screenshot of the element matched by selector. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors. If not provided take a screenshot of current viewport.</td>\n</tr>\n<tr>\n<td><code>crop</code></td>\n<td>Crops the taken screenshot to the given box. It takes same dictionary as returned from <a href=\"#Get%20BoundingBox\" class=\"name\">Get BoundingBox</a>. Cropping only works on page screenshot, so if no selector is given.</td>\n</tr>\n<tr>\n<td><code>disableAnimations</code></td>\n<td>When set to <code>True</code>, stops CSS animations, CSS transitions and Web Animations. Animations get different treatment depending on their duration:  - finite animations are fast-forwarded to completion, so they'll fire transitionend event.  - infinite animations are canceled to initial state, and then played over after the screenshot.</td>\n</tr>\n<tr>\n<td><code>fileType</code></td>\n<td><code>png</code> or <code>jpeg</code> Specify screenshot type, defaults to <code>png</code> .</td>\n</tr>\n<tr>\n<td><code>fullPage</code></td>\n<td>When True, takes a screenshot of the full scrollable page, instead of the currently visible viewport. Defaults to False.</td>\n</tr>\n<tr>\n<td><code>highlight_selector</code></td>\n<td>Highlights elements while taking the screenshot. Highlight method is <code>playwright</code>. This highlighting also automatically happens if the Robot Framework variable <code>${ROBOT_FRAMEWORK_BROWSER_FAILING_SELECTOR}</code> is set to a selector string and is available on page. This is the case if <code>highlight_on_failure</code> has been set to <code>True</code> when importing Browser library.</td>\n</tr>\n<tr>\n<td><code>log_screenshot</code></td>\n<td>When set to <code>False</code> the screenshot is taken but not logged into log.html.</td>\n</tr>\n<tr>\n<td><code>mask</code></td>\n<td>Specify selectors that should be masked when the screenshot is taken. Masked elements will be overlayed with a pink box <code>#FF00FF</code> that completely covers its bounding box. Argument can take a single selector string or a list of selector strings if multiple different elements should be masked.</td>\n</tr>\n<tr>\n<td><code>maskColor</code></td>\n<td>Specify the color of the overlay box for masked elements, in CSS color format. Default color is pink #FF00FF.</td>\n</tr>\n<tr>\n<td><code>omitBackground</code></td>\n<td>Hides default white background and allows capturing screenshots with transparency. Not applicable to jpeg images.</td>\n</tr>\n<tr>\n<td><code>quality</code></td>\n<td>The quality of the image, between 0-100. Not applicable to png images.</td>\n</tr>\n<tr>\n<td><code>scale</code></td>\n<td><code>css</code> or <code>device</code>. <code>css</code> will reduce the image size and <code>device</code> keeps image in original size. Defaults to <code>device</code>.</td>\n</tr>\n<tr>\n<td><code>return_as</code></td>\n<td>Defines what this keyword returns. Possible values are documented in <a href=\"#type-ScreenshotReturnType\" class=\"name\">ScreenshotReturnType</a>. It can be either a path to the screenshot file as string or Path object, or the image data as bytes or base64 encoded string.</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td>Maximum time how long taking screenshot can last, defaults to library timeout. Supports Robot Framework time format, like 10s or 1 min, pass 0 to disable timeout. The default value can be changed by using the <a href=\"#Set%20Browser%20Timeout\" class=\"name\">Set Browser Timeout</a> keyword.</td>\n</tr>\n</table>\n<p>Keyword uses strict mode if selector is defined. See <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p>Example</p>\n<pre>\n<a href=\"#Take%20Screenshot\" class=\"name\">Take Screenshot</a>                                 # Takes screenshot from page with default filename\n<a href=\"#Take%20Screenshot\" class=\"name\">Take Screenshot</a>   selector=id=username_field    # Captures element in image\n# Takes screenshot with jpeg extension, defines image quality and timeout how long taking screenshot should last\n<a href=\"#Take%20Screenshot\" class=\"name\">Take Screenshot</a>   fullPage=True    fileType=jpeg    quality=50    timeout=10s\n<a href=\"#Take%20Screenshot\" class=\"name\">Take Screenshot</a>   EMBED                         # Screenshot is embedded as Base64 image to the log.html.\n<a href=\"#Take%20Screenshot\" class=\"name\">Take Screenshot</a>   UUID                          # Takes screenshot from page with filename generated by: <a href=\"https://docs.python.org/3/library/uuid.html\">https://docs.python.org/3/library/uuid.html</a>.\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4337\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Take%20Screenshot"
  },
  {
    "name": "Tap",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      },
      {
        "name": "modifiers",
        "type": {
          "name": "KeyboardModifier",
          "typedoc": "KeyboardModifier",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*modifiers: KeyboardModifier"
      },
      {
        "name": "force",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "force: bool = False"
      },
      {
        "name": "noWaitAfter",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "noWaitAfter: bool = False"
      },
      {
        "name": "position_x",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "position_x: int | None = None"
      },
      {
        "name": "position_y",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "position_y: int | None = None"
      },
      {
        "name": "trial",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "trial: bool = False"
      }
    ],
    "doc": "<p>Simulates tap on the element found by <code>selector</code>.</p>\n<p>Requires that the <code>hasTouch</code> option of the <a href=\"#New%20Context\" class=\"name\">New Context</a> be set to true. This method taps the element by performing the following steps:</p>\n<ul>\n<li>Wait for actionability checks on the element, unless force option is set.</li>\n<li>Scroll the element into view if needed.</li>\n<li>Use page.touchscreen to tap the center of the element, or the specified position.</li>\n<li>Wait for initiated navigations to either succeed or fail, unless noWaitAfter option is set.</li>\n</ul>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector element to click. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n<tr>\n<td><code>*modifiers</code></td>\n<td>Modifier keys to press. Ensures that only these modifiers are pressed during the click, and then restores current modifiers back. If not specified, currently pressed modifiers are used. Modifiers can be specified in any order, and multiple modifiers can be specified. Valid modifier keys are <code>Control</code>, <code>Alt</code>, <code>Shift</code> and <code>Meta</code>.</td>\n</tr>\n<tr>\n<td><code>force</code></td>\n<td>Whether to bypass the actionability checks. Defaults to false.</td>\n</tr>\n<tr>\n<td><code>noWaitAfter</code></td>\n<td>Deprecated. This option has no effect. Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to <code>False</code>.</td>\n</tr>\n<tr>\n<td><code>position_x</code> <code>position_y</code></td>\n<td>A point to click relative to the top-left corner of element bounding-box. Only positive values within the bounding-box are allowed. If not specified, clicks to some visible point of the element.</td>\n</tr>\n<tr>\n<td><code>trial</code></td>\n<td>When set, this method only performs the actionability checks and skips the action. Defaults to <code>False</code>.</td>\n</tr>\n</table>\n<p>Example:</p>\n<pre>\nNew Context    hasTouch=${False}\nNew Page    ${URL}\nTap    css=input#login_button\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//5939\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Tap"
  },
  {
    "name": "Type Secret",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      },
      {
        "name": "secret",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "secret: str"
      },
      {
        "name": "delay",
        "type": {
          "name": "timedelta",
          "typedoc": "timedelta",
          "nested": [],
          "union": false
        },
        "defaultValue": "0:00:00",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "delay: timedelta = 0:00:00"
      },
      {
        "name": "clear",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "clear: bool = True"
      }
    ],
    "doc": "<p>Types the given secret from <code>variable_name</code> into the text field found by <code>selector</code>.</p>\n<p>This keyword does not log secret in Robot Framework logs, if keyword resolves the variable value internally. If <code>enable_playwright_debug</code> is enabled in the library import, secret will be always visible as plain text in the playwright debug logs, regardless of the Robot Framework log level.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector of the text field. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n<tr>\n<td><code>secret</code></td>\n<td>Environment variable name with % prefix or a local variable with $ prefix that has the secret text value. Variable names can be used with and without curly braces.</td>\n</tr>\n<tr>\n<td><code>delay</code></td>\n<td>Delay between the single key strokes. It may be either a number or a Robot Framework time string. Time strings are fully explained in an appendix of Robot Framework User Guide. Defaults to <code>0 ms</code>. Example: <code>50 ms</code></td>\n</tr>\n<tr>\n<td><code>clear</code></td>\n<td>Set to false, if the field shall not be cleared before typing. Defaults to true.</td>\n</tr>\n</table>\n<p>This keyword does not log secret in Robot Framework logs, when keyword resolves the <code>secret</code> variable internally. When <code>secret</code> variable is prefixed with <span class=\"name\">$</span>, without the curly braces, library will resolve the corresponding Robot Framework variable.</p>\n<p>If <code>secret</code> variable is prefixed with <span class=\"name\">%</span>, library will resolve corresponding environment variable. Example <span class=\"name\">$Password</span>` will resolve to <code>${Password}</code> Robot Framework variable. Also <code>%ENV_PWD</code> will resolve to <code>%{ENV_PWD}</code> environment variable.</p>\n<p><b>Using normal Robot Framework variables like <code>${password}</code> will not work!</b></p>\n<p><b>Normal plain text will not work.</b> If you want to use plain text, use <a href=\"#Type%20Text\" class=\"name\">Type Text</a> keyword instead.</p>\n<p>This keyword will also work with a give cryptographic cipher text, that has been encrypted by Crypto library. See <a href=\"https://github.com/Snooz82/robotframework-crypto\">Crypto Library</a> for more details.</p>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p>See <a href=\"#Type%20Text\" class=\"name\">Type Text</a> for details.</p>\n<p>Example</p>\n<pre>\n<a href=\"#Type%20Secret\" class=\"name\">Type Secret</a>    input#username_field    $username      # Keyword resolves ${username} variable value from Robot Framework variables\n<a href=\"#Type%20Secret\" class=\"name\">Type Secret</a>    input#username_field    %username      # Keyword resolves $USERNAME/%USERNAME% variable value from environment variables\n<a href=\"#Type%20Secret\" class=\"name\">Type Secret</a>    input#username_field    ${username}    # Robot Framework resolves the variable value, but secrect can leak to Robot framework output files.\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4338\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Type%20Secret"
  },
  {
    "name": "Type Text",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      },
      {
        "name": "txt",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "txt: str"
      },
      {
        "name": "delay",
        "type": {
          "name": "timedelta",
          "typedoc": "timedelta",
          "nested": [],
          "union": false
        },
        "defaultValue": "0:00:00",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "delay: timedelta = 0:00:00"
      },
      {
        "name": "clear",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "clear: bool = True"
      }
    ],
    "doc": "<p>Types the given <code>txt</code> into the text field found by <code>selector</code>.</p>\n<p>Sends a <code>keydown</code>, <code>keypress/input</code>, and <code>keyup</code> event for each character in the text.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector of the text field. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n<tr>\n<td><code>txt</code></td>\n<td>Text for the text field.</td>\n</tr>\n<tr>\n<td><code>delay</code></td>\n<td>Delay between the single key strokes. It may be either a number or a Robot Framework time string. Time strings are fully explained in an appendix of Robot Framework User Guide. Defaults to <code>0 ms</code>. Example: <code>50 ms</code></td>\n</tr>\n<tr>\n<td><code>clear</code></td>\n<td>Set to false, if the field shall not be cleared before typing. Defaults to true.</td>\n</tr>\n</table>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p>See <a href=\"#Fill%20Text\" class=\"name\">Fill Text</a> for direct filling of the full text at once.</p>\n<p>Example</p>\n<pre>\n<a href=\"#Type%20Text\" class=\"name\">Type Text</a>    input#username_field    user\n<a href=\"#Type%20Text\" class=\"name\">Type Text</a>    input#username_field    user    delay=10 ms    clear=No\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4339\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Type%20Text"
  },
  {
    "name": "Uncheck Checkbox",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      },
      {
        "name": "force",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "force: bool = False"
      }
    ],
    "doc": "<p>Unchecks the checkbox found by <code>selector</code>.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n<td></td>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector of the checkbox. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n<td></td>\n</tr>\n<tr>\n<td><code>force</code></td>\n<td>Set to True to skip Playwright's [<a href=\"https://playwright.dev/docs/actionability\">https://playwright.dev/docs/actionability</a></td>\n<td>Actionability checks].</td>\n</tr>\n</table>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p>Does nothing if the element is not checked/selected.</p>\n<p><a href=\"https://forum.robotframework.org/t//4340\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Uncheck%20Checkbox"
  },
  {
    "name": "Upload File By Selector",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      },
      {
        "name": "path",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "PathLike",
              "typedoc": "Path",
              "nested": [],
              "union": false
            },
            {
              "name": "FileUploadBuffer",
              "typedoc": "FileUploadBuffer",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path: PathLike | FileUploadBuffer"
      },
      {
        "name": "extra_paths",
        "type": {
          "name": "PathLike",
          "typedoc": "Path",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*extra_paths: PathLike"
      }
    ],
    "doc": "<p>Uploads file from <code>path</code> to file input element matched by selector.</p>\n<p>Fails if upload is not done before library timeout. Therefor it may be necessary to increase the timeout with <a href=\"#Set%20Browser%20Timeout\" class=\"name\">Set Browser Timeout</a>. It is possible to upload multiple files or folder by defining additional paths or folders. in <span class=\"name\">extra_paths</span>.</p>\n<p>If path is a directory, it will be uploaded all files from the directory. Subdirectories are not included. It is possible to upload files and directories with the same keyword.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Identifies the file input element.</td>\n</tr>\n<tr>\n<td><code>path</code></td>\n<td>Path to the file or folder to be uploaded. Path can  FileUploadBuffer dictionary</td>\n</tr>\n<tr>\n<td><code>extra_paths</code></td>\n<td>Additional paths to files or folders to be uploaded.</td>\n</tr>\n</table>\n<p>if <code>path</code> is  <a href=\"#type-FileUploadBuffer\" class=\"name\">FileUploadBuffer</a> dictionary, then structure should be:</p>\n<pre>\n{\n  'name': <span class=\"name\">str</span>,\n  'mimeType': <span class=\"name\">str</span>,\n  'buffer': <span class=\"name\">str</span>\n}\n</pre>\n<p>If <code>path</code> argument is <a href=\"#type-FileUploadBuffer\" class=\"name\">FileUploadBuffer</a>, then <code>extra_paths</code> argument is not supported and using it will raise an error.</p>\n<p>Upload single file example:</p>\n<pre>\n<a href=\"#Upload%20File%20By%20Selector\" class=\"name\">Upload File By Selector</a>    //input[@type='file']    big_file.zip\n</pre>\n<p>Upload many files example:</p>\n<pre>\n<a href=\"#Upload%20File%20By%20Selector\" class=\"name\">Upload File By Selector</a>    //input[@type='file']    file1.zip    file2.zip    file3.zip\n</pre>\n<p>Upload folder example:</p>\n<pre>\n<a href=\"#Upload%20File%20By%20Selector\" class=\"name\">Upload File By Selector</a>    //input[@type='file']    /path/to/folder\n</pre>\n<p>Upload as buffer example:</p>\n<pre>\n${text} =    Get File    /path/to/file    # Read file from disk\nVAR    &amp;{buffer}    name=not_here.txt    mimeType=text/plain    buffer=${text}    # Create buffer dictionary\n<a href=\"#Upload%20File%20By%20Selector\" class=\"name\">Upload File By Selector</a>    id=file_chooser    ${buffer}    # Upload buffer\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4341\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Upload%20File%20By%20Selector"
  },
  {
    "name": "Wait For",
    "library": "Browser",
    "args": [
      {
        "name": "promises",
        "type": {
          "name": "Future",
          "typedoc": null,
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*promises: Future"
      }
    ],
    "doc": "<p>Waits for promises to finish and returns results from them.</p>\n<p>Returns one result if one promise waited. Otherwise returns an array of results. If one fails, then this keyword will fail.</p>\n<p>See <a href=\"#Promise%20To\" class=\"name\">Promise To</a> for more information about promises.</p>\n<p>For general waiting of elements please see <a href=\"#Implicit%20waiting\" class=\"name\">Implicit waiting</a>.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>promises</code></td>\n<td>Promises to wait for.</td>\n</tr>\n</table>\n<p>Example:</p>\n<pre>\n${promise}=    <a href=\"#Promise%20To\" class=\"name\">Promise To</a>            <a href=\"#Wait%20For%20Response\" class=\"name\">Wait For Response</a>     matcher=     timeout=3\n<a href=\"#Click\" class=\"name\">Click</a>         \\#delayed_request\n${body}=       <a href=\"#Wait%20For\" class=\"name\">Wait For</a>              ${promise}\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4342\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Wait%20For"
  },
  {
    "name": "Wait For Alert",
    "library": "Browser",
    "args": [
      {
        "name": "action",
        "type": {
          "name": "DialogAction",
          "typedoc": "DialogAction",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "action: DialogAction"
      },
      {
        "name": "prompt_input",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "prompt_input: str = "
      },
      {
        "name": "text",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "text: str | None = None"
      },
      {
        "name": "timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout: timedelta | None = None"
      }
    ],
    "doc": "<p>Returns a promise to wait for next dialog on page, handles it with <code>action</code> and optionally verifies the dialogs text.</p>\n<p>Dialog/alert can be any of alert, beforeunload, confirm or prompt.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>action</code></td>\n<td>How to handle the alert. Can be <code>accept</code> or <code>dismiss</code>.</td>\n</tr>\n<tr>\n<td><code>prompt_input</code></td>\n<td>The value to enter into prompt. Only valid if <code>action</code> argument equals <code>accept</code>. Defaults to empty string.</td>\n</tr>\n<tr>\n<td><code>text</code></td>\n<td>Optional text to verify the dialogs text.</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td>Optional timeout in Robot Framework time format.</td>\n</tr>\n</table>\n<p>The main difference between this keyword and <a href=\"#Handle%20Future%20Dialogs\" class=\"name\">Handle Future Dialogs</a> is that <a href=\"#Handle%20Future%20Dialogs\" class=\"name\">Handle Future Dialogs</a> keyword is automatically set as promise. But this keyword must be called as argument to <a href=\"#Promise%20To\" class=\"name\">Promise To</a> keyword. Also this keyword can optionally verify the dialogue text and return it. If <code>text</code> is argument <code>None</code> or is not set, dialogue text is not verified.</p>\n<p>Example with returning text:</p>\n<pre>\n${promise} =         <a href=\"#Promise%20To\" class=\"name\">Promise To</a>    <a href=\"#Wait%20For%20Alert\" class=\"name\">Wait For Alert</a>    action=accept\n<a href=\"#Click\" class=\"name\">Click</a>               id=alerts\n${text} =            <a href=\"#Wait%20For\" class=\"name\">Wait For</a>      ${promise}\nShould Be Equal      ${text}         Am an alert\n</pre>\n<p>Example with text verify:</p>\n<pre>\n${promise} =       <a href=\"#Promise%20To\" class=\"name\">Promise To</a>    Wait For Alert    action=accept    text=Am an alert\nClick              id=alerts\n${text} =          <a href=\"#Wait%20For\" class=\"name\">Wait For</a>      ${promise}\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4343\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Wait%20For%20Alert"
  },
  {
    "name": "Wait For Alerts",
    "library": "Browser",
    "args": [
      {
        "name": "actions",
        "type": {
          "name": "list",
          "typedoc": "list",
          "nested": [
            {
              "name": "DialogAction",
              "typedoc": "DialogAction",
              "nested": [],
              "union": false
            }
          ],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "actions: list[DialogAction]"
      },
      {
        "name": "prompt_inputs",
        "type": {
          "name": "list",
          "typedoc": "list",
          "nested": [
            {
              "name": "Union",
              "typedoc": null,
              "nested": [
                {
                  "name": "None",
                  "typedoc": "None",
                  "nested": [],
                  "union": false
                },
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                }
              ],
              "union": true
            }
          ],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "prompt_inputs: list[None | str]"
      },
      {
        "name": "texts",
        "type": {
          "name": "list",
          "typedoc": "list",
          "nested": [
            {
              "name": "Union",
              "typedoc": null,
              "nested": [
                {
                  "name": "None",
                  "typedoc": "None",
                  "nested": [],
                  "union": false
                },
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                }
              ],
              "union": true
            }
          ],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "texts: list[None | str]"
      },
      {
        "name": "timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout: timedelta | None = None"
      }
    ],
    "doc": "<p>Returns a promise to wait for multiple dialog on a page.</p>\n<p>Handles each alert/dialog with <code>actions</code> and optionally verifies the dialogs texts. Dialog/alert can be any of alert, beforeunload, confirm or prompt.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>actions</code></td>\n<td>List of how to handle the alerts. Can be <code>accept</code> or <code>dismiss</code>.</td>\n</tr>\n<tr>\n<td><code>prompt_inputs</code></td>\n<td>List of the values to enter into prompt. Only valid if <code>action</code> argument equals <code>accept</code>. Defaults to empty string. IF input not preset, use None</td>\n</tr>\n<tr>\n<td><code>texts</code></td>\n<td>List of optional text to verify the dialogs text. Use None if text verification should be disabled.</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td>Optional timeout in Robot Framework time format.</td>\n</tr>\n</table>\n<p>There must be equal amount of items in <code>actions</code>, <code>prompt_inputs</code> and <code>texts</code>  lists. Use None if texts and/or prompt_inputs are not needed.</p>\n<p>This keyword works in same way as <a href=\"#Wait%20For%20Alert\" class=\"name\">Wait For Alert</a> but can handle multiple alerts with one promise. Lie <a href=\"#Wait%20For%20Alert\" class=\"name\">Wait For Alert</a> keyword, this keyword must be called as argument to <a href=\"#Promise%20To\" class=\"name\">Promise To</a> keyword.</p>\n<p>Example to handle two alerts, first one is accepted and second one is dismissed:</p>\n<pre>\n${promise} =    Promise To\n...    Wait For Alerts\n...    [\"accept\", \"dismiss\"]\n...    [None, None]\n...    [None, None]\nClick    id=alerts\n${texts} =    Wait For    ${promise}\n</pre>\n<p>Example to handle confirm and prompt alert. Example assumes that the first is a confirm and second one is prompt:</p>\n<pre>\n${promise} =    Promise To\n...    Wait For Alerts\n...    [\"dismiss\", \"accept\"]\n...    [None, \"I am a prompt\"]\n...    [\"First alert accepted?\", None]\nClick    id=confirmAndPrompt\n${texts} =    Wait For    ${promise}\n</pre>\n<p><a href=\"https://forum.robotframework.org/t/7887\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Wait%20For%20Alerts"
  },
  {
    "name": "Wait For All Promises",
    "library": "Browser",
    "args": [],
    "doc": "<p>Waits for all promises to finish.</p>\n<p>If one promises fails, then this keyword will fail.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#Promise%20To\" class=\"name\">Promise To</a>               Wait For Response     matcher=     timeout=3\n<a href=\"#Click\" class=\"name\">Click</a>                    \\#delayed_request\n<a href=\"#Wait%20For%20All%20Promises\" class=\"name\">Wait For All Promises</a>\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4344\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Wait%20For%20All%20Promises"
  },
  {
    "name": "Wait For Condition",
    "library": "Browser",
    "args": [
      {
        "name": "condition",
        "type": {
          "name": "ConditionInputs",
          "typedoc": "ConditionInputs",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "condition: ConditionInputs"
      },
      {
        "name": "args",
        "type": {
          "name": "Any",
          "typedoc": "Any",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args: Any"
      },
      {
        "name": "timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "timeout: timedelta | None = None"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Waits for a condition, defined with Browser getter keywords to become True.</p>\n<p>This Keyword is basically just a wrapper around our assertion keywords, but with a timeout. It can be used to wait for anything that also can be asserted with our keywords.</p>\n<p>In comparison to Robot Frameworks <span class=\"name\">Wait Until Keywords Succeeds</span> this keyword is more readable and easier to use but is limited to Browser libraries assertion keywords.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>condition</code></td>\n<td>A condition, defined with Browser getter keywords, without the word <code>Get</code>.</td>\n</tr>\n<tr>\n<td><code>*args</code></td>\n<td>Arguments to pass to the condition keyword.</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td>Timeout to wait for the condition to become True. Uses default timeout of the library if not set. As the other assertion keywords this timeout only influences the time the assertion is retried. The browser timeout is used to wait for the element to be found.</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>Overrides the default error message.</td>\n</tr>\n</table>\n<p>The easiest way to use this keyword is first starting with an assertion keyword with assertion like: <a href=\"#Get%20Text\" class=\"name\">Get Text</a></p>\n<p>Start:</p>\n<pre>\n<a href=\"#Get%20Text\" class=\"name\">Get Text</a>    id=status_bar   contains    Done\n</pre>\n<p>Then you replace the word <span class=\"name\">Get</span> with <a href=\"#Wait%20For%20Condition\" class=\"name\">Wait For Condition    </a> and if necessary add the timeout argument.</p>\n<p>End:</p>\n<pre>\n<a href=\"#Wait%20For%20Condition\" class=\"name\">Wait For Condition</a>    Text    id=status_bar   contains    Done\n</pre>\n<p>Example usage:</p>\n<pre>\n<a href=\"#Wait%20For%20Condition\" class=\"name\">Wait For Condition</a>    Element States    id=cdk-overlay-0    ==    detached\n<a href=\"#Wait%20For%20Condition\" class=\"name\">Wait For Condition</a>    Element States     //h1    contains    visible    editable    enabled    timeout=2 s\n<a href=\"#Wait%20For%20Condition\" class=\"name\">Wait For Condition</a>    Title    should start with    Robot\n<a href=\"#Wait%20For%20Condition\" class=\"name\">Wait For Condition</a>    Url    should end with    robotframework.org\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//5269\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Wait%20For%20Condition"
  },
  {
    "name": "Wait For Elements State",
    "library": "Browser",
    "args": [
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selector: str"
      },
      {
        "name": "state",
        "type": {
          "name": "ElementState",
          "typedoc": "ElementState",
          "nested": [],
          "union": false
        },
        "defaultValue": "visible",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "state: ElementState = visible"
      },
      {
        "name": "timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout: timedelta | None = None"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Waits for the element found by <code>selector</code> to satisfy state option.</p>\n<p>Note that Browser library has <a href=\"#Implicit%20waiting\" class=\"name\">Implicit waiting</a> mechanisms. Depending on the situation you might not need to use <a href=\"#Wait%20For%20Elements%20State\" class=\"name\">Wait for Elements State</a>.</p>\n<p>State options could be either appear/disappear from dom, or become visible/hidden. If at the moment of calling the keyword, the selector already satisfies the condition, the keyword will return immediately.</p>\n<p>If the selector doesn't satisfy the condition within the timeout the keyword will FAIL.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector of the corresponding object. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n<tr>\n<td><code>state</code></td>\n<td>See <a href=\"#type-ElementState\" class=\"name\">ElementState</a> for explanation.</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td>uses default timeout from library if not set.</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>overrides the default error message. The <code>message</code> argument accepts <span class=\"name\">{selector}</span>, <span class=\"name\">{function}</span>, and <span class=\"name\">{timeout}</span> <a href=\"https://docs.python.org/3/library/stdtypes.html#str.format\">format</a> options. The <span class=\"name\">{function}</span> formatter is same <code>state</code> argument value.</td>\n</tr>\n</table>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#Wait%20For%20Elements%20State\" class=\"name\">Wait For Elements State</a>    //h1    visible    timeout=2 s\n<a href=\"#Wait%20For%20Elements%20State\" class=\"name\">Wait For Elements State</a>    //hi    focused    1s\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4345\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Wait%20For%20Elements%20State"
  },
  {
    "name": "Wait For Function",
    "library": "Browser",
    "args": [
      {
        "name": "function",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "function: str"
      },
      {
        "name": "selector",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "selector: str = "
      },
      {
        "name": "polling",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "raf",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "polling: str | timedelta = raf"
      },
      {
        "name": "timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout: timedelta | None = None"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Polls JavaScript expression or function in browser until it returns a (JavaScript) truthy value.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>function</code></td>\n<td>A valid javascript function or a javascript function body. For example <code>() =&gt; true</code> and <code>true</code> will behave similarly.</td>\n</tr>\n<tr>\n<td><code>selector</code></td>\n<td>Selector to resolve and pass to the JavaScript function. This will be the first argument the function receives. If given a selector a function is necessary, with an argument to capture the elementhandle. For example <code>(element) =&gt; document.activeElement === element</code> See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</td>\n</tr>\n<tr>\n<td><code>polling</code></td>\n<td>Default polling value of \"raf\" polls in a callback for <code>requestAnimationFrame</code>. Any other value for polling will be parsed as a robot framework time for interval between polls.</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td>Uses default timeout of the library if not set.</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>overrides the default error message. The <code>message</code> argument accepts <span class=\"name\">{selector}</span>, <span class=\"name\">{function}</span>, and <span class=\"name\">{timeout}</span> <a href=\"https://docs.python.org/3/library/stdtypes.html#str.format\">format</a> options.</td>\n</tr>\n</table>\n<p>Keyword uses strict mode, see <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> for more details about strict mode.</p>\n<p>Example usage:</p>\n<pre>\n${promise}      <a href=\"#Promise%20To\" class=\"name\">Promise To</a>      <a href=\"#Wait%20For%20Function\" class=\"name\">Wait For Function</a>    element =&gt; element.style.width==\"100%\"    selector=\\#progress_bar    timeout=4s\n<a href=\"#Click\" class=\"name\">Click</a>         \\#progress_bar\n<a href=\"#Wait%20For\" class=\"name\">Wait For</a>      ${promise}\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4346\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Wait%20For%20Function"
  },
  {
    "name": "Wait For Load State",
    "library": "Browser",
    "args": [
      {
        "name": "state",
        "type": {
          "name": "PageLoadStates",
          "typedoc": "PageLoadStates",
          "nested": [],
          "union": false
        },
        "defaultValue": "load",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "state: PageLoadStates = load"
      },
      {
        "name": "timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout: timedelta | None = None"
      }
    ],
    "doc": "<p>Waits that the page reaches the required load state.</p>\n<p>This resolves when the page reaches a required load state, load by default. The navigation must have been committed when this method is called. If current document has already reached the required state, resolves immediately.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>state</code></td>\n<td>State to wait for, defaults to <span class=\"name\">load</span>. Possible values are <span class=\"name\">load|domcontentloaded|networkidle</span></td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td>Timeout supports Robot Framework time format. Uses browser timeout if not set.</td>\n</tr>\n</table>\n<p>If the state has been already reached while loading current document, the underlying Playwright will resolve immediately. Can be one of:</p>\n<pre>\n'load' - wait for the load event to be fired.\n'domcontentloaded' - wait for the DOMContentLoaded event to be fired.\n'networkidle' - DISCOURAGED wait until there are no network connections for at least 500 ms.\n</pre>\n<p>Example:</p>\n<pre>\n<a href=\"#Go%20To\" class=\"name\">Go To</a>                         ${URL}\n<a href=\"#Wait%20For%20Load%20State\" class=\"name\">Wait For Load State</a>    domcontentloaded    timeout=3s\n</pre>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Wait%20For%20Load%20State"
  },
  {
    "name": "Wait For Navigation",
    "library": "Browser",
    "args": [
      {
        "name": "url",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "RegExp",
              "typedoc": "RegExp",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "url: str | RegExp"
      },
      {
        "name": "timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout: timedelta | None = None"
      },
      {
        "name": "wait_until",
        "type": {
          "name": "PageLoadStates",
          "typedoc": "PageLoadStates",
          "nested": [],
          "union": false
        },
        "defaultValue": "load",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "wait_until: PageLoadStates = load"
      }
    ],
    "doc": "<p>Waits until page has navigated to given <code>url</code>.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>url</code></td>\n<td>Expected navigation target address either the exact match or a JavaScript-like regex wrapped in <code>/</code> symbols.</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td>Timeout supports Robot Framework time format. Uses default timeout if not set.</td>\n</tr>\n<tr>\n<td><code>wait_until</code></td>\n<td>When to consider operation succeeded, defaults to load. Events can be either: <code>domcontentloaded</code> - consider operation to be finished when the DOMContentLoaded event is fired. <code>load</code> - consider operation to be finished when the load event is fired. <code>networkidle</code> - consider operation to be finished when there are no network connections for at least 500 ms. <code>commit</code> - consider operation to be finished when network response is received and the document started loading.</td>\n</tr>\n</table>\n<p>Keyword works only when page is loaded and does not work if URL fragment changes. Example if <a href=\"https://marketsquare.github.io/robotframework-browser/Browser.html\">https://marketsquare.github.io/robotframework-browser/Browser.html</a> changes to <a href=\"https://marketsquare.github.io/robotframework-browser/Browser.html#Wait%20For%20Navigation\">https://marketsquare.github.io/robotframework-browser/Browser.html#Wait%20For%20Navigation</a> keyword will fail.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#Go%20To\" class=\"name\">Go To</a>                  ${ROOT_URL}/redirector.html\n<a href=\"#Wait%20For%20Navigation\" class=\"name\">Wait for navigation</a>    ${ROOT_URL}/posted.html    wait_until=${wait_until}\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4347\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Wait%20For%20Navigation"
  },
  {
    "name": "Wait For Request",
    "library": "Browser",
    "args": [
      {
        "name": "matcher",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "RegExp",
              "typedoc": "RegExp",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "matcher: str | RegExp = "
      },
      {
        "name": "timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout: timedelta | None = None"
      }
    ],
    "doc": "<p>Waits for request matching matcher to be made.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>matcher</code></td>\n<td>Request URL matcher. Can be a string (Glob-Pattern), JavaScript RegExp (encapsulated in / with following flags) or JavaScript arrow-function that receives the <a href=\"https://playwright.dev/docs/api/class-request\">Request</a> object and returns a boolean. By default (with empty string) matches first available request. For additional information, see the Playwright <a href=\"https://playwright.dev/docs/api/class-page#page-wait-for-request\">waitForRequest</a> documentation.</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td>Timeout supports Robot Framework time format. Uses default timeout if not set.</td>\n</tr>\n</table>\n<p>See <a href=\"#Wait%20For%20Response\" class=\"name\">Wait For Response</a> for more details.</p>\n<p><b>CAUTION:</b> Before Browser library 17.0.0, the <code>matcher</code> argument was always either a regex or JS function. But the regex did not needed to be in slashes. The most simple way to migrate to the new syntax is to add slashes around the matcher. So <code>/api/get/json</code> becomes <code>//api/get/json/</code>.</p>\n<p><a href=\"https://forum.robotframework.org/t//4348\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Wait%20For%20Request"
  },
  {
    "name": "Wait For Response",
    "library": "Browser",
    "args": [
      {
        "name": "matcher",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "RegExp",
              "typedoc": "RegExp",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "matcher: str | RegExp = "
      },
      {
        "name": "timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout: timedelta | None = None"
      }
    ],
    "doc": "<p>Waits for response matching matcher and returns the response as robot dict.</p>\n<p>The response, which is returned by this keyword, is a robot dictionary with following attributes:</p>\n<ul>\n<li><code>status</code> &lt;int&gt; The status code of the response.</li>\n<li><code>statusText</code> &lt;str&gt; Status text corresponding to <code>status</code>, e.g OK or INTERNAL SERVER ERROR. This may not be available for all browser.</li>\n<li><code>body</code> &lt;dict | str&gt; The response body. If the body can be parsed as a JSON object, it will be returned as Python dictionary, otherwise it is returned as a string.</li>\n<li><code>headers</code> &lt;dict&gt; A dictionary containing all response headers.</li>\n<li><code>ok</code> &lt;bool&gt; Whether the request was successful, i.e. the <code>status</code> is range 200-299.</li>\n<li><code>request</code> &lt;dict&gt; containing <code>method</code> &lt;str&gt;, <code>headers</code> &lt;dict&gt; and <code>postData</code> &lt;dict&gt; | &lt;str&gt;</li>\n<li><code>url</code> &lt;str&gt; url of the request.</li>\n</ul>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>matcher</code></td>\n<td>Request URL matcher. Can be a string (Glob-Pattern), JavaScript RegExp (encapsulated in / with following flags) or JavaScript arrow-function that receives the Response object and returns a boolean. By default (with empty string) matches first available request. For additional information, see the Playwright <a href=\"https://playwright.dev/docs/api/class-page#page-wait-for-response\">page.waitForResponse</a> documentation.</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td>Timeout supports Robot Framework time format. Uses default timeout if not set.</td>\n</tr>\n</table>\n<p><b>CAUTION:</b> Before Browser library 17.0.0, the <code>matcher</code> argument was always either a regex or JS function. But the regex did not needed to be in slashes. The most simple way to migrate to the new syntax is to add slashes around the matcher. So <code>/api/get/json</code> becomes <code>//api/get/json/</code>.</p>\n<h3>Matcher Examples:</h3>\n<h4>Glob-Pattern:</h4>\n<p>Glob-Patterns are strings that can contain wildcards. The following wildcards are supported:</p>\n<p>Possible wildcards/patterns are:</p>\n<ul>\n<li><code>*</code> matches any number of characters, except <code>/</code></li>\n<li><code>**</code> matches any number of characters, including <code>/</code></li>\n<li><code>?</code> matches one character, except <code>/</code></li>\n<li><code>[abc]</code> matches one character in the brackets (in this example <code>a</code>, <code>b</code> or <code>c</code>)</li>\n<li><code>[a-z]</code> matches one character in the range (in this example <code>a</code> to <code>z</code>)</li>\n<li><code>{foo,bar,baz}</code> matches one of the strings in the braces (in this example <code>foo</code>, <code>bar</code> or <code>baz</code>)</li>\n</ul>\n<p>Example:</p>\n<pre>\n<a href=\"#Wait%20For%20Response\" class=\"name\">Wait For Response</a>    **/api/get/text    # matches any request with url ending with /api/get/text. example: <a href=\"https://browser.fi/api/get/text\">https://browser.fi/api/get/text</a>\n</pre>\n<h4>RegExp:</h4>\n<p>Regular Expressions are JavaScript regular expressions encapsulated in <code>/</code> with optional following flags: Be aware that backslashes need to be escaped in Robot Framework, e.g. <code>\\\\w</code> instead of <code>\\w</code>. See <a href=\"https://regex101.com\">regex101</a> for more information on Regular Expressions.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#Wait%20For%20Response\" class=\"name\">Wait For Response</a>    /http://\\\\w+:\\\\d+/api/get/text/i    # matches any request with url ending with /api/get/text and containing http:// followed by any word and port. example: <a href=\"http://localhost:8080/api/get/text\">http://localhost:8080/api/get/text</a>\n</pre>\n<h4>JavaScript Arrow-Function:</h4>\n<p>JavaScript Arrow-Functions are anonymous JavaScript functions that receive the <a href=\"https://playwright.dev/docs/api/class-response\">Response</a> object and return a boolean.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#Wait%20For%20Response\" class=\"name\">Wait For Response</a>    response =&gt; response.url() === '<a href=\"http://localhost/api/post\">http://localhost/api/post</a>' &amp;&amp; response.status() === 200    # matches any response with url <a href=\"http://localhost/api/post\">http://localhost/api/post</a> and status code 200\n</pre>\n<h3>Robot Examples:</h3>\n<p>Synchronous Example:</p>\n<pre>\n<a href=\"#Click\" class=\"name\">Click</a>                \\#delayed_request    # Creates response which should be waited before next actions\n<a href=\"#Wait%20For%20Response\" class=\"name\">Wait For Response</a>    matcher=/http://\\\\w+:\\\\d+/api/get/text/i\n<a href=\"#Click\" class=\"name\">Click</a>                \\#save\n</pre>\n<p>Asynchronous Example:</p>\n<pre>\n${promise} =    <a href=\"#Promise%20To\" class=\"name\">Promise To</a>    <a href=\"#Wait%20For%20Response\" class=\"name\">Wait For Response</a>    timeout=60s\n<a href=\"#Click\" class=\"name\">Click</a>           \\#delayed_request    # Creates response which should be waited before pressing save.\n<a href=\"#Click\" class=\"name\">Click</a>           \\#next\n<a href=\"#Wait%20For\" class=\"name\">Wait For</a>        ${promise}            # Waits for the response\n<a href=\"#Click\" class=\"name\">Click</a>           \\#save\n</pre>\n<p>JavaScript Function Example:</p>\n<pre>\n<a href=\"#Click\" class=\"name\">Click</a>               \\#delayed_request    # Creates response which should be waited before pressing save.\n<a href=\"#Wait%20For%20Response\" class=\"name\">Wait For Response</a>   <a href=\"https://playwright.dev/docs/api/class-response/\">response</a> =&gt; response.url().endsWith('json') &amp;&amp; response.request().method() === 'GET'\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4349\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Wait%20For%20Response"
  },
  {
    "name": "Wait Until Network Is Idle",
    "library": "Browser",
    "args": [
      {
        "name": "timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout: timedelta | None = None"
      }
    ],
    "doc": "<p><b>DEPRECATED!!</b> Use <a href=\"#Wait%20For%20Load%20State\" class=\"name\">Wait For Load State</a> instead. rfbrowser transform --wait-until-network-is-idle path/to/test command automatically transforms keyword to new format.</p>\n<p>If you have:</p>\n<pre>\n<a href=\"#Wait%20Until%20Network%20Is%20Idle\" class=\"name\">Wait Until Network Is Idle</a>    timeout=3s\n</pre>\n<p>then change it to:</p>\n<pre>\n<a href=\"#Wait%20For%20Load%20State\" class=\"name\">Wait For Load State</a>    networkidle    timeout=3s\n</pre>\n<p>Waits until there has been at least one instance of 500 ms of no network traffic on the page after loading.</p>\n<p>Doesn't wait for network traffic that wasn't initiated within 500ms of page load.</p>\n<table border=\"1\">\n<tr>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td>Timeout supports Robot Framework time format. Uses browser timeout if not set.</td>\n</tr>\n</table>\n<p>Example:</p>\n<pre>\n<a href=\"#Go%20To\" class=\"name\">Go To</a>                         ${URL}\n<a href=\"#Wait%20Until%20Network%20Is%20Idle\" class=\"name\">Wait Until Network Is Idle</a>    timeout=3s\n</pre>\n<p><a href=\"https://forum.robotframework.org/t//4350\">Comment &gt;&gt;</a></p>",
    "url": "https://marketsquare.github.io/robotframework-browser/Browser.html#Wait%20Until%20Network%20Is%20Idle"
  },
  {
    "name": "Call Method",
    "library": "BuiltIn",
    "args": [
      {
        "name": "object",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "object"
      },
      {
        "name": "method_name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "method_name"
      },
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      },
      {
        "name": "kwargs",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_NAMED",
        "required": false,
        "repr": "**kwargs"
      }
    ],
    "doc": "<p>Calls the named method of the given object with the provided arguments.</p>\n<p>The possible return value from the method is returned and can be assigned to a variable. Keyword fails both if the object does not have a method with the given name or if executing the method raises an exception.</p>\n<p>Possible equal signs in arguments must be escaped with a backslash like <code>\\=</code>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Call Method</td>\n<td>${hashtable}</td>\n<td>put</td>\n<td>myname</td>\n<td>myvalue</td>\n</tr>\n<tr>\n<td>${isempty} =</td>\n<td>Call Method</td>\n<td>${hashtable}</td>\n<td>isEmpty</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Not Be True</td>\n<td>${isempty}</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${value} =</td>\n<td>Call Method</td>\n<td>${hashtable}</td>\n<td>get</td>\n<td>myname</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${value}</td>\n<td>myvalue</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Call Method</td>\n<td>${object}</td>\n<td>kwargs</td>\n<td>name=value</td>\n<td>foo=bar</td>\n</tr>\n<tr>\n<td>Call Method</td>\n<td>${object}</td>\n<td>positional</td>\n<td>escaped\\=equals</td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Call%20Method"
  },
  {
    "name": "Catenate",
    "library": "BuiltIn",
    "args": [
      {
        "name": "items",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*items"
      }
    ],
    "doc": "<p>Catenates the given items together and returns the resulted string.</p>\n<p>By default, items are catenated with spaces, but if the first item contains the string <code>SEPARATOR=&lt;sep&gt;</code>, the separator <code>&lt;sep&gt;</code> is used instead. Items are converted into strings when necessary.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${str1} =</td>\n<td>Catenate</td>\n<td>Hello</td>\n<td>world</td>\n<td></td>\n</tr>\n<tr>\n<td>${str2} =</td>\n<td>Catenate</td>\n<td>SEPARATOR=---</td>\n<td>Hello</td>\n<td>world</td>\n</tr>\n<tr>\n<td>${str3} =</td>\n<td>Catenate</td>\n<td>SEPARATOR=</td>\n<td>Hello</td>\n<td>world</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${str1} = 'Hello world'\n${str2} = 'Hello---world'\n${str3} = 'Helloworld'\n</pre>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Catenate"
  },
  {
    "name": "Comment",
    "library": "BuiltIn",
    "args": [
      {
        "name": "messages",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*messages"
      }
    ],
    "doc": "<p>Displays the given messages in the log file as keyword arguments.</p>\n<p>This keyword does nothing with the arguments it receives, but as they are visible in the log, this keyword can be used to display simple messages. Given arguments are ignored so thoroughly that they can even contain non-existing variables. If you are interested about variable values, you can use the <a href=\"#Log\" class=\"name\">Log</a> or <a href=\"#Log%20Many\" class=\"name\">Log Many</a> keywords.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Comment"
  },
  {
    "name": "Continue For Loop",
    "library": "BuiltIn",
    "args": [],
    "doc": "<p>Skips the current FOR loop iteration and continues from the next.</p>\n<hr>\n<p><b>NOTE:</b> Robot Framework 5.0 added support for native <code>CONTINUE</code> statement that is recommended over this keyword. In the examples below, <code>Continue For Loop</code> can simply be replaced with <code>CONTINUE</code>. In addition to that, native <code>IF</code> syntax (new in RF 4.0) or inline <code>IF</code> syntax (new in RF 5.0) can be used instead of <code>Run Keyword If</code>. For example, the first example below could be written like this instead:</p>\n<pre>\nIF    '${var}' == 'CONTINUE'    CONTINUE\n</pre>\n<p>This keyword will eventually be deprecated and removed.</p>\n<hr>\n<p>Skips the remaining keywords in the current FOR loop iteration and continues from the next one. Starting from Robot Framework 5.0, this keyword can only be used inside a loop, not in a keyword used in a loop.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>FOR</td>\n<td>${var}</td>\n<td>IN</td>\n<td>@{VALUES}</td>\n</tr>\n<tr>\n<td></td>\n<td>Run Keyword If</td>\n<td>'${var}' == 'CONTINUE'</td>\n<td>Continue For Loop</td>\n</tr>\n<tr>\n<td></td>\n<td>Do Something</td>\n<td>${var}</td>\n<td></td>\n</tr>\n<tr>\n<td>END</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>See <a href=\"#Continue%20For%20Loop%20If\" class=\"name\">Continue For Loop If</a> to conditionally continue a FOR loop without using <a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a> or other wrapper keywords.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Continue%20For%20Loop"
  },
  {
    "name": "Continue For Loop If",
    "library": "BuiltIn",
    "args": [
      {
        "name": "condition",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "condition"
      }
    ],
    "doc": "<p>Skips the current FOR loop iteration if the <code>condition</code> is true.</p>\n<hr>\n<p><b>NOTE:</b> Robot Framework 5.0 added support for native <code>CONTINUE</code> statement and for inline <code>IF</code>, and that combination should be used instead of this keyword. For example, <code>Continue For Loop If</code> usage in the example below could be replaced with</p>\n<pre>\nIF    '${var}' == 'CONTINUE'    CONTINUE\n</pre>\n<p>This keyword will eventually be deprecated and removed.</p>\n<hr>\n<p>A wrapper for <a href=\"#Continue%20For%20Loop\" class=\"name\">Continue For Loop</a> to continue a FOR loop based on the given condition. The condition is evaluated using the same semantics as with <a href=\"#Should%20Be%20True\" class=\"name\">Should Be True</a> keyword.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>FOR</td>\n<td>${var}</td>\n<td>IN</td>\n<td>@{VALUES}</td>\n</tr>\n<tr>\n<td></td>\n<td>Continue For Loop If</td>\n<td>'${var}' == 'CONTINUE'</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Do Something</td>\n<td>${var}</td>\n<td></td>\n</tr>\n<tr>\n<td>END</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Continue%20For%20Loop%20If"
  },
  {
    "name": "Convert To Binary",
    "library": "BuiltIn",
    "args": [
      {
        "name": "item",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "item"
      },
      {
        "name": "base",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "base=None"
      },
      {
        "name": "prefix",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "prefix=None"
      },
      {
        "name": "length",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "length=None"
      }
    ],
    "doc": "<p>Converts the given item to a binary string.</p>\n<p>The <code>item</code>, with an optional <code>base</code>, is first converted to an integer using <a href=\"#Convert%20To%20Integer\" class=\"name\">Convert To Integer</a> internally. After that it is converted to a binary number (base 2) represented as a string such as <code>1011</code>.</p>\n<p>The returned value can contain an optional <code>prefix</code> and can be required to be of minimum <code>length</code> (excluding the prefix and a possible minus sign). If the value is initially shorter than the required length, it is padded with zeros.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${result} =</td>\n<td>Convert To Binary</td>\n<td>10</td>\n<td></td>\n<td></td>\n<td># Result is 1010</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Convert To Binary</td>\n<td>F</td>\n<td>base=16</td>\n<td>prefix=0b</td>\n<td># Result is 0b1111</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Convert To Binary</td>\n<td>-2</td>\n<td>prefix=B</td>\n<td>length=4</td>\n<td># Result is -B0010</td>\n</tr>\n</table>\n<p>See also <a href=\"#Convert%20To%20Integer\" class=\"name\">Convert To Integer</a>, <a href=\"#Convert%20To%20Octal\" class=\"name\">Convert To Octal</a> and <a href=\"#Convert%20To%20Hex\" class=\"name\">Convert To Hex</a>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Convert%20To%20Binary"
  },
  {
    "name": "Convert To Boolean",
    "library": "BuiltIn",
    "args": [
      {
        "name": "item",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "item"
      }
    ],
    "doc": "<p>Converts the given item to Boolean true or false.</p>\n<p>Handles strings <code>True</code> and <code>False</code> (case-insensitive) as expected, otherwise returns item's <a href=\"http://docs.python.org/library/stdtypes.html#truth\">truth value</a> using Python's <code>bool()</code> method.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Convert%20To%20Boolean"
  },
  {
    "name": "Convert To Bytes",
    "library": "BuiltIn",
    "args": [
      {
        "name": "input",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "input"
      },
      {
        "name": "input_type",
        "type": null,
        "defaultValue": "text",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "input_type=text"
      }
    ],
    "doc": "<p>Converts the given <code>input</code> to bytes according to the <code>input_type</code>.</p>\n<p>Valid input types are listed below:</p>\n<ul>\n<li><code>text:</code> Converts text to bytes character by character. All characters with ordinal below 256 can be used and are converted to bytes with same values. Many characters are easiest to represent using escapes like <code>\\x00</code> or <code>\\xff</code>. In practice this is the same as Latin-1 encoding.</li>\n</ul>\n<ul>\n<li><code>int:</code> Converts integers separated by spaces to bytes. Similarly as with <a href=\"#Convert%20To%20Integer\" class=\"name\">Convert To Integer</a>, it is possible to use binary, octal, or hex values by prefixing the values with <code>0b</code>, <code>0o</code>, or <code>0x</code>, respectively.</li>\n</ul>\n<ul>\n<li><code>hex:</code> Converts hexadecimal values to bytes. Single byte is always two characters long (e.g. <code>01</code> or <code>FF</code>). Spaces are ignored and can be used freely as a visual separator.</li>\n</ul>\n<ul>\n<li><code>bin:</code> Converts binary values to bytes. Single byte is always eight characters long (e.g. <code>00001010</code>). Spaces are ignored and can be used freely as a visual separator.</li>\n</ul>\n<p>In addition to giving the input as a string, it is possible to use lists or other iterables containing individual characters or numbers. In that case numbers do not need to be padded to certain length and they cannot contain extra spaces.</p>\n<p>Examples (last column shows returned bytes):</p>\n<table border=\"1\">\n<tr>\n<td>${bytes} =</td>\n<td>Convert To Bytes</td>\n<td>hyvä</td>\n<td></td>\n<td># hyv\\xe4</td>\n</tr>\n<tr>\n<td>${bytes} =</td>\n<td>Convert To Bytes</td>\n<td>hyv\\xe4</td>\n<td></td>\n<td># hyv\\xe4</td>\n</tr>\n<tr>\n<td>${bytes} =</td>\n<td>Convert To Bytes</td>\n<td>\\xff\\x07</td>\n<td></td>\n<td># \\xff\\x07</td>\n</tr>\n<tr>\n<td>${bytes} =</td>\n<td>Convert To Bytes</td>\n<td>82 70</td>\n<td>int</td>\n<td># RF</td>\n</tr>\n<tr>\n<td>${bytes} =</td>\n<td>Convert To Bytes</td>\n<td>0b10 0x10</td>\n<td>int</td>\n<td># \\x02\\x10</td>\n</tr>\n<tr>\n<td>${bytes} =</td>\n<td>Convert To Bytes</td>\n<td>ff 00 07</td>\n<td>hex</td>\n<td># \\xff\\x00\\x07</td>\n</tr>\n<tr>\n<td>${bytes} =</td>\n<td>Convert To Bytes</td>\n<td>52462121</td>\n<td>hex</td>\n<td># RF!!</td>\n</tr>\n<tr>\n<td>${bytes} =</td>\n<td>Convert To Bytes</td>\n<td>0000 1000</td>\n<td>bin</td>\n<td># \\x08</td>\n</tr>\n<tr>\n<td>${input} =</td>\n<td>Create List</td>\n<td>1</td>\n<td>2</td>\n<td>12</td>\n</tr>\n<tr>\n<td>${bytes} =</td>\n<td>Convert To Bytes</td>\n<td>${input}</td>\n<td>int</td>\n<td># \\x01\\x02\\x0c</td>\n</tr>\n<tr>\n<td>${bytes} =</td>\n<td>Convert To Bytes</td>\n<td>${input}</td>\n<td>hex</td>\n<td># \\x01\\x02\\x12</td>\n</tr>\n</table>\n<p>Use <span class=\"name\">Encode String To Bytes</span> in <code>String</code> library if you need to convert text to bytes using a certain encoding.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Convert%20To%20Bytes"
  },
  {
    "name": "Convert To Hex",
    "library": "BuiltIn",
    "args": [
      {
        "name": "item",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "item"
      },
      {
        "name": "base",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "base=None"
      },
      {
        "name": "prefix",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "prefix=None"
      },
      {
        "name": "length",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "length=None"
      },
      {
        "name": "lowercase",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "lowercase=False"
      }
    ],
    "doc": "<p>Converts the given item to a hexadecimal string.</p>\n<p>The <code>item</code>, with an optional <code>base</code>, is first converted to an integer using <a href=\"#Convert%20To%20Integer\" class=\"name\">Convert To Integer</a> internally. After that it is converted to a hexadecimal number (base 16) represented as a string such as <code>FF0A</code>.</p>\n<p>The returned value can contain an optional <code>prefix</code> and can be required to be of minimum <code>length</code> (excluding the prefix and a possible minus sign). If the value is initially shorter than the required length, it is padded with zeros.</p>\n<p>By default the value is returned as an upper case string, but the <code>lowercase</code> argument a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) turns the value (but not the given prefix) to lower case.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${result} =</td>\n<td>Convert To Hex</td>\n<td>255</td>\n<td></td>\n<td></td>\n<td># Result is FF</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Convert To Hex</td>\n<td>-10</td>\n<td>prefix=0x</td>\n<td>length=2</td>\n<td># Result is -0x0A</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Convert To Hex</td>\n<td>255</td>\n<td>prefix=X</td>\n<td>lowercase=yes</td>\n<td># Result is Xff</td>\n</tr>\n</table>\n<p>See also <a href=\"#Convert%20To%20Integer\" class=\"name\">Convert To Integer</a>, <a href=\"#Convert%20To%20Binary\" class=\"name\">Convert To Binary</a> and <a href=\"#Convert%20To%20Octal\" class=\"name\">Convert To Octal</a>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Convert%20To%20Hex"
  },
  {
    "name": "Convert To Integer",
    "library": "BuiltIn",
    "args": [
      {
        "name": "item",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "item"
      },
      {
        "name": "base",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "base=None"
      }
    ],
    "doc": "<p>Converts the given item to an integer number.</p>\n<p>If the given item is a string, it is by default expected to be an integer in base 10. There are two ways to convert from other bases:</p>\n<ul>\n<li>Give base explicitly to the keyword as <code>base</code> argument.</li>\n</ul>\n<ul>\n<li>Prefix the given string with the base so that <code>0b</code> means binary (base 2), <code>0o</code> means octal (base 8), and <code>0x</code> means hex (base 16). The prefix is considered only when <code>base</code> argument is not given and may itself be prefixed with a plus or minus sign.</li>\n</ul>\n<p>The syntax is case-insensitive and possible spaces are ignored.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${result} =</td>\n<td>Convert To Integer</td>\n<td>100</td>\n<td></td>\n<td># Result is 100</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Convert To Integer</td>\n<td>FF AA</td>\n<td>16</td>\n<td># Result is 65450</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Convert To Integer</td>\n<td>100</td>\n<td>8</td>\n<td># Result is 64</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Convert To Integer</td>\n<td>-100</td>\n<td>2</td>\n<td># Result is -4</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Convert To Integer</td>\n<td>0b100</td>\n<td></td>\n<td># Result is 4</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Convert To Integer</td>\n<td>-0x100</td>\n<td></td>\n<td># Result is -256</td>\n</tr>\n</table>\n<p>See also <a href=\"#Convert%20To%20Number\" class=\"name\">Convert To Number</a>, <a href=\"#Convert%20To%20Binary\" class=\"name\">Convert To Binary</a>, <a href=\"#Convert%20To%20Octal\" class=\"name\">Convert To Octal</a>, <a href=\"#Convert%20To%20Hex\" class=\"name\">Convert To Hex</a>, and <a href=\"#Convert%20To%20Bytes\" class=\"name\">Convert To Bytes</a>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Convert%20To%20Integer"
  },
  {
    "name": "Convert To Number",
    "library": "BuiltIn",
    "args": [
      {
        "name": "item",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "item"
      },
      {
        "name": "precision",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "precision=None"
      }
    ],
    "doc": "<p>Converts the given item to a floating point number.</p>\n<p>If the optional <code>precision</code> is positive or zero, the returned number is rounded to that number of decimal digits. Negative precision means that the number is rounded to the closest multiple of 10 to the power of the absolute precision. If a number is equally close to a certain precision, it is always rounded away from zero.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${result} =</td>\n<td>Convert To Number</td>\n<td>42.512</td>\n<td></td>\n<td># Result is 42.512</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Convert To Number</td>\n<td>42.512</td>\n<td>1</td>\n<td># Result is 42.5</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Convert To Number</td>\n<td>42.512</td>\n<td>0</td>\n<td># Result is 43.0</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Convert To Number</td>\n<td>42.512</td>\n<td>-1</td>\n<td># Result is 40.0</td>\n</tr>\n</table>\n<p>Notice that machines generally cannot store floating point numbers accurately. This may cause surprises with these numbers in general and also when they are rounded. For more information see, for example, these resources:</p>\n<ul>\n<li><a href=\"http://docs.python.org/tutorial/floatingpoint.html\">http://docs.python.org/tutorial/floatingpoint.html</a></li>\n<li><a href=\"http://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition\">http://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition</a></li>\n</ul>\n<p>If you want to avoid possible problems with floating point numbers, you can implement custom keywords using Python's <a href=\"http://docs.python.org/library/decimal.html\">decimal</a> or <a href=\"http://docs.python.org/library/fractions.html\">fractions</a> modules.</p>\n<p>If you need an integer number, use <a href=\"#Convert%20To%20Integer\" class=\"name\">Convert To Integer</a> instead.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Convert%20To%20Number"
  },
  {
    "name": "Convert To Octal",
    "library": "BuiltIn",
    "args": [
      {
        "name": "item",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "item"
      },
      {
        "name": "base",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "base=None"
      },
      {
        "name": "prefix",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "prefix=None"
      },
      {
        "name": "length",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "length=None"
      }
    ],
    "doc": "<p>Converts the given item to an octal string.</p>\n<p>The <code>item</code>, with an optional <code>base</code>, is first converted to an integer using <a href=\"#Convert%20To%20Integer\" class=\"name\">Convert To Integer</a> internally. After that it is converted to an octal number (base 8) represented as a string such as <code>775</code>.</p>\n<p>The returned value can contain an optional <code>prefix</code> and can be required to be of minimum <code>length</code> (excluding the prefix and a possible minus sign). If the value is initially shorter than the required length, it is padded with zeros.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${result} =</td>\n<td>Convert To Octal</td>\n<td>10</td>\n<td></td>\n<td></td>\n<td># Result is 12</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Convert To Octal</td>\n<td>-F</td>\n<td>base=16</td>\n<td>prefix=0</td>\n<td># Result is -017</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Convert To Octal</td>\n<td>16</td>\n<td>prefix=oct</td>\n<td>length=4</td>\n<td># Result is oct0020</td>\n</tr>\n</table>\n<p>See also <a href=\"#Convert%20To%20Integer\" class=\"name\">Convert To Integer</a>, <a href=\"#Convert%20To%20Binary\" class=\"name\">Convert To Binary</a> and <a href=\"#Convert%20To%20Hex\" class=\"name\">Convert To Hex</a>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Convert%20To%20Octal"
  },
  {
    "name": "Convert To String",
    "library": "BuiltIn",
    "args": [
      {
        "name": "item",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "item"
      }
    ],
    "doc": "<p>Converts the given item to a Unicode string.</p>\n<p>Strings are also <a href=\"https://en.wikipedia.org/wiki/Unicode_equivalence\">NFC normalized</a>.</p>\n<p>Use <span class=\"name\">Encode String To Bytes</span> and <span class=\"name\">Decode Bytes To String</span> keywords in <code>String</code> library if you need to convert between Unicode and byte strings using different encodings. Use <a href=\"#Convert%20To%20Bytes\" class=\"name\">Convert To Bytes</a> if you just want to create byte strings.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Convert%20To%20String"
  },
  {
    "name": "Create Dictionary",
    "library": "BuiltIn",
    "args": [
      {
        "name": "items",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*items"
      }
    ],
    "doc": "<p>Creates and returns a dictionary based on the given <code>items</code>.</p>\n<p>Items are typically given using the <code>key=value</code> syntax same way as <code>&amp;{dictionary}</code> variables are created in the Variable table. Both keys and values can contain variables, and possible equal sign in key can be escaped with a backslash like <code>escaped\\=key=value</code>. It is also possible to get items from existing dictionaries by simply using them like <code>&amp;{dict}</code>.</p>\n<p>Alternatively items can be specified so that keys and values are given separately. This and the <code>key=value</code> syntax can even be combined, but separately given items must be first. If same key is used multiple times, the last value has precedence.</p>\n<p>The returned dictionary is ordered, and values with strings as keys can also be accessed using a convenient dot-access syntax like <code>${dict.key}</code>. Technically the returned dictionary is Robot Framework's own <code>DotDict</code> instance. If there is a need, it can be converted into a regular Python <code>dict</code> instance by using the <span class=\"name\">Convert To Dictionary</span> keyword from the Collections library.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>&amp;{dict} =</td>\n<td>Create Dictionary</td>\n<td>key=value</td>\n<td>foo=bar</td>\n<td></td>\n<td></td>\n<td># key=value syntax</td>\n</tr>\n<tr>\n<td>Should Be True</td>\n<td>${dict} == {'key': 'value', 'foo': 'bar'}</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>&amp;{dict2} =</td>\n<td>Create Dictionary</td>\n<td>key</td>\n<td>value</td>\n<td>foo</td>\n<td>bar</td>\n<td># separate key and value</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${dict}</td>\n<td>${dict2}</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>&amp;{dict} =</td>\n<td>Create Dictionary</td>\n<td>${1}=${2}</td>\n<td>&amp;{dict}</td>\n<td>foo=new</td>\n<td></td>\n<td># using variables</td>\n</tr>\n<tr>\n<td>Should Be True</td>\n<td>${dict} == {1: 2, 'key': 'value', 'foo': 'new'}</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${dict.key}</td>\n<td>value</td>\n<td></td>\n<td></td>\n<td></td>\n<td># dot-access</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Create%20Dictionary"
  },
  {
    "name": "Create List",
    "library": "BuiltIn",
    "args": [
      {
        "name": "items",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*items"
      }
    ],
    "doc": "<p>Returns a list containing given items.</p>\n<p>The returned list can be assigned both to <code>${scalar}</code> and <code>@{list}</code> variables.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>@{list} =</td>\n<td>Create List</td>\n<td>a</td>\n<td>b</td>\n<td>c</td>\n</tr>\n<tr>\n<td>${scalar} =</td>\n<td>Create List</td>\n<td>a</td>\n<td>b</td>\n<td>c</td>\n</tr>\n<tr>\n<td>${ints} =</td>\n<td>Create List</td>\n<td>${1}</td>\n<td>${2}</td>\n<td>${3}</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Create%20List"
  },
  {
    "name": "Evaluate",
    "library": "BuiltIn",
    "args": [
      {
        "name": "expression",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "expression"
      },
      {
        "name": "modules",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "modules=None"
      },
      {
        "name": "namespace",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "namespace=None"
      }
    ],
    "doc": "<p>Evaluates the given expression in Python and returns the result.</p>\n<p><code>expression</code> is evaluated in Python as explained in the <a href=\"#Evaluating%20expressions\" class=\"name\">Evaluating expressions</a> section.</p>\n<p><code>modules</code> argument can be used to specify a comma separated list of Python modules to be imported and added to the evaluation namespace.</p>\n<p><code>namespace</code> argument can be used to pass a custom evaluation namespace as a dictionary. Possible <code>modules</code> are added to this namespace.</p>\n<p>Variables used like <code>${variable}</code> are replaced in the expression before evaluation. Variables are also available in the evaluation namespace and can be accessed using the special <code>$variable</code> syntax as explained in the <a href=\"#Evaluating%20expressions\" class=\"name\">Evaluating expressions</a> section.</p>\n<p>Starting from Robot Framework 3.2, modules used in the expression are imported automatically. There are, however, two cases where they need to be explicitly specified using the <code>modules</code> argument:</p>\n<ul>\n<li>When nested modules like <code>rootmod.submod</code> are implemented so that the root module does not automatically import sub modules. This is illustrated by the <code>selenium.webdriver</code> example below.</li>\n</ul>\n<ul>\n<li>When using a module in the expression part of a list comprehension. This is illustrated by the <code>json</code> example below.</li>\n</ul>\n<p>Examples (expecting <code>${result}</code> is number 3.14):</p>\n<table border=\"1\">\n<tr>\n<td>${status} =</td>\n<td>Evaluate</td>\n<td>0 &lt; ${result} &lt; 10</td>\n<td># Would also work with string '3.14'</td>\n</tr>\n<tr>\n<td>${status} =</td>\n<td>Evaluate</td>\n<td>0 &lt; $result &lt; 10</td>\n<td># Using variable itself, not string representation</td>\n</tr>\n<tr>\n<td>${random} =</td>\n<td>Evaluate</td>\n<td>random.randint(0, sys.maxsize)</td>\n<td></td>\n</tr>\n<tr>\n<td>${options} =</td>\n<td>Evaluate</td>\n<td>selenium.webdriver.ChromeOptions()</td>\n<td>modules=selenium.webdriver</td>\n</tr>\n<tr>\n<td>${items} =</td>\n<td>Evaluate</td>\n<td>[json.loads(item) for item in ('1', '\"b\"')]</td>\n<td>modules=json</td>\n</tr>\n<tr>\n<td>${ns} =</td>\n<td>Create Dictionary</td>\n<td>x=${4}</td>\n<td>y=${2}</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Evaluate</td>\n<td>x*10 + y</td>\n<td>namespace=${ns}</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${status} = True\n${random} = &lt;random integer&gt;\n${options} = ChromeOptions instance\n${items} = [1, 'b']\n${result} = 42\n</pre>\n<p><b>NOTE</b>: Prior to Robot Framework 3.2 using <code>modules=rootmod.submod</code> was not enough to make the root module itself available in the evaluation namespace. It needed to be taken into use explicitly like <code>modules=rootmod, rootmod.submod</code>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Evaluate"
  },
  {
    "name": "Exit For Loop",
    "library": "BuiltIn",
    "args": [],
    "doc": "<p>Stops executing the enclosing FOR loop.</p>\n<hr>\n<p><b>NOTE:</b> Robot Framework 5.0 added support for native <code>BREAK</code> statement that is recommended over this keyword. In the examples below, <code>Exit For Loop</code> can simply be replaced with <code>BREAK</code>. In addition to that, native <code>IF</code> syntax (new in RF 4.0) or inline <code>IF</code> syntax (new in RF 5.0) can be used instead of <code>Run Keyword If</code>. For example, the first example below could be written like this instead:</p>\n<pre>\nIF    '${var}' == 'EXIT'    BREAK\n</pre>\n<p>This keyword will eventually be deprecated and removed.</p>\n<hr>\n<p>Exits the enclosing FOR loop and continues execution after it. Starting from Robot Framework 5.0, this keyword can only be used inside a loop, not in a keyword used in a loop.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>FOR</td>\n<td>${var}</td>\n<td>IN</td>\n<td>@{VALUES}</td>\n</tr>\n<tr>\n<td></td>\n<td>Run Keyword If</td>\n<td>'${var}' == 'EXIT'</td>\n<td>Exit For Loop</td>\n</tr>\n<tr>\n<td></td>\n<td>Do Something</td>\n<td>${var}</td>\n<td></td>\n</tr>\n<tr>\n<td>END</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>See <a href=\"#Exit%20For%20Loop%20If\" class=\"name\">Exit For Loop If</a> to conditionally exit a FOR loop without using <a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a> or other wrapper keywords.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Exit%20For%20Loop"
  },
  {
    "name": "Exit For Loop If",
    "library": "BuiltIn",
    "args": [
      {
        "name": "condition",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "condition"
      }
    ],
    "doc": "<p>Stops executing the enclosing FOR loop if the <code>condition</code> is true.</p>\n<hr>\n<p><b>NOTE:</b> Robot Framework 5.0 added support for native <code>BREAK</code> statement and for inline <code>IF</code>, and that combination should be used instead of this keyword. For example, <code>Exit For Loop If</code> usage in the example below could be replaced with</p>\n<pre>\nIF    '${var}' == 'EXIT'    BREAK\n</pre>\n<p>This keyword will eventually be deprecated and removed.</p>\n<hr>\n<p>A wrapper for <a href=\"#Exit%20For%20Loop\" class=\"name\">Exit For Loop</a> to exit a FOR loop based on the given condition. The condition is evaluated using the same semantics as with <a href=\"#Should%20Be%20True\" class=\"name\">Should Be True</a> keyword.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>FOR</td>\n<td>${var}</td>\n<td>IN</td>\n<td>@{VALUES}</td>\n</tr>\n<tr>\n<td></td>\n<td>Exit For Loop If</td>\n<td>'${var}' == 'EXIT'</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Do Something</td>\n<td>${var}</td>\n<td></td>\n</tr>\n<tr>\n<td>END</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Exit%20For%20Loop%20If"
  },
  {
    "name": "Fail",
    "library": "BuiltIn",
    "args": [
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "tags",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*tags"
      }
    ],
    "doc": "<p>Fails the test with the given message and optionally alters its tags.</p>\n<p>The error message is specified using the <code>msg</code> argument. It is possible to use HTML in the given error message, similarly as with any other keyword accepting an error message, by prefixing the error with <code>*HTML*</code>.</p>\n<p>It is possible to modify tags of the current test case by passing tags after the message. Tags starting with a hyphen (e.g. <code>-regression</code>) are removed and others added. Tags are modified using <a href=\"#Set%20Tags\" class=\"name\">Set Tags</a> and <a href=\"#Remove%20Tags\" class=\"name\">Remove Tags</a> internally, and the semantics setting and removing them are the same as with these keywords.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Fail</td>\n<td>Test not ready</td>\n<td></td>\n<td></td>\n<td># Fails with the given message.</td>\n</tr>\n<tr>\n<td>Fail</td>\n<td>*HTML*&lt;b&gt;Test not ready&lt;/b&gt;</td>\n<td></td>\n<td></td>\n<td># Fails using HTML in the message.</td>\n</tr>\n<tr>\n<td>Fail</td>\n<td>Test not ready</td>\n<td>not-ready</td>\n<td></td>\n<td># Fails and adds 'not-ready' tag.</td>\n</tr>\n<tr>\n<td>Fail</td>\n<td>OS not supported</td>\n<td>-regression</td>\n<td></td>\n<td># Removes tag 'regression'.</td>\n</tr>\n<tr>\n<td>Fail</td>\n<td>My message</td>\n<td>tag</td>\n<td>-t*</td>\n<td># Removes all tags starting with 't' except the newly added 'tag'.</td>\n</tr>\n</table>\n<p>See <a href=\"#Fatal%20Error\" class=\"name\">Fatal Error</a> if you need to stop the whole test execution.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Fail"
  },
  {
    "name": "Fatal Error",
    "library": "BuiltIn",
    "args": [
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      }
    ],
    "doc": "<p>Stops the whole test execution.</p>\n<p>The test or suite where this keyword is used fails with the provided message, and subsequent tests fail with a canned message. Possible teardowns will nevertheless be executed.</p>\n<p>See <a href=\"#Fail\" class=\"name\">Fail</a> if you only want to stop one test case unconditionally.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Fatal%20Error"
  },
  {
    "name": "Get Count",
    "library": "BuiltIn",
    "args": [
      {
        "name": "container",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "container"
      },
      {
        "name": "item",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "item"
      }
    ],
    "doc": "<p>Returns and logs how many times <code>item</code> is found from <code>container</code>.</p>\n<p>This keyword works with Python strings and lists and all objects that either have <code>count</code> method or can be converted to Python lists.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${count} =</td>\n<td>Get Count</td>\n<td>${some item}</td>\n<td>interesting value</td>\n</tr>\n<tr>\n<td>Should Be True</td>\n<td>5 &lt; ${count} &lt; 10</td>\n<td></td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Get%20Count"
  },
  {
    "name": "Get Length",
    "library": "BuiltIn",
    "args": [
      {
        "name": "item",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "item"
      }
    ],
    "doc": "<p>Returns and logs the length of the given item as an integer.</p>\n<p>The item can be anything that has a length, for example, a string, a list, or a mapping. The keyword first tries to get the length with the Python function <code>len</code>, which calls the  item's <code>__len__</code> method internally. If that fails, the keyword tries to call the item's possible <code>length</code> and <code>size</code> methods directly. The final attempt is trying to get the value of the item's <code>length</code> attribute. If all these attempts are unsuccessful, the keyword fails.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${length} =</td>\n<td>Get Length</td>\n<td>Hello, world!</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal As Integers</td>\n<td>${length}</td>\n<td>13</td>\n<td></td>\n</tr>\n<tr>\n<td>@{list} =</td>\n<td>Create List</td>\n<td>Hello,</td>\n<td>world!</td>\n</tr>\n<tr>\n<td>${length} =</td>\n<td>Get Length</td>\n<td>${list}</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal As Integers</td>\n<td>${length}</td>\n<td>2</td>\n<td></td>\n</tr>\n</table>\n<p>See also <a href=\"#Length%20Should%20Be\" class=\"name\">Length Should Be</a>, <a href=\"#Should%20Be%20Empty\" class=\"name\">Should Be Empty</a> and <a href=\"#Should%20Not%20Be%20Empty\" class=\"name\">Should Not Be Empty</a>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Get%20Length"
  },
  {
    "name": "Get Library Instance",
    "library": "BuiltIn",
    "args": [
      {
        "name": "name",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "name=None"
      },
      {
        "name": "all",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "all=False"
      }
    ],
    "doc": "<p>Returns the currently active instance of the specified library.</p>\n<p>This keyword makes it easy for libraries to interact with other libraries that have state. This is illustrated by the Python example below:</p>\n<pre>\nfrom robot.libraries.BuiltIn import BuiltIn\n\ndef title_should_start_with(expected):\n    seleniumlib = BuiltIn().get_library_instance('SeleniumLibrary')\n    title = seleniumlib.get_title()\n    if not title.startswith(expected):\n        raise AssertionError(f\"Title '{title}' did not start with '{expected}'.\")\n</pre>\n<p>It is also possible to use this keyword in the test data and pass the returned library instance to another keyword. If a library is imported with a custom name, the <code>name</code> used to get the instance must be that name and not the original library name.</p>\n<p>If the optional argument <code>all</code> is given a true value, then a dictionary mapping all library names to instances will be returned.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>&amp;{all libs} =</td>\n<td>Get library instance</td>\n<td>all=True</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Get%20Library%20Instance"
  },
  {
    "name": "Get Time",
    "library": "BuiltIn",
    "args": [
      {
        "name": "format",
        "type": null,
        "defaultValue": "timestamp",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "format=timestamp"
      },
      {
        "name": "time_",
        "type": null,
        "defaultValue": "NOW",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "time_=NOW"
      }
    ],
    "doc": "<p>Returns the given time in the requested format.</p>\n<p><b>NOTE:</b> DateTime library contains much more flexible keywords for getting the current date and time and for date and time handling in general.</p>\n<p>How time is returned is determined based on the given <code>format</code> string as follows. Note that all checks are case-insensitive.</p>\n<p>1) If <code>format</code> contains the word <code>epoch</code>, the time is returned in seconds after the UNIX epoch (1970-01-01 00:00:00 UTC). The return value is always an integer.</p>\n<p>2) If <code>format</code> contains any of the words <code>year</code>, <code>month</code>, <code>day</code>, <code>hour</code>, <code>min</code>, or <code>sec</code>, only the selected parts are returned. The order of the returned parts is always the one in the previous sentence and the order of words in <code>format</code> is not significant. The parts are returned as zero-padded strings (e.g. May -&gt; <code>05</code>).</p>\n<p>3) Otherwise (and by default) the time is returned as a timestamp string in the format <code>2006-02-24 15:08:31</code>.</p>\n<p>By default this keyword returns the current local time, but that can be altered using <code>time</code> argument as explained below. Note that all checks involving strings are case-insensitive.</p>\n<p>1) If <code>time</code> is a number, or a string that can be converted to a number, it is interpreted as seconds since the UNIX epoch. This documentation was originally written about 1177654467 seconds after the epoch.</p>\n<p>2) If <code>time</code> is a timestamp, that time will be used. Valid timestamp formats are <code>YYYY-MM-DD hh:mm:ss</code> and <code>YYYYMMDD hhmmss</code>.</p>\n<p>3) If <code>time</code> is equal to <code>NOW</code> (default), the current local time is used.</p>\n<p>4) If <code>time</code> is equal to <code>UTC</code>, the current time in <a href=\"http://en.wikipedia.org/wiki/Coordinated_Universal_Time\">UTC</a> is used.</p>\n<p>5) If <code>time</code> is in the format like <code>NOW - 1 day</code> or <code>UTC + 1 hour 30 min</code>, the current local/UTC time plus/minus the time specified with the time string is used. The time string format is described in an appendix of Robot Framework User Guide.</p>\n<p>Examples (expecting the current local time is 2006-03-29 15:06:21):</p>\n<table border=\"1\">\n<tr>\n<td>${time} =</td>\n<td>Get Time</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${secs} =</td>\n<td>Get Time</td>\n<td>epoch</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${year} =</td>\n<td>Get Time</td>\n<td>return year</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${yyyy}</td>\n<td>${mm}</td>\n<td>${dd} =</td>\n<td>Get Time</td>\n<td>year,month,day</td>\n</tr>\n<tr>\n<td>@{time} =</td>\n<td>Get Time</td>\n<td>year month day hour min sec</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${y}</td>\n<td>${s} =</td>\n<td>Get Time</td>\n<td>seconds and year</td>\n<td></td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${time} = '2006-03-29 15:06:21'\n${secs} = 1143637581\n${year} = '2006'\n${yyyy} = '2006', ${mm} = '03', ${dd} = '29'\n@{time} = ['2006', '03', '29', '15', '06', '21']\n${y} = '2006'\n${s} = '21'\n</pre>\n<p>Examples (expecting the current local time is 2006-03-29 15:06:21 and UTC time is 2006-03-29 12:06:21):</p>\n<table border=\"1\">\n<tr>\n<td>${time} =</td>\n<td>Get Time</td>\n<td></td>\n<td>1177654467</td>\n<td># Time given as epoch seconds</td>\n</tr>\n<tr>\n<td>${secs} =</td>\n<td>Get Time</td>\n<td>sec</td>\n<td>2007-04-27 09:14:27</td>\n<td># Time given as a timestamp</td>\n</tr>\n<tr>\n<td>${year} =</td>\n<td>Get Time</td>\n<td>year</td>\n<td>NOW</td>\n<td># The local time of execution</td>\n</tr>\n<tr>\n<td>@{time} =</td>\n<td>Get Time</td>\n<td>hour min sec</td>\n<td>NOW + 1h 2min 3s</td>\n<td># 1h 2min 3s added to the local time</td>\n</tr>\n<tr>\n<td>@{utc} =</td>\n<td>Get Time</td>\n<td>hour min sec</td>\n<td>UTC</td>\n<td># The UTC time of execution</td>\n</tr>\n<tr>\n<td>${hour} =</td>\n<td>Get Time</td>\n<td>hour</td>\n<td>UTC - 1 hour</td>\n<td># 1h subtracted from the UTC  time</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${time} = '2007-04-27 09:14:27'\n${secs} = 27\n${year} = '2006'\n@{time} = ['16', '08', '24']\n@{utc} = ['12', '06', '21']\n${hour} = '11'\n</pre>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Get%20Time"
  },
  {
    "name": "Get Variable Value",
    "library": "BuiltIn",
    "args": [
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "default",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "default=None"
      }
    ],
    "doc": "<p>Returns variable value or <code>default</code> if the variable does not exist.</p>\n<p>The name of the variable can be given either as a normal variable name like <code>${name}</code> or in escaped format like <code>$name</code> or <code>\\${name}</code>. For the reasons explained in the <a href=\"#Using%20variables%20with%20keywords%20creating%20or%20accessing%20variables\" class=\"name\">Using variables with keywords creating or accessing variables</a> section, using the escaped format is recommended.</p>\n<p>Notice that <code>default</code> must be given positionally like <code>example</code> and not using the named-argument syntax like <code>default=example</code>. We hope to be able to remove this limitation in the future.</p>\n<p>Examples:</p>\n<pre>\n${x} =    <a href=\"#Get%20Variable%20Value\" class=\"name\">Get Variable Value</a>    $a    example\n${y} =    <a href=\"#Get%20Variable%20Value\" class=\"name\">Get Variable Value</a>    $a    ${b}\n${z} =    <a href=\"#Get%20Variable%20Value\" class=\"name\">Get Variable Value</a>    $z\n</pre>\n<p>=&gt;</p>\n<ul>\n<li><code>${x}</code> gets value of <code>${a}</code> if <code>${a}</code> exists and string <code>default</code> otherwise</li>\n<li><code>${y}</code> gets value of <code>${a}</code> if <code>${a}</code> exists and value of <code>${b}</code> otherwise</li>\n<li><code>${z}</code> is set to Python <code>None</code> if it does not exist previously</li>\n</ul>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Get%20Variable%20Value"
  },
  {
    "name": "Get Variables",
    "library": "BuiltIn",
    "args": [
      {
        "name": "no_decoration",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "no_decoration=False"
      }
    ],
    "doc": "<p>Returns a dictionary containing all variables in the current scope.</p>\n<p>Variables are returned as a special dictionary that allows accessing variables in space, case, and underscore insensitive manner similarly as accessing variables in the test data. This dictionary supports all same operations as normal Python dictionaries and, for example, Collections library can be used to access or modify it. Modifying the returned dictionary has no effect on the variables available in the current scope.</p>\n<p>By default variables are returned with <code>${}</code>, <code>@{}</code> or <code>&amp;{}</code> decoration based on variable types. Giving a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) to the optional argument <code>no_decoration</code> will return the variables without the decoration.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${example_variable} =</td>\n<td>Set Variable</td>\n<td>example value</td>\n<td></td>\n</tr>\n<tr>\n<td>${variables} =</td>\n<td>Get Variables</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Dictionary Should Contain Key</td>\n<td>${variables}</td>\n<td>\\${example_variable}</td>\n<td></td>\n</tr>\n<tr>\n<td>Dictionary Should Contain Key</td>\n<td>${variables}</td>\n<td>\\${ExampleVariable}</td>\n<td></td>\n</tr>\n<tr>\n<td>Set To Dictionary</td>\n<td>${variables}</td>\n<td>\\${name}</td>\n<td>value</td>\n</tr>\n<tr>\n<td>Variable Should Not Exist</td>\n<td>\\${name}</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${no decoration} =</td>\n<td>Get Variables</td>\n<td>no_decoration=Yes</td>\n<td></td>\n</tr>\n<tr>\n<td>Dictionary Should Contain Key</td>\n<td>${no decoration}</td>\n<td>example_variable</td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Get%20Variables"
  },
  {
    "name": "Import Library",
    "library": "BuiltIn",
    "args": [
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      }
    ],
    "doc": "<p>Imports a library with the given name and optional arguments.</p>\n<p>This functionality allows dynamic importing of libraries while tests are running. That may be necessary, if the library itself is dynamic and not yet available when test data is processed. In a normal case, libraries should be imported using the Library setting in the Setting section.</p>\n<p>This keyword supports importing libraries both using library names and physical paths. When paths are used, they must be given in absolute format or found from <a href=\"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#module-search-path\">search path</a>. Forward slashes can be used as path separators in all operating systems.</p>\n<p>It is possible to pass arguments to the imported library and also named argument syntax works if the library supports it. <code>AS</code> syntax can be used to give a custom name to the imported library.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Import Library</td>\n<td>MyLibrary</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Import Library</td>\n<td>${CURDIR}/Lib.py</td>\n<td>arg1</td>\n<td>named=arg2</td>\n<td>AS</td>\n<td>Custom</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Import%20Library"
  },
  {
    "name": "Import Resource",
    "library": "BuiltIn",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      }
    ],
    "doc": "<p>Imports a resource file with the given path.</p>\n<p>Resources imported with this keyword are set into the test suite scope similarly when importing them in the Setting table using the Resource setting.</p>\n<p>The given path must be absolute or found from <a href=\"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#module-search-path\">search path</a>. Forward slashes can be used as path separator regardless the operating system.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Import Resource</td>\n<td>${CURDIR}/resource.txt</td>\n</tr>\n<tr>\n<td>Import Resource</td>\n<td>${CURDIR}/../resources/resource.html</td>\n</tr>\n<tr>\n<td>Import Resource</td>\n<td>found_from_pythonpath.robot</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Import%20Resource"
  },
  {
    "name": "Import Variables",
    "library": "BuiltIn",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      },
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      }
    ],
    "doc": "<p>Imports a variable file with the given path and optional arguments.</p>\n<p>Variables imported with this keyword are set into the test suite scope similarly when importing them in the Setting table using the Variables setting. These variables override possible existing variables with the same names. This functionality can thus be used to import new variables, for example, for each test in a test suite.</p>\n<p>The given path must be absolute or found from <a href=\"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html##module-search-path\">search path</a>. Forward slashes can be used as path separator regardless the operating system.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Import Variables</td>\n<td>${CURDIR}/variables.py</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Import Variables</td>\n<td>${CURDIR}/../vars/env.py</td>\n<td>arg1</td>\n<td>arg2</td>\n</tr>\n<tr>\n<td>Import Variables</td>\n<td>file_from_pythonpath.py</td>\n<td></td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Import%20Variables"
  },
  {
    "name": "Keyword Should Exist",
    "library": "BuiltIn",
    "args": [
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      }
    ],
    "doc": "<p>Fails unless the given keyword exists in the current scope.</p>\n<p>Fails also if there is more than one keyword with the same name. Works both with the short name (e.g. <code>Log</code>) and the full name (e.g. <code>BuiltIn.Log</code>).</p>\n<p>The default error message can be overridden with the <code>msg</code> argument.</p>\n<p>See also <a href=\"#Variable%20Should%20Exist\" class=\"name\">Variable Should Exist</a>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Keyword%20Should%20Exist"
  },
  {
    "name": "Length Should Be",
    "library": "BuiltIn",
    "args": [
      {
        "name": "item",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "item"
      },
      {
        "name": "length",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "length"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      }
    ],
    "doc": "<p>Verifies that the length of the given item is correct.</p>\n<p>The length of the item is got using the <a href=\"#Get%20Length\" class=\"name\">Get Length</a> keyword. The default error message can be overridden with the <code>msg</code> argument.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Length%20Should%20Be"
  },
  {
    "name": "Log",
    "library": "BuiltIn",
    "args": [
      {
        "name": "message",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "message"
      },
      {
        "name": "level",
        "type": null,
        "defaultValue": "INFO",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "level=INFO"
      },
      {
        "name": "html",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "html=False"
      },
      {
        "name": "console",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "console=False"
      },
      {
        "name": "repr",
        "type": null,
        "defaultValue": "DEPRECATED",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "repr=DEPRECATED"
      },
      {
        "name": "formatter",
        "type": null,
        "defaultValue": "str",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "formatter=str"
      }
    ],
    "doc": "<p>Logs the given message with the given level.</p>\n<p>Valid levels are TRACE, DEBUG, INFO (default), WARN and ERROR. In addition to that, there are pseudo log levels HTML and CONSOLE that both log messages using INFO.</p>\n<p>Messages below the current active log level are ignored. See <a href=\"#Set%20Log%20Level\" class=\"name\">Set Log Level</a> keyword and <code>--loglevel</code> command line option for more details about setting the level.</p>\n<p>Messages logged with the WARN or ERROR levels are automatically visible also in the console and in the Test Execution Errors section in the log file.</p>\n<p>If the <code>html</code> argument is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) or the HTML pseudo log level is used, the message is considered to be HTML and special characters such as <code>&lt;</code> are not escaped. For example, logging <code>&lt;img src=\"image.png\"&gt;</code> creates an image in this case, but otherwise the message is that exact string. When using the HTML pseudo level, the messages is logged using the INFO level.</p>\n<p>If the <code>console</code> argument is true or the CONSOLE pseudo level is used, the message is written both to the console and to the log file. When using the CONSOLE pseudo level, the message is logged using the INFO level. If the message should not be logged to the log file or there are special formatting needs, use the <a href=\"#Log%20To%20Console\" class=\"name\">Log To Console</a> keyword instead.</p>\n<p>The <code>formatter</code> argument controls how to format the string representation of the message. Possible values are <code>str</code> (default), <code>repr</code>, <code>ascii</code>, <code>len</code>, and <code>type</code>. They work similarly to Python built-in functions with same names. When using <code>repr</code>, bigger lists, dictionaries and other containers are also pretty-printed so that there is one item per row. For more details see <a href=\"#String%20representations\" class=\"name\">String representations</a>.</p>\n<p>The old way to control string representation was using the <code>repr</code> argument. This argument has been deprecated and <code>formatter=repr</code> should be used instead.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Log</td>\n<td>Hello, world!</td>\n<td></td>\n<td></td>\n<td># Normal INFO message.</td>\n</tr>\n<tr>\n<td>Log</td>\n<td>Warning, world!</td>\n<td>WARN</td>\n<td></td>\n<td># Warning.</td>\n</tr>\n<tr>\n<td>Log</td>\n<td>&lt;b&gt;Hello&lt;/b&gt;, world!</td>\n<td>html=yes</td>\n<td></td>\n<td># INFO message as HTML.</td>\n</tr>\n<tr>\n<td>Log</td>\n<td>&lt;b&gt;Hello&lt;/b&gt;, world!</td>\n<td>HTML</td>\n<td></td>\n<td># Same as above.</td>\n</tr>\n<tr>\n<td>Log</td>\n<td>&lt;b&gt;Hello&lt;/b&gt;, world!</td>\n<td>DEBUG</td>\n<td>html=true</td>\n<td># DEBUG as HTML.</td>\n</tr>\n<tr>\n<td>Log</td>\n<td>Hello, console!</td>\n<td>console=yes</td>\n<td></td>\n<td># Log also to the console.</td>\n</tr>\n<tr>\n<td>Log</td>\n<td>Hello, console!</td>\n<td>CONSOLE</td>\n<td></td>\n<td># Log also to the console.</td>\n</tr>\n<tr>\n<td>Log</td>\n<td>Null is \\x00</td>\n<td>formatter=repr</td>\n<td></td>\n<td># Log <code>'Null is \\x00'</code>.</td>\n</tr>\n</table>\n<p>See <a href=\"#Log%20Many\" class=\"name\">Log Many</a> if you want to log multiple messages in one go, and <a href=\"#Log%20To%20Console\" class=\"name\">Log To Console</a> if you only want to write to the console.</p>\n<p>Formatter options <code>type</code> and <code>len</code> are new in Robot Framework 5.0. The CONSOLE level is new in Robot Framework 6.1.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Log"
  },
  {
    "name": "Log Many",
    "library": "BuiltIn",
    "args": [
      {
        "name": "messages",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*messages"
      }
    ],
    "doc": "<p>Logs the given messages as separate entries using the INFO level.</p>\n<p>Supports also logging list and dictionary variable items individually.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Log Many</td>\n<td>Hello</td>\n<td>${var}</td>\n</tr>\n<tr>\n<td>Log Many</td>\n<td>@{list}</td>\n<td>&amp;{dict}</td>\n</tr>\n</table>\n<p>See <a href=\"#Log\" class=\"name\">Log</a> and <a href=\"#Log%20To%20Console\" class=\"name\">Log To Console</a> keywords if you want to use alternative log levels, use HTML, or log to the console.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Log%20Many"
  },
  {
    "name": "Log To Console",
    "library": "BuiltIn",
    "args": [
      {
        "name": "message",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "message"
      },
      {
        "name": "stream",
        "type": null,
        "defaultValue": "STDOUT",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "stream=STDOUT"
      },
      {
        "name": "no_newline",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "no_newline=False"
      },
      {
        "name": "format",
        "type": null,
        "defaultValue": "",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "format="
      }
    ],
    "doc": "<p>Logs the given message to the console.</p>\n<p>By default uses the standard output stream. Using the standard error stream is possible by giving the <code>stream</code> argument value <code>STDERR</code> (case-insensitive).</p>\n<p>By default appends a newline to the logged message. This can be disabled by giving the <code>no_newline</code> argument a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>).</p>\n<p>By default adds no alignment formatting. The <code>format</code> argument allows, for example, alignment and customized padding of the log message. Please see the <a href=\"https://docs.python.org/3/library/string.html#formatspec\">format specification</a> for detailed alignment possibilities. This argument is new in Robot Framework 5.0.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Log To Console</td>\n<td>Hello, console!</td>\n<td></td>\n</tr>\n<tr>\n<td>Log To Console</td>\n<td>Hello, stderr!</td>\n<td>STDERR</td>\n</tr>\n<tr>\n<td>Log To Console</td>\n<td>Message starts here and is</td>\n<td>no_newline=true</td>\n</tr>\n<tr>\n<td>Log To Console</td>\n<td>continued without newline.</td>\n<td></td>\n</tr>\n<tr>\n<td>Log To Console</td>\n<td>center message with * pad</td>\n<td>format=*^60</td>\n</tr>\n<tr>\n<td>Log To Console</td>\n<td>30 spaces before msg starts</td>\n<td>format=&gt;30</td>\n</tr>\n</table>\n<p>This keyword does not log the message to the normal log file. Use <a href=\"#Log\" class=\"name\">Log</a> keyword, possibly with argument <code>console</code>, if that is desired.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Log%20To%20Console"
  },
  {
    "name": "Log Variables",
    "library": "BuiltIn",
    "args": [
      {
        "name": "level",
        "type": null,
        "defaultValue": "INFO",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "level=INFO"
      }
    ],
    "doc": "<p>Logs all variables in the current scope with given log level.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Log%20Variables"
  },
  {
    "name": "No Operation",
    "library": "BuiltIn",
    "args": [],
    "doc": "<p>Does absolutely nothing.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#No%20Operation"
  },
  {
    "name": "Pass Execution",
    "library": "BuiltIn",
    "args": [
      {
        "name": "message",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "message"
      },
      {
        "name": "tags",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*tags"
      }
    ],
    "doc": "<p>Skips rest of the current test, setup, or teardown with PASS status.</p>\n<p>This keyword can be used anywhere in the test data, but the place where used affects the behavior:</p>\n<ul>\n<li>When used in any setup or teardown (suite, test or keyword), passes that setup or teardown. Possible keyword teardowns of the started keywords are executed. Does not affect execution or statuses otherwise.</li>\n<li>When used in a test outside setup or teardown, passes that particular test case. Possible test and keyword teardowns are executed.</li>\n</ul>\n<p>Possible continuable failures before this keyword is used, as well as failures in executed teardowns, will fail the execution.</p>\n<p>It is mandatory to give a message explaining why execution was passed. By default the message is considered plain text, but starting it with <code>*HTML*</code> allows using HTML formatting.</p>\n<p>It is also possible to modify test tags passing tags after the message similarly as with <a href=\"#Fail\" class=\"name\">Fail</a> keyword. Tags starting with a hyphen (e.g. <code>-regression</code>) are removed and others added. Tags are modified using <a href=\"#Set%20Tags\" class=\"name\">Set Tags</a> and <a href=\"#Remove%20Tags\" class=\"name\">Remove Tags</a> internally, and the semantics setting and removing them are the same as with these keywords.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Pass Execution</td>\n<td>All features available in this version tested.</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Pass Execution</td>\n<td>Deprecated test.</td>\n<td>deprecated</td>\n<td>-regression</td>\n</tr>\n</table>\n<p>This keyword is typically wrapped to some other keyword, such as <a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a>, to pass based on a condition. The most common case can be handled also with <a href=\"#Pass%20Execution%20If\" class=\"name\">Pass Execution If</a>:</p>\n<table border=\"1\">\n<tr>\n<td>Run Keyword If</td>\n<td>${rc} &lt; 0</td>\n<td>Pass Execution</td>\n<td>Negative values are cool.</td>\n</tr>\n<tr>\n<td>Pass Execution If</td>\n<td>${rc} &lt; 0</td>\n<td>Negative values are cool.</td>\n<td></td>\n</tr>\n</table>\n<p>Passing execution in the middle of a test, setup or teardown should be used with care. In the worst case it leads to tests that skip all the parts that could actually uncover problems in the tested application. In cases where execution cannot continue due to external factors, it is often safer to fail the test case and make it non-critical.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Pass%20Execution"
  },
  {
    "name": "Pass Execution If",
    "library": "BuiltIn",
    "args": [
      {
        "name": "condition",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "condition"
      },
      {
        "name": "message",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "message"
      },
      {
        "name": "tags",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*tags"
      }
    ],
    "doc": "<p>Conditionally skips rest of the current test, setup, or teardown with PASS status.</p>\n<p>A wrapper for <a href=\"#Pass%20Execution\" class=\"name\">Pass Execution</a> to skip rest of the current test, setup or teardown based the given <code>condition</code>. The condition is evaluated similarly as with <a href=\"#Should%20Be%20True\" class=\"name\">Should Be True</a> keyword, and <code>message</code> and <code>*tags</code> have same semantics as with <a href=\"#Pass%20Execution\" class=\"name\">Pass Execution</a>.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>FOR</td>\n<td>${var}</td>\n<td>IN</td>\n<td>@{VALUES}</td>\n</tr>\n<tr>\n<td></td>\n<td>Pass Execution If</td>\n<td>'${var}' == 'EXPECTED'</td>\n<td>Correct value was found</td>\n</tr>\n<tr>\n<td></td>\n<td>Do Something</td>\n<td>${var}</td>\n<td></td>\n</tr>\n<tr>\n<td>END</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Pass%20Execution%20If"
  },
  {
    "name": "Regexp Escape",
    "library": "BuiltIn",
    "args": [
      {
        "name": "patterns",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*patterns"
      }
    ],
    "doc": "<p>Returns each argument string escaped for use as a regular expression.</p>\n<p>This keyword can be used to escape strings to be used with <a href=\"#Should%20Match%20Regexp\" class=\"name\">Should Match Regexp</a> and <a href=\"#Should%20Not%20Match%20Regexp\" class=\"name\">Should Not Match Regexp</a> keywords.</p>\n<p>Escaping is done with Python's <code>re.escape()</code> function.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${escaped} =</td>\n<td>Regexp Escape</td>\n<td>${original}</td>\n</tr>\n<tr>\n<td>@{strings} =</td>\n<td>Regexp Escape</td>\n<td>@{strings}</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Regexp%20Escape"
  },
  {
    "name": "Reload Library",
    "library": "BuiltIn",
    "args": [
      {
        "name": "name_or_instance",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name_or_instance"
      }
    ],
    "doc": "<p>Rechecks what keywords the specified library provides.</p>\n<p>Can be called explicitly in the test data or by a library itself when keywords it provides have changed.</p>\n<p>The library can be specified by its name or as the active instance of the library. The latter is especially useful if the library itself calls this keyword as a method.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Reload%20Library"
  },
  {
    "name": "Remove Tags",
    "library": "BuiltIn",
    "args": [
      {
        "name": "tags",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*tags"
      }
    ],
    "doc": "<p>Removes given <code>tags</code> from the current test or all tests in a suite.</p>\n<p>Tags can be given exactly or using a pattern with <code>*</code>, <code>?</code> and <code>[chars]</code> acting as wildcards. See the <a href=\"#Glob%20patterns\" class=\"name\">Glob patterns</a> section for more information.</p>\n<p>This keyword can affect either one test case or all test cases in a test suite similarly as <a href=\"#Set%20Tags\" class=\"name\">Set Tags</a> keyword.</p>\n<p>The current tags are available as a built-in variable <code>@{TEST TAGS}</code>.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Remove Tags</td>\n<td>mytag</td>\n<td>something-*</td>\n<td>?ython</td>\n</tr>\n</table>\n<p>See <a href=\"#Set%20Tags\" class=\"name\">Set Tags</a> if you want to add certain tags and <a href=\"#Fail\" class=\"name\">Fail</a> if you want to fail the test case after setting and/or removing tags.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Remove%20Tags"
  },
  {
    "name": "Repeat Keyword",
    "library": "BuiltIn",
    "args": [
      {
        "name": "repeat",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "repeat"
      },
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      }
    ],
    "doc": "<p>Executes the specified keyword multiple times.</p>\n<p><code>name</code> and <code>args</code> define the keyword that is executed similarly as with <a href=\"#Run%20Keyword\" class=\"name\">Run Keyword</a>. <code>repeat</code> specifies how many times (as a count) or how long time (as a timeout) the keyword should be executed.</p>\n<p>If <code>repeat</code> is given as count, it specifies how many times the keyword should be executed. <code>repeat</code> can be given as an integer or as a string that can be converted to an integer. If it is a string, it can have postfix <code>times</code> or <code>x</code> (case and space insensitive) to make the expression more explicit.</p>\n<p>If <code>repeat</code> is given as timeout, it must be in Robot Framework's time format (e.g. <code>1 minute</code>, <code>2 min 3 s</code>). Using a number alone (e.g. <code>1</code> or <code>1.5</code>) does not work in this context.</p>\n<p>If <code>repeat</code> is zero or negative, the keyword is not executed at all. This keyword fails immediately if any of the execution rounds fails.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Repeat Keyword</td>\n<td>5 times</td>\n<td>Go to Previous Page</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Repeat Keyword</td>\n<td>${var}</td>\n<td>Some Keyword</td>\n<td>arg1</td>\n<td>arg2</td>\n</tr>\n<tr>\n<td>Repeat Keyword</td>\n<td>2 minutes</td>\n<td>Some Keyword</td>\n<td>arg1</td>\n<td>arg2</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Repeat%20Keyword"
  },
  {
    "name": "Replace Variables",
    "library": "BuiltIn",
    "args": [
      {
        "name": "text",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "text"
      }
    ],
    "doc": "<p>Replaces variables in the given text with their current values.</p>\n<p>If the text contains undefined variables, this keyword fails. If the given <code>text</code> contains only a single variable, its value is returned as-is and it can be any object. Otherwise, this keyword always returns a string.</p>\n<p>Example:</p>\n<p>The file <code>template.txt</code> contains <code>Hello ${NAME}!</code> and variable <code>${NAME}</code> has the value <code>Robot</code>.</p>\n<table border=\"1\">\n<tr>\n<td>${template} =</td>\n<td>Get File</td>\n<td>${CURDIR}/template.txt</td>\n</tr>\n<tr>\n<td>${message} =</td>\n<td>Replace Variables</td>\n<td>${template}</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${message}</td>\n<td>Hello Robot!</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Replace%20Variables"
  },
  {
    "name": "Reset Log Level",
    "library": "BuiltIn",
    "args": [],
    "doc": "<p>Resets the log level to the original value.</p>\n<p>The original log level is set from the command line with the <code>--loglevel</code> option and is INFO by default. The active log level can be changed using the <a href=\"#Set%20Log%20Level\" class=\"name\">Set Log Level</a> keyword.</p>\n<p>New in Robot Framework 7.0.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Reset%20Log%20Level"
  },
  {
    "name": "Return From Keyword",
    "library": "BuiltIn",
    "args": [
      {
        "name": "return_values",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*return_values"
      }
    ],
    "doc": "<p>Returns from the enclosing user keyword.</p>\n<hr>\n<p><b>NOTE:</b> Robot Framework 5.0 added support for native <code>RETURN</code> statement that is recommended over this keyword. In the examples below, <code>Return From Keyword</code> can simply be replaced with <code>RETURN</code>. In addition to that, native <code>IF</code> syntax (new in RF 4.0) or inline <code>IF</code> syntax (new in RF 5.0) can be used instead of <code>Run Keyword If</code>. For example, the first example below could be written like this instead:</p>\n<pre>\nIF    ${rc} &lt; 0    RETURN\n</pre>\n<p>This keyword will eventually be deprecated and removed.</p>\n<hr>\n<p>This keyword can be used to return from a user keyword with PASS status without executing it fully. It is also possible to return values similarly as with the <code>[Return]</code> setting. For more detailed information about working with the return values, see the User Guide.</p>\n<p>This keyword is typically wrapped to some other keyword, such as <a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a>, to return based on a condition:</p>\n<pre>\nRun Keyword If    ${rc} &lt; 0    Return From Keyword\n</pre>\n<p>It is possible to use this keyword to return from a keyword also inside a for loop. That, as well as returning values, is demonstrated by the <span class=\"name\">Find Index</span> keyword in the following somewhat advanced example. Notice that it is often a good idea to move this kind of complicated logic into a library.</p>\n<pre>\n<b>***</b> Variables <b>***</b>\n@{LIST} =    foo    baz\n\n<b>***</b> Test Cases <b>***</b>\nExample\n    ${index} =    Find Index    baz    @{LIST}\n    Should Be Equal    ${index}    ${1}\n    ${index} =    Find Index    non existing    @{LIST}\n    Should Be Equal    ${index}    ${-1}\n\n<b>***</b> Keywords <b>***</b>\nFind Index\n   [Arguments]    ${element}    @{items}\n   ${index} =    Set Variable    ${0}\n   FOR    ${item}    IN    @{items}\n       Run Keyword If    '${item}' == '${element}'    Return From Keyword    ${index}\n       ${index} =    Set Variable    ${index + 1}\n   END\n   Return From Keyword    ${-1}\n</pre>\n<p>The most common use case, returning based on an expression, can be accomplished directly with <a href=\"#Return%20From%20Keyword%20If\" class=\"name\">Return From Keyword If</a>. See also <a href=\"#Run%20Keyword%20And%20Return\" class=\"name\">Run Keyword And Return</a> and <a href=\"#Run%20Keyword%20And%20Return%20If\" class=\"name\">Run Keyword And Return If</a>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Return%20From%20Keyword"
  },
  {
    "name": "Return From Keyword If",
    "library": "BuiltIn",
    "args": [
      {
        "name": "condition",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "condition"
      },
      {
        "name": "return_values",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*return_values"
      }
    ],
    "doc": "<p>Returns from the enclosing user keyword if <code>condition</code> is true.</p>\n<hr>\n<p><b>NOTE:</b> Robot Framework 5.0 added support for native <code>RETURN</code> statement and for inline <code>IF</code>, and that combination should be used instead of this keyword. For example, <a href=\"#Return%20From%20Keyword%20If\" class=\"name\">Return From Keyword If</a> usage in the <span class=\"name\">Find Index</span> example below could be replaced with this:</p>\n<pre>\nIF    '${item}' == '${element}'    RETURN    ${index}\n</pre>\n<p>This keyword will eventually be deprecated and removed.</p>\n<hr>\n<p>A wrapper for <a href=\"#Return%20From%20Keyword\" class=\"name\">Return From Keyword</a> to return based on the given condition. The condition is evaluated using the same semantics as with <a href=\"#Should%20Be%20True\" class=\"name\">Should Be True</a> keyword.</p>\n<p>Given the same example as in <a href=\"#Return%20From%20Keyword\" class=\"name\">Return From Keyword</a>, we can rewrite the <span class=\"name\">Find Index</span> keyword as follows:</p>\n<pre>\n<b>***</b> Keywords <b>***</b>\nFind Index\n   [Arguments]    ${element}    @{items}\n   ${index} =    Set Variable    ${0}\n   FOR    ${item}    IN    @{items}\n       Return From Keyword If    '${item}' == '${element}'    ${index}\n       ${index} =    Set Variable    ${index + 1}\n   END\n   Return From Keyword    ${-1}\n</pre>\n<p>See also <a href=\"#Run%20Keyword%20And%20Return\" class=\"name\">Run Keyword And Return</a> and <a href=\"#Run%20Keyword%20And%20Return%20If\" class=\"name\">Run Keyword And Return If</a>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Return%20From%20Keyword%20If"
  },
  {
    "name": "Run Keyword",
    "library": "BuiltIn",
    "args": [
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      }
    ],
    "doc": "<p>Executes the given keyword with the given arguments.</p>\n<p>Because the name of the keyword to execute is given as an argument, it can be a variable and thus set dynamically, e.g. from a return value of another keyword or from the command line.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Run%20Keyword"
  },
  {
    "name": "Run Keyword And Continue On Failure",
    "library": "BuiltIn",
    "args": [
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      }
    ],
    "doc": "<p>Runs the keyword and continues execution even if a failure occurs.</p>\n<p>The keyword name and arguments work as with <a href=\"#Run%20Keyword\" class=\"name\">Run Keyword</a>.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Run Keyword And Continue On Failure</td>\n<td>Fail</td>\n<td>This is a stupid example</td>\n</tr>\n<tr>\n<td>Log</td>\n<td>This keyword is executed</td>\n<td></td>\n</tr>\n</table>\n<p>The execution is not continued if the failure is caused by invalid syntax, timeout, or fatal exception.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Run%20Keyword%20And%20Continue%20On%20Failure"
  },
  {
    "name": "Run Keyword And Expect Error",
    "library": "BuiltIn",
    "args": [
      {
        "name": "expected_error",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "expected_error"
      },
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      }
    ],
    "doc": "<p>Runs the keyword and checks that the expected error occurred.</p>\n<p>The keyword to execute and its arguments are specified using <code>name</code> and <code>*args</code> exactly like with <a href=\"#Run%20Keyword\" class=\"name\">Run Keyword</a>.</p>\n<p>The expected error must be given in the same format as in Robot Framework reports. By default it is interpreted as a glob pattern with <code>*</code>, <code>?</code> and <code>[chars]</code> as wildcards, but that can be changed by using various prefixes explained in the table below. Prefixes are case-sensitive and they must be separated from the actual message with a colon and an optional space like <code>PREFIX: Message</code> or <code>PREFIX:Message</code>.</p>\n<table border=\"1\">\n<tr>\n<th>Prefix</th>\n<th>Explanation</th>\n</tr>\n<tr>\n<td><code>EQUALS</code></td>\n<td>Exact match. Especially useful if the error contains glob wildcards.</td>\n</tr>\n<tr>\n<td><code>STARTS</code></td>\n<td>Error must start with the specified error.</td>\n</tr>\n<tr>\n<td><code>REGEXP</code></td>\n<td>Regular expression match.</td>\n</tr>\n<tr>\n<td><code>GLOB</code></td>\n<td>Same as the default behavior.</td>\n</tr>\n</table>\n<p>See the <a href=\"#Pattern%20matching\" class=\"name\">Pattern matching</a> section for more information about glob patterns and regular expressions.</p>\n<p>If the expected error occurs, the error message is returned and it can be further processed or tested if needed. If there is no error, or the error does not match the expected error, this keyword fails.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Run Keyword And Expect Error</td>\n<td>My error</td>\n<td>Keyword</td>\n<td>arg</td>\n</tr>\n<tr>\n<td>Run Keyword And Expect Error</td>\n<td>ValueError: *</td>\n<td>Some Keyword</td>\n<td></td>\n</tr>\n<tr>\n<td>Run Keyword And Expect Error</td>\n<td>STARTS: ValueError:</td>\n<td>Some Keyword</td>\n<td></td>\n</tr>\n<tr>\n<td>Run Keyword And Expect Error</td>\n<td>EQUALS:No match for '//input[@type=\"text\"]'</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>Find Element</td>\n<td>//input[@type=\"text\"]</td>\n<td></td>\n</tr>\n<tr>\n<td>${msg} =</td>\n<td>Run Keyword And Expect Error</td>\n<td>*</td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>Keyword</td>\n<td>arg1</td>\n<td>arg2</td>\n</tr>\n<tr>\n<td>Log To Console</td>\n<td>${msg}</td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>Errors caused by invalid syntax, timeouts, or fatal exceptions are not caught by this keyword.</p>\n<p><b>NOTE:</b> Regular expression matching used to require only the beginning of the error to match the given pattern. That was changed in Robot Framework 5.0 and nowadays the pattern must match the error fully. To match only the beginning, add <code>.*</code> at the end of the pattern like <code>REGEXP: Start.*</code>.</p>\n<p><b>NOTE:</b> Robot Framework 5.0 introduced native TRY/EXCEPT functionality that is generally recommended for error handling. It supports same pattern matching syntax as this keyword.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Run%20Keyword%20And%20Expect%20Error"
  },
  {
    "name": "Run Keyword And Ignore Error",
    "library": "BuiltIn",
    "args": [
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      }
    ],
    "doc": "<p>Runs the given keyword with the given arguments and ignores possible error.</p>\n<p>This keyword returns two values, so that the first is either string <code>PASS</code> or <code>FAIL</code>, depending on the status of the executed keyword. The second value is either the return value of the keyword or the received error message. See <a href=\"#Run%20Keyword%20And%20Return%20Status\" class=\"name\">Run Keyword And Return Status</a> If you are only interested in the execution status.</p>\n<p>The keyword name and arguments work as in <a href=\"#Run%20Keyword\" class=\"name\">Run Keyword</a>. See <a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a> for a usage example.</p>\n<p>Errors caused by invalid syntax, timeouts, or fatal exceptions are not caught by this keyword. Otherwise this keyword itself never fails.</p>\n<p><b>NOTE:</b> Robot Framework 5.0 introduced native TRY/EXCEPT functionality that is generally recommended for error handling.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Run%20Keyword%20And%20Ignore%20Error"
  },
  {
    "name": "Run Keyword And Return",
    "library": "BuiltIn",
    "args": [
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      }
    ],
    "doc": "<p>Runs the specified keyword and returns from the enclosing user keyword.</p>\n<p>The keyword to execute is defined with <code>name</code> and <code>*args</code> exactly like with <a href=\"#Run%20Keyword\" class=\"name\">Run Keyword</a>. After running the keyword, returns from the enclosing user keyword and passes possible return value from the executed keyword further. Returning from a keyword has exactly same semantics as with <a href=\"#Return%20From%20Keyword\" class=\"name\">Return From Keyword</a>.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Run%20Keyword%20And%20Return\" class=\"name\">Run Keyword And Return</a></td>\n<td><span class=\"name\">My Keyword</span></td>\n<td>arg1</td>\n<td>arg2</td>\n</tr>\n<tr>\n<td># Above is equivalent to:</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td><span class=\"name\">My Keyword</span></td>\n<td>arg1</td>\n<td>arg2</td>\n</tr>\n<tr>\n<td><a href=\"#Return%20From%20Keyword\" class=\"name\">Return From Keyword</a></td>\n<td>${result}</td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>Use <a href=\"#Run%20Keyword%20And%20Return%20If\" class=\"name\">Run Keyword And Return If</a> if you want to run keyword and return based on a condition.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Run%20Keyword%20And%20Return"
  },
  {
    "name": "Run Keyword And Return If",
    "library": "BuiltIn",
    "args": [
      {
        "name": "condition",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "condition"
      },
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      }
    ],
    "doc": "<p>Runs the specified keyword and returns from the enclosing user keyword.</p>\n<p>A wrapper for <a href=\"#Run%20Keyword%20And%20Return\" class=\"name\">Run Keyword And Return</a> to run and return based on the given <code>condition</code>. The condition is evaluated using the same semantics as with <a href=\"#Should%20Be%20True\" class=\"name\">Should Be True</a> keyword.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Run%20Keyword%20And%20Return%20If\" class=\"name\">Run Keyword And Return If</a></td>\n<td>${rc} &gt; 0</td>\n<td><span class=\"name\">My Keyword</span></td>\n<td>arg1</td>\n<td>arg2</td>\n<td></td>\n</tr>\n<tr>\n<td># Above is equivalent to:</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a></td>\n<td>${rc} &gt; 0</td>\n<td><a href=\"#Run%20Keyword%20And%20Return\" class=\"name\">Run Keyword And Return</a></td>\n<td><span class=\"name\">My Keyword </span></td>\n<td>arg1</td>\n<td>arg2</td>\n</tr>\n</table>\n<p>Use <a href=\"#Return%20From%20Keyword%20If\" class=\"name\">Return From Keyword If</a> if you want to return a certain value based on a condition.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Run%20Keyword%20And%20Return%20If"
  },
  {
    "name": "Run Keyword And Return Status",
    "library": "BuiltIn",
    "args": [
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      }
    ],
    "doc": "<p>Runs the given keyword with given arguments and returns the status as a Boolean value.</p>\n<p>This keyword returns Boolean <code>True</code> if the keyword that is executed succeeds and <code>False</code> if it fails. This is useful, for example, in combination with <a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a>. If you are interested in the error message or return value, use <a href=\"#Run%20Keyword%20And%20Ignore%20Error\" class=\"name\">Run Keyword And Ignore Error</a> instead.</p>\n<p>The keyword name and arguments work as in <a href=\"#Run%20Keyword\" class=\"name\">Run Keyword</a>.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${passed} =</td>\n<td><a href=\"#Run%20Keyword%20And%20Return%20Status\" class=\"name\">Run Keyword And Return Status</a></td>\n<td>Keyword</td>\n<td>args</td>\n</tr>\n<tr>\n<td><a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a></td>\n<td>${passed}</td>\n<td>Another keyword</td>\n<td></td>\n</tr>\n</table>\n<p>Errors caused by invalid syntax, timeouts, or fatal exceptions are not caught by this keyword. Otherwise this keyword itself never fails.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Run%20Keyword%20And%20Return%20Status"
  },
  {
    "name": "Run Keyword And Warn On Failure",
    "library": "BuiltIn",
    "args": [
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      }
    ],
    "doc": "<p>Runs the specified keyword logs a warning if the keyword fails.</p>\n<p>This keyword is similar to <a href=\"#Run%20Keyword%20And%20Ignore%20Error\" class=\"name\">Run Keyword And Ignore Error</a> but if the executed keyword fails, the error message is logged as a warning to make it more visible. Returns status and possible return value or error message exactly like <a href=\"#Run%20Keyword%20And%20Ignore%20Error\" class=\"name\">Run Keyword And Ignore Error</a> does.</p>\n<p>Errors caused by invalid syntax, timeouts, or fatal exceptions are not caught by this keyword. Otherwise this keyword itself never fails.</p>\n<p>New in Robot Framework 4.0.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Run%20Keyword%20And%20Warn%20On%20Failure"
  },
  {
    "name": "Run Keyword If",
    "library": "BuiltIn",
    "args": [
      {
        "name": "condition",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "condition"
      },
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      }
    ],
    "doc": "<p>Runs the given keyword with the given arguments, if <code>condition</code> is true.</p>\n<p><b>NOTE:</b> Robot Framework 4.0 introduced built-in IF/ELSE support and using that is generally recommended over using this keyword.</p>\n<p>The given <code>condition</code> is evaluated in Python as explained in the <a href=\"#Evaluating%20expressions\" class=\"name\">Evaluating expressions</a> section, and <code>name</code> and <code>*args</code> have same semantics as with <a href=\"#Run%20Keyword\" class=\"name\">Run Keyword</a>.</p>\n<p>Example, a simple if/else construct:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a></td>\n<td>'${status}' == 'OK'</td>\n<td>Some Action</td>\n<td>arg</td>\n</tr>\n<tr>\n<td><a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a></td>\n<td>'${status}' != 'OK'</td>\n<td>Another Action</td>\n<td></td>\n</tr>\n</table>\n<p>In this example, only either <code>Some Action</code> or <code>Another Action</code> is executed, based on the value of the <code>${status}</code> variable.</p>\n<p>Variables used like <code>${variable}</code>, as in the examples above, are replaced in the expression before evaluation. Variables are also available in the evaluation namespace and can be accessed using special <code>$variable</code> syntax as explained in the <a href=\"#Evaluating%20expressions\" class=\"name\">Evaluating expressions</a> section.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a></td>\n<td>$result is None or $result == 'FAIL'</td>\n<td>Keyword</td>\n</tr>\n</table>\n<p>This keyword supports also optional ELSE and ELSE IF branches. Both of them are defined in <code>*args</code> and must use exactly format <code>ELSE</code> or <code>ELSE IF</code>, respectively. ELSE branches must contain first the name of the keyword to execute and then its possible arguments. ELSE IF branches must first contain a condition, like the first argument to this keyword, and then the keyword to execute and its possible arguments. It is possible to have ELSE branch after ELSE IF and to have multiple ELSE IF branches. Nested <a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a> usage is not supported when using ELSE and/or ELSE IF branches.</p>\n<p>Given previous example, if/else construct can also be created like this:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a></td>\n<td>'${status}' == 'PASS'</td>\n<td>Some Action</td>\n<td>arg</td>\n<td>ELSE</td>\n<td>Another Action</td>\n</tr>\n</table>\n<p>The return value of this keyword is the return value of the actually executed keyword or Python <code>None</code> if no keyword was executed (i.e. if <code>condition</code> was false). Hence, it is recommended to use ELSE and/or ELSE IF branches to conditionally assign return values from keyword to variables (see <a href=\"#Set%20Variable%20If\" class=\"name\">Set Variable If</a> you need to set fixed values conditionally). This is illustrated by the example below:</p>\n<table border=\"1\">\n<tr>\n<td>${var1} =</td>\n<td><a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a></td>\n<td>${rc} == 0</td>\n<td>Some keyword returning a value</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>ELSE IF</td>\n<td>0 &lt; ${rc} &lt; 42</td>\n<td>Another keyword</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>ELSE IF</td>\n<td>${rc} &lt; 0</td>\n<td>Another keyword with args</td>\n<td>${rc}</td>\n<td>arg2</td>\n</tr>\n<tr>\n<td>...</td>\n<td>ELSE</td>\n<td>Final keyword to handle abnormal cases</td>\n<td>${rc}</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${var2} =</td>\n<td><a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a></td>\n<td>${condition}</td>\n<td>Some keyword</td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>In this example, ${var2} will be set to <code>None</code> if ${condition} is false.</p>\n<p>Notice that <code>ELSE</code> and <code>ELSE IF</code> control words must be used explicitly and thus cannot come from variables. If you need to use literal <code>ELSE</code> and <code>ELSE IF</code> strings as arguments, you can escape them with a backslash like <code>\\ELSE</code> and <code>\\ELSE IF</code>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Run%20Keyword%20If"
  },
  {
    "name": "Run Keyword If All Tests Passed",
    "library": "BuiltIn",
    "args": [
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      }
    ],
    "doc": "<p>Runs the given keyword with the given arguments, if all tests passed.</p>\n<p>This keyword can only be used in a suite teardown. Trying to use it anywhere else results in an error.</p>\n<p>Otherwise, this keyword works exactly like <a href=\"#Run%20Keyword\" class=\"name\">Run Keyword</a>, see its documentation for more details.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Run%20Keyword%20If%20All%20Tests%20Passed"
  },
  {
    "name": "Run Keyword If Any Tests Failed",
    "library": "BuiltIn",
    "args": [
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      }
    ],
    "doc": "<p>Runs the given keyword with the given arguments, if one or more tests failed.</p>\n<p>This keyword can only be used in a suite teardown. Trying to use it anywhere else results in an error.</p>\n<p>Otherwise, this keyword works exactly like <a href=\"#Run%20Keyword\" class=\"name\">Run Keyword</a>, see its documentation for more details.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Run%20Keyword%20If%20Any%20Tests%20Failed"
  },
  {
    "name": "Run Keyword If Test Failed",
    "library": "BuiltIn",
    "args": [
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      }
    ],
    "doc": "<p>Runs the given keyword with the given arguments, if the test failed.</p>\n<p>This keyword can only be used in a test teardown. Trying to use it anywhere else results in an error.</p>\n<p>Otherwise, this keyword works exactly like <a href=\"#Run%20Keyword\" class=\"name\">Run Keyword</a>, see its documentation for more details.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Run%20Keyword%20If%20Test%20Failed"
  },
  {
    "name": "Run Keyword If Test Passed",
    "library": "BuiltIn",
    "args": [
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      }
    ],
    "doc": "<p>Runs the given keyword with the given arguments, if the test passed.</p>\n<p>This keyword can only be used in a test teardown. Trying to use it anywhere else results in an error.</p>\n<p>Otherwise, this keyword works exactly like <a href=\"#Run%20Keyword\" class=\"name\">Run Keyword</a>, see its documentation for more details.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Run%20Keyword%20If%20Test%20Passed"
  },
  {
    "name": "Run Keyword If Timeout Occurred",
    "library": "BuiltIn",
    "args": [
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      }
    ],
    "doc": "<p>Runs the given keyword if either a test or a keyword timeout has occurred.</p>\n<p>This keyword can only be used in a test teardown. Trying to use it anywhere else results in an error.</p>\n<p>Otherwise, this keyword works exactly like <a href=\"#Run%20Keyword\" class=\"name\">Run Keyword</a>, see its documentation for more details.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Run%20Keyword%20If%20Timeout%20Occurred"
  },
  {
    "name": "Run Keyword Unless",
    "library": "BuiltIn",
    "args": [
      {
        "name": "condition",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "condition"
      },
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      }
    ],
    "doc": "<p><b>DEPRECATED since RF 5.0. Use Native IF/ELSE or <a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a> instead.</b></p>\n<p>Runs the given keyword with the given arguments if <code>condition</code> is false.</p>\n<p>See <a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a> for more information and an example. Notice that this keyword does not support ELSE or ELSE IF branches like <a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a> does.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Run%20Keyword%20Unless"
  },
  {
    "name": "Run Keywords",
    "library": "BuiltIn",
    "args": [
      {
        "name": "keywords",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*keywords"
      }
    ],
    "doc": "<p>Executes all the given keywords in a sequence.</p>\n<p>This keyword is mainly useful in setups and teardowns when they need to take care of multiple actions and creating a new higher level user keyword would be an overkill.</p>\n<p>By default all arguments are expected to be keywords to be executed.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Run%20Keywords\" class=\"name\">Run Keywords</a></td>\n<td><span class=\"name\">Initialize database</span></td>\n<td><span class=\"name\">Start servers</span></td>\n<td><span class=\"name\">Clear logs</span></td>\n</tr>\n<tr>\n<td><a href=\"#Run%20Keywords\" class=\"name\">Run Keywords</a></td>\n<td>${KW 1}</td>\n<td>${KW 2}</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Run%20Keywords\" class=\"name\">Run Keywords</a></td>\n<td>@{KEYWORDS}</td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>Keywords can also be run with arguments using upper case <code>AND</code> as a separator between keywords. The keywords are executed so that the first argument is the first keyword and proceeding arguments until the first <code>AND</code> are arguments to it. First argument after the first <code>AND</code> is the second keyword and proceeding arguments until the next <code>AND</code> are its arguments. And so on.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Run%20Keywords\" class=\"name\">Run Keywords</a></td>\n<td><span class=\"name\">Initialize database</span></td>\n<td>db1</td>\n<td>AND</td>\n<td><span class=\"name\">Start servers</span></td>\n<td>server1</td>\n<td>server2</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Run%20Keywords\" class=\"name\">Run Keywords</a></td>\n<td><span class=\"name\">Initialize database</span></td>\n<td>${DB NAME}</td>\n<td>AND</td>\n<td><span class=\"name\">Start servers</span></td>\n<td>@{SERVERS}</td>\n<td>AND</td>\n<td><span class=\"name\">Clear logs</span></td>\n</tr>\n<tr>\n<td><a href=\"#Run%20Keywords\" class=\"name\">Run Keywords</a></td>\n<td>${KW}</td>\n<td>AND</td>\n<td>@{KW WITH ARGS}</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>Notice that the <code>AND</code> control argument must be used explicitly and cannot itself come from a variable. If you need to use literal <code>AND</code> string as argument, you can either use variables or escape it with a backslash like <code>\\AND</code>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Run%20Keywords"
  },
  {
    "name": "Set Global Variable",
    "library": "BuiltIn",
    "args": [
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*values"
      }
    ],
    "doc": "<p>Makes a variable available globally in all tests and suites.</p>\n<p>Variables set with this keyword are globally available in all subsequent test suites, test cases and user keywords. Also variables created Variables sections are overridden. Variables assigned locally based on keyword return values or by using <a href=\"#Set%20Suite%20Variable\" class=\"name\">Set Suite Variable</a>, <a href=\"#Set%20Test%20Variable\" class=\"name\">Set Test Variable</a> or <a href=\"#Set%20Local%20Variable\" class=\"name\">Set Local Variable</a> override these variables in that scope, but the global value is not changed in those cases.</p>\n<p>In practice setting variables with this keyword has the same effect as using command line options <code>--variable</code> and <code>--variablefile</code>. Because this keyword can change variables everywhere, it should be used with care.</p>\n<p>See <a href=\"#Set%20Suite%20Variable\" class=\"name\">Set Suite Variable</a> for more information and usage examples. See also the <a href=\"#Using%20variables%20with%20keywords%20creating%20or%20accessing%20variables\" class=\"name\">Using variables with keywords creating or accessing variables</a> section for information why it is recommended to give the variable name in escaped format like <code>$name</code> or <code>\\${name}</code> instead of the normal <code>${name}</code>.</p>\n<p><b>NOTE:</b> The <code>VAR</code> syntax introduced in Robot Framework 7.0 is recommended over this keyword.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Set%20Global%20Variable"
  },
  {
    "name": "Set Library Search Order",
    "library": "BuiltIn",
    "args": [
      {
        "name": "search_order",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*search_order"
      }
    ],
    "doc": "<p>Sets the resolution order to use when a name matches multiple keywords.</p>\n<p>The library search order is used to resolve conflicts when a keyword name that is used matches multiple keyword implementations. The first library (or resource, see below) containing the keyword is selected and that keyword implementation used. If the keyword is not found from any library (or resource), execution fails the same way as when the search order is not set.</p>\n<p>When this keyword is used, there is no need to use the long <code>LibraryName.Keyword Name</code> notation.  For example, instead of having</p>\n<table border=\"1\">\n<tr>\n<td>MyLibrary.Keyword</td>\n<td>arg</td>\n</tr>\n<tr>\n<td>MyLibrary.Another Keyword</td>\n<td></td>\n</tr>\n<tr>\n<td>MyLibrary.Keyword</td>\n<td>xxx</td>\n</tr>\n</table>\n<p>you can have</p>\n<table border=\"1\">\n<tr>\n<td>Set Library Search Order</td>\n<td>MyLibrary</td>\n</tr>\n<tr>\n<td>Keyword</td>\n<td>arg</td>\n</tr>\n<tr>\n<td>Another Keyword</td>\n<td></td>\n</tr>\n<tr>\n<td>Keyword</td>\n<td>xxx</td>\n</tr>\n</table>\n<p>This keyword can be used also to set the order of keywords in different resource files. In this case resource names must be given without paths or extensions like:</p>\n<table border=\"1\">\n<tr>\n<td>Set Library Search Order</td>\n<td>resource</td>\n<td>another_resource</td>\n</tr>\n</table>\n<p><b>NOTE:</b></p>\n<ul>\n<li>The search order is valid only in the suite where this keyword is used.</li>\n<li>Keywords in resources always have higher priority than keywords in libraries regardless the search order.</li>\n<li>The old order is returned and can be used to reset the search order later.</li>\n<li>Calling this keyword without arguments removes possible search order.</li>\n<li>Library and resource names in the search order are both case and space insensitive.</li>\n</ul>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Set%20Library%20Search%20Order"
  },
  {
    "name": "Set Local Variable",
    "library": "BuiltIn",
    "args": [
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*values"
      }
    ],
    "doc": "<p>Makes a variable available everywhere within the local scope.</p>\n<p>Variables set with this keyword are available within the local scope of the currently executed test case or in the local scope of the keyword in which they are defined. For example, if you set a variable in a user keyword, it is available only in that keyword. Other test cases or keywords will not see variables set with this keyword.</p>\n<p>This keyword is equivalent to a normal variable assignment based on a keyword return value. For example,</p>\n<pre>\n${var} =    <a href=\"#Set%20Variable\" class=\"name\">Set Variable</a>    value\n@{list} =    <a href=\"#Create%20List\" class=\"name\">Create List</a>    item1    item2    item3\n</pre>\n<p>are equivalent with</p>\n<pre>\n<a href=\"#Set%20Local%20Variable\" class=\"name\">Set Local Variable</a>    @var    value\n<a href=\"#Set%20Local%20Variable\" class=\"name\">Set Local Variable</a>    @list    item1    item2    item3\n</pre>\n<p>The main use case for this keyword is creating local variables in libraries.</p>\n<p>See <a href=\"#Set%20Suite%20Variable\" class=\"name\">Set Suite Variable</a> for more information and usage examples. See also the <a href=\"#Using%20variables%20with%20keywords%20creating%20or%20accessing%20variables\" class=\"name\">Using variables with keywords creating or accessing variables</a> section for information why it is recommended to give the variable name in escaped format like <code>$name</code> or <code>\\${name}</code> instead of the normal <code>${name}</code>.</p>\n<p>See also <a href=\"#Set%20Global%20Variable\" class=\"name\">Set Global Variable</a> and <a href=\"#Set%20Test%20Variable\" class=\"name\">Set Test Variable</a>.</p>\n<p><b>NOTE:</b> The <code>VAR</code> syntax introduced in Robot Framework 7.0 is recommended over this keyword.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Set%20Local%20Variable"
  },
  {
    "name": "Set Log Level",
    "library": "BuiltIn",
    "args": [
      {
        "name": "level",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "level"
      }
    ],
    "doc": "<p>Sets the log threshold to the specified level.</p>\n<p>Messages below the level will not logged. The default logging level is INFO, but it can be overridden with the <code>--loglevel</code> command line option. The available levels are TRACE, DEBUG, INFO (default), WARN, ERROR and NONE (no logging).</p>\n<p>The old level is returned and can be used for setting the level back later. An alternative way to reset the level is using the dedicated <a href=\"#Reset%20Log%20Level\" class=\"name\">Reset Log Level</a> keyword.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Set%20Log%20Level"
  },
  {
    "name": "Set Suite Documentation",
    "library": "BuiltIn",
    "args": [
      {
        "name": "doc",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "doc"
      },
      {
        "name": "append",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "append=False"
      },
      {
        "name": "top",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "top=False"
      },
      {
        "name": "separator",
        "type": null,
        "defaultValue": "\\ \\",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "separator=\\ \\"
      }
    ],
    "doc": "<p>Sets documentation for the current test suite.</p>\n<p>By default, the possible existing documentation is overwritten, but this can be changed using the optional <code>append</code> argument similarly as with <a href=\"#Set%20Test%20Message\" class=\"name\">Set Test Message</a> keyword.</p>\n<p>This keyword sets the documentation of the current suite by default. If the optional <code>top</code> argument is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>), the documentation of the top level suite is altered instead.</p>\n<p>An optional <code>separator</code> argument can be used to provide custom separator string when appending to the old text. A single space is used as separator by default.</p>\n<p>The documentation of the current suite is available as a built-in variable <code>${SUITE DOCUMENTATION}</code>.</p>\n<p>The <code>separator</code> argument is new in Robot Framework 7.2.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Set%20Suite%20Documentation"
  },
  {
    "name": "Set Suite Metadata",
    "library": "BuiltIn",
    "args": [
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "value",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "value"
      },
      {
        "name": "append",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "append=False"
      },
      {
        "name": "top",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "top=False"
      },
      {
        "name": "separator",
        "type": null,
        "defaultValue": "\\ \\",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "separator=\\ \\"
      }
    ],
    "doc": "<p>Sets metadata for the current test suite.</p>\n<p>By default, possible existing metadata values are overwritten, but this can be changed using the optional <code>append</code> argument similarly as with <a href=\"#Set%20Test%20Message\" class=\"name\">Set Test Message</a> keyword.</p>\n<p>This keyword sets the metadata of the current suite by default. If the optional <code>top</code> argument is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>), the metadata of the top level suite is altered instead.</p>\n<p>An optional <code>separator</code> argument can be used to provide custom separator string when appending to the old text. A single space is used as separator by default.</p>\n<p>The metadata of the current suite is available as a built-in variable <code>${SUITE METADATA}</code> in a Python dictionary. Notice that modifying this variable directly has no effect on the actual metadata the suite has.</p>\n<p>The <code>separator</code> argument is new in Robot Framework 7.2.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Set%20Suite%20Metadata"
  },
  {
    "name": "Set Suite Variable",
    "library": "BuiltIn",
    "args": [
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*values"
      }
    ],
    "doc": "<p>Makes a variable available everywhere within the scope of the current suite.</p>\n<p>Variables set with this keyword are available everywhere within the scope of the currently executed test suite. Setting variables with this keyword thus has the same effect as creating them using the Variables section in the data file or importing them from variable files.</p>\n<p>Possible child test suites do not see variables set with this keyword by default, but that can be controlled by using <code>children=&lt;option&gt;</code> as the last argument. If the specified <code>&lt;option&gt;</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>), the variable is set also to the child suites. Parent and sibling suites will never see variables set with this keyword.</p>\n<p>The name of the variable can be given either as a normal variable name like <code>${NAME}</code> or in escaped format as <code>\\${NAME}</code> or <code>$NAME</code>. For the reasons explained in the <a href=\"#Using%20variables%20with%20keywords%20creating%20or%20accessing%20variables\" class=\"name\">Using variables with keywords creating or accessing variables</a> section, <b>using the escaped format is highly recommended</b>.</p>\n<p>Variable value can be specified using the same syntax as when variables are created in the Variables section. Same way as in that section, it is possible to create scalar values, lists and dictionaries. The type is got from the variable name prefix <code>$</code>, <code>@</code> and <code>&amp;</code>, respectively.</p>\n<p>If a variable already exists within the new scope, its value will be overwritten. If a variable already exists within the current scope, the value can be left empty and the variable within the new scope gets the value within the current scope.</p>\n<p>Examples:</p>\n<pre>\nSet Suite Variable    $SCALAR    Hello, world!\nSet Suite Variable    $SCALAR    Hello, world!    children=True\nSet Suite Variable    @LIST      First item       Second item\nSet Suite Variable    &amp;DICT      key=value        foo=bar\n${ID} =    Get ID\nSet Suite Variable    $ID\n</pre>\n<p>To override an existing value with an empty value, use built-in variables <code>${EMPTY}</code>, <code>@{EMPTY}</code> or <code>&amp;{EMPTY}</code>:</p>\n<pre>\nSet Suite Variable    $SCALAR    ${EMPTY}\nSet Suite Variable    @LIST      @{EMPTY}\nSet Suite Variable    &amp;DICT      &amp;{EMPTY}\n</pre>\n<p>See also <a href=\"#Set%20Global%20Variable\" class=\"name\">Set Global Variable</a>, <a href=\"#Set%20Test%20Variable\" class=\"name\">Set Test Variable</a> and <a href=\"#Set%20Local%20Variable\" class=\"name\">Set Local Variable</a>.</p>\n<p><b>NOTE:</b> The <code>VAR</code> syntax introduced in Robot Framework 7.0 is recommended over this keyword. The basic usage is shown below and the Robot Framework User Guide explains the syntax in detail.</p>\n<pre>\nVAR    ${SCALAR}    Hello, world!                scope=SUITE\nVAR    @{LIST}      First item    Second item    scope=SUITE\nVAR    &amp;{DICT}      key=value     foo=bar        scope=SUITE\n</pre>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Set%20Suite%20Variable"
  },
  {
    "name": "Set Tags",
    "library": "BuiltIn",
    "args": [
      {
        "name": "tags",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*tags"
      }
    ],
    "doc": "<p>Adds given <code>tags</code> for the current test or all tests in a suite.</p>\n<p>When this keyword is used inside a test case, that test gets the specified tags and other tests are not affected.</p>\n<p>If this keyword is used in a suite setup, all test cases in that suite, recursively, gets the given tags. It is a failure to use this keyword in a suite teardown.</p>\n<p>The current tags are available as a built-in variable <code>@{TEST TAGS}</code>.</p>\n<p>See <a href=\"#Remove%20Tags\" class=\"name\">Remove Tags</a> if you want to remove certain tags and <a href=\"#Fail\" class=\"name\">Fail</a> if you want to fail the test case after setting and/or removing tags.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Set%20Tags"
  },
  {
    "name": "Set Task Variable",
    "library": "BuiltIn",
    "args": [
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*values"
      }
    ],
    "doc": "<p>Makes a variable available everywhere within the scope of the current task.</p>\n<p>This is an alias for <a href=\"#Set%20Test%20Variable\" class=\"name\">Set Test Variable</a> that is more applicable when creating tasks, not tests.</p>\n<p><b>NOTE:</b> The <code>VAR</code> syntax introduced in Robot Framework 7.0 is recommended over this keyword.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Set%20Task%20Variable"
  },
  {
    "name": "Set Test Documentation",
    "library": "BuiltIn",
    "args": [
      {
        "name": "doc",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "doc"
      },
      {
        "name": "append",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "append=False"
      },
      {
        "name": "separator",
        "type": null,
        "defaultValue": "\\ \\",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "separator=\\ \\"
      }
    ],
    "doc": "<p>Sets documentation for the current test case.</p>\n<p>The possible existing documentation is overwritten by default, but this can be changed using the optional <code>append</code> argument similarly as with <a href=\"#Set%20Test%20Message\" class=\"name\">Set Test Message</a> keyword.</p>\n<p>An optional <code>separator</code> argument can be used to provide custom separator string when appending to the old text. A single space is used as separator by default.</p>\n<p>The current test documentation is available as a built-in variable <code>${TEST DOCUMENTATION}</code>. This keyword can not be used in suite setup or suite teardown.</p>\n<p>The <code>separator</code> argument is new in Robot Framework 7.2.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Set%20Test%20Documentation"
  },
  {
    "name": "Set Test Message",
    "library": "BuiltIn",
    "args": [
      {
        "name": "message",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "message"
      },
      {
        "name": "append",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "append=False"
      },
      {
        "name": "separator",
        "type": null,
        "defaultValue": "\\ \\",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "separator=\\ \\"
      }
    ],
    "doc": "<p>Sets message for the current test case.</p>\n<p>If the optional <code>append</code> argument is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>), the given <code>message</code> is added after the possible earlier message.</p>\n<p>An optional <code>separator</code> argument can be used to provide custom separator string when appending to the old text. A single space is used as separator by default.</p>\n<p>In test teardown this keyword can alter the possible failure message, but otherwise failures override messages set by this keyword. Notice that in teardown the message is available as a built-in variable <code>${TEST MESSAGE}</code>.</p>\n<p>It is possible to use HTML format in the message by starting the message with <code>*HTML*</code>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Set Test Message</td>\n<td>My message</td>\n<td></td>\n</tr>\n<tr>\n<td>Set Test Message</td>\n<td>is continued.</td>\n<td>append=yes</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${TEST MESSAGE}</td>\n<td>My message is continued.</td>\n</tr>\n<tr>\n<td>Set Test Message</td>\n<td><span class=\"name\">*</span>HTML<span class=\"name\">*</span> &lt;b&gt;Hello!&lt;/b&gt;</td>\n<td></td>\n</tr>\n</table>\n<p>This keyword can not be used in suite setup or suite teardown.</p>\n<p>The <code>separator</code> argument is new in Robot Framework 7.2.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Set%20Test%20Message"
  },
  {
    "name": "Set Test Variable",
    "library": "BuiltIn",
    "args": [
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*values"
      }
    ],
    "doc": "<p>Makes a variable available everywhere within the scope of the current test.</p>\n<p>Variables set with this keyword are available everywhere within the scope of the currently executed test case. For example, if you set a variable in a user keyword, it is available both in the test case level and also in all other user keywords used in the current test. Other test cases will not see variables set with this keyword.</p>\n<p>If <a href=\"#Set%20Test%20Variable\" class=\"name\">Set Test Variable</a> is used in suite setup, the variable is available everywhere within that suite setup as well as in the corresponding suite teardown, but it is not seen by tests or possible child suites. If the keyword is used in a suite teardown, the variable is available only in that teardown.</p>\n<p>See <a href=\"#Set%20Suite%20Variable\" class=\"name\">Set Suite Variable</a> for more information and usage examples. See also the <a href=\"#Using%20variables%20with%20keywords%20creating%20or%20accessing%20variables\" class=\"name\">Using variables with keywords creating or accessing variables</a> section for information why it is recommended to give the variable name in escaped format like <code>$name</code> or <code>\\${name}</code> instead of the normal <code>${name}</code>.</p>\n<p>When creating automated tasks, not tests, it is possible to use <a href=\"#Set%20Task%20Variable\" class=\"name\">Set Task Variable</a>. See also <a href=\"#Set%20Global%20Variable\" class=\"name\">Set Global Variable</a> and <a href=\"#Set%20Local%20Variable\" class=\"name\">Set Local Variable</a>.</p>\n<p><b>NOTE:</b> The <code>VAR</code> syntax introduced in Robot Framework 7.0 is recommended over this keyword.</p>\n<p><b>NOTE:</b> Prior to Robot Framework 7.2, using <a href=\"#Set%20Test%20Variable\" class=\"name\">Set Test Variable</a> in a suite setup or teardown was an error.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Set%20Test%20Variable"
  },
  {
    "name": "Set Variable",
    "library": "BuiltIn",
    "args": [
      {
        "name": "values",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*values"
      }
    ],
    "doc": "<p>Returns the given values which can then be assigned to a variables.</p>\n<p>This keyword is mainly used for setting scalar variables. Additionally it can be used for converting a scalar variable containing a list to a list variable or to multiple scalar variables. It is recommended to use <a href=\"#Create%20List\" class=\"name\">Create List</a> when creating new lists.</p>\n<p>Examples:</p>\n<pre>\n${hi} =    Set Variable    Hello, world!\n${hi2} =    Set Variable    I said: ${hi}\n${var1}    ${var2} =    Set Variable    Hello    world\n@{list} =    Set Variable    ${list with some items}\n${item1}    ${item2} =    Set Variable    ${list with 2 items}\n</pre>\n<p>Variables created with this keyword are available only in the scope where they are created. See <a href=\"#Set%20Global%20Variable\" class=\"name\">Set Global Variable</a>, <a href=\"#Set%20Test%20Variable\" class=\"name\">Set Test Variable</a> and <a href=\"#Set%20Suite%20Variable\" class=\"name\">Set Suite Variable</a> for information on how to set variables so that they are available also in a larger scope.</p>\n<p><b>NOTE:</b> The <code>VAR</code> syntax introduced in Robot Framework 7.0 is generally recommended over this keyword. The basic usage is shown below and the Robot Framework User Guide explains the syntax in detail.</p>\n<pre>\nVAR    ${hi}     Hello, world!\nVAR    ${hi2}    I said: ${hi}\n</pre>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Set%20Variable"
  },
  {
    "name": "Set Variable If",
    "library": "BuiltIn",
    "args": [
      {
        "name": "condition",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "condition"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*values"
      }
    ],
    "doc": "<p>Sets variable based on the given condition.</p>\n<p>The basic usage is giving a condition and two values. The given condition is first evaluated the same way as with the <a href=\"#Should%20Be%20True\" class=\"name\">Should Be True</a> keyword. If the condition is true, then the first value is returned, and otherwise the second value is returned. The second value can also be omitted, in which case it has a default value None. This usage is illustrated in the examples below, where <code>${rc}</code> is assumed to be zero.</p>\n<table border=\"1\">\n<tr>\n<td>${var1} =</td>\n<td>Set Variable If</td>\n<td>${rc} == 0</td>\n<td>zero</td>\n<td>nonzero</td>\n</tr>\n<tr>\n<td>${var2} =</td>\n<td>Set Variable If</td>\n<td>${rc} &gt; 0</td>\n<td>value1</td>\n<td>value2</td>\n</tr>\n<tr>\n<td>${var3} =</td>\n<td>Set Variable If</td>\n<td>${rc} &gt; 0</td>\n<td>whatever</td>\n<td></td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${var1} = 'zero'\n${var2} = 'value2'\n${var3} = None\n</pre>\n<p>It is also possible to have 'else if' support by replacing the second value with another condition, and having two new values after it. If the first condition is not true, the second is evaluated and one of the values after it is returned based on its truth value. This can be continued by adding more conditions without a limit.</p>\n<table border=\"1\">\n<tr>\n<td>${var} =</td>\n<td>Set Variable If</td>\n<td>${rc} == 0</td>\n<td>zero</td>\n</tr>\n<tr>\n<td>...</td>\n<td>${rc} &gt; 0</td>\n<td>greater than zero</td>\n<td>less then zero</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${var} =</td>\n<td>Set Variable If</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>${rc} == 0</td>\n<td>zero</td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>${rc} == 1</td>\n<td>one</td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>${rc} == 2</td>\n<td>two</td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>${rc} &gt; 2</td>\n<td>greater than two</td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>${rc} &lt; 0</td>\n<td>less than zero</td>\n<td></td>\n</tr>\n</table>\n<p>Use <a href=\"#Get%20Variable%20Value\" class=\"name\">Get Variable Value</a> if you need to set variables dynamically based on whether a variable exist or not.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Set%20Variable%20If"
  },
  {
    "name": "Should Be Empty",
    "library": "BuiltIn",
    "args": [
      {
        "name": "item",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "item"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      }
    ],
    "doc": "<p>Verifies that the given item is empty.</p>\n<p>The length of the item is got using the <a href=\"#Get%20Length\" class=\"name\">Get Length</a> keyword. The default error message can be overridden with the <code>msg</code> argument.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Should%20Be%20Empty"
  },
  {
    "name": "Should Be Equal",
    "library": "BuiltIn",
    "args": [
      {
        "name": "first",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "first"
      },
      {
        "name": "second",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "second"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "values=True"
      },
      {
        "name": "ignore_case",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case=False"
      },
      {
        "name": "formatter",
        "type": null,
        "defaultValue": "str",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "formatter=str"
      },
      {
        "name": "strip_spaces",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "strip_spaces=False"
      },
      {
        "name": "collapse_spaces",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "collapse_spaces=False"
      },
      {
        "name": "type",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "type=None"
      },
      {
        "name": "types",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "types=None"
      }
    ],
    "doc": "<p>Fails if the given objects are unequal.</p>\n<p>Optional <code>msg</code>, <code>values</code> and <code>formatter</code> arguments specify how to construct the error message if this keyword fails:</p>\n<ul>\n<li>If <code>msg</code> is not given, the error message is <code>&lt;first&gt; != &lt;second&gt;</code>.</li>\n<li>If <code>msg</code> is given and <code>values</code> gets a true value (default), the error message is <code>&lt;msg&gt;: &lt;first&gt; != &lt;second&gt;</code>.</li>\n<li>If <code>msg</code> is given and <code>values</code> gets a false value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>), the error message is simply <code>&lt;msg&gt;</code>.</li>\n<li><code>formatter</code> controls how to format the values. Possible values are <code>str</code> (default), <code>repr</code> and <code>ascii</code>, and they work similarly as Python built-in functions with same names. See <a href=\"#String%20representations\" class=\"name\">String representations</a> for more details.</li>\n</ul>\n<p>If <code>ignore_case</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and both arguments are strings, comparison is done case-insensitively. If both arguments are multiline strings, this keyword uses <a href=\"#Multiline%20string%20comparison\" class=\"name\">multiline string comparison</a>.</p>\n<p>If <code>strip_spaces</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and both arguments are strings, the comparison is done without leading and trailing spaces. If <code>strip_spaces</code> is given a string value <code>LEADING</code> or <code>TRAILING</code> (case-insensitive), the comparison is done without leading or trailing spaces, respectively.</p>\n<p>If <code>collapse_spaces</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and both arguments are strings, the comparison is done with all white spaces replaced by a single space character.</p>\n<p>The <code>type</code> and <code>types</code> arguments control optional type conversion:</p>\n<ul>\n<li>If <code>type</code> is used, the argument <code>second</code> is converted to that type. In addition to that, the argument <code>first</code> is validated to match the type.</li>\n<li>If <code>types</code> is used, both <code>first</code> and <code>second</code> are converted.</li>\n<li>Supported types are the same as supported by <a href=\"https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#supported-conversions\">automatic argument conversion</a> such as <code>int</code>, <code>bytes</code> and <code>list</code>. Also parameterized types like <code>list[int]</code> and unions like <code>int | float</code> are supported.</li>\n<li>When using <code>type</code>, a special value <code>auto</code> can be used to convert <code>second</code> to the same type that <code>first</code> has.</li>\n<li>Using both <code>type</code> and <code>types</code> at the same time is an error.</li>\n</ul>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Should Be Equal</td>\n<td>${x}</td>\n<td>expected</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${x}</td>\n<td>expected</td>\n<td>Custom error message</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${x}</td>\n<td>expected</td>\n<td>Custom message</td>\n<td>values=False</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${x}</td>\n<td>expected</td>\n<td>ignore_case=True</td>\n<td>formatter=repr</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${x}</td>\n<td>\\x00\\x01</td>\n<td>type=bytes</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${x}</td>\n<td>${y}</td>\n<td>types=int|float</td>\n<td></td>\n</tr>\n</table>\n<p><code>strip_spaces</code> is new in Robot Framework 4.0 and <code>collapse_spaces</code> is new in Robot Framework 4.1. <code>type</code> and <code>types</code> are new in Robot Framework 7.2.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Should%20Be%20Equal"
  },
  {
    "name": "Should Be Equal As Integers",
    "library": "BuiltIn",
    "args": [
      {
        "name": "first",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "first"
      },
      {
        "name": "second",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "second"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "values=True"
      },
      {
        "name": "base",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "base=None"
      }
    ],
    "doc": "<p>Fails if objects are unequal after converting them to integers.</p>\n<p>See <a href=\"#Convert%20To%20Integer\" class=\"name\">Convert To Integer</a> for information how to convert integers from other bases than 10 using <code>base</code> argument or <code>0b/0o/0x</code> prefixes.</p>\n<p>See <a href=\"#Should%20Be%20Equal\" class=\"name\">Should Be Equal</a> for an explanation on how to override the default error message with <code>msg</code> and <code>values</code>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Should Be Equal As Integers</td>\n<td>42</td>\n<td>${42}</td>\n<td>Error message</td>\n</tr>\n<tr>\n<td>Should Be Equal As Integers</td>\n<td>ABCD</td>\n<td>abcd</td>\n<td>base=16</td>\n</tr>\n<tr>\n<td>Should Be Equal As Integers</td>\n<td>0b1011</td>\n<td>11</td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Should%20Be%20Equal%20As%20Integers"
  },
  {
    "name": "Should Be Equal As Numbers",
    "library": "BuiltIn",
    "args": [
      {
        "name": "first",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "first"
      },
      {
        "name": "second",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "second"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "values=True"
      },
      {
        "name": "precision",
        "type": null,
        "defaultValue": "6",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "precision=6"
      }
    ],
    "doc": "<p>Fails if objects are unequal after converting them to real numbers.</p>\n<p>The conversion is done with <a href=\"#Convert%20To%20Number\" class=\"name\">Convert To Number</a> keyword using the given <code>precision</code>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Should Be Equal As Numbers</td>\n<td>${x}</td>\n<td>1.1</td>\n<td></td>\n<td># Passes if ${x} is 1.1</td>\n</tr>\n<tr>\n<td>Should Be Equal As Numbers</td>\n<td>1.123</td>\n<td>1.1</td>\n<td>precision=1</td>\n<td># Passes</td>\n</tr>\n<tr>\n<td>Should Be Equal As Numbers</td>\n<td>1.123</td>\n<td>1.4</td>\n<td>precision=0</td>\n<td># Passes</td>\n</tr>\n<tr>\n<td>Should Be Equal As Numbers</td>\n<td>112.3</td>\n<td>75</td>\n<td>precision=-2</td>\n<td># Passes</td>\n</tr>\n</table>\n<p>As discussed in the documentation of <a href=\"#Convert%20To%20Number\" class=\"name\">Convert To Number</a>, machines generally cannot store floating point numbers accurately. Because of this limitation, comparing floats for equality is problematic and a correct approach to use depends on the context. This keyword uses a very naive approach of rounding the numbers before comparing them, which is both prone to rounding errors and does not work very well if numbers are really big or small. For more information about comparing floats, and ideas on how to implement your own context specific comparison algorithm, see <a href=\"http://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/\">http://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/</a>.</p>\n<p>If you want to avoid possible problems with floating point numbers, you can implement custom keywords using Python's <a href=\"http://docs.python.org/library/decimal.html\">decimal</a> or <a href=\"http://docs.python.org/library/fractions.html\">fractions</a> modules.</p>\n<p>See <a href=\"#Should%20Not%20Be%20Equal%20As%20Numbers\" class=\"name\">Should Not Be Equal As Numbers</a> for a negative version of this keyword and <a href=\"#Should%20Be%20Equal\" class=\"name\">Should Be Equal</a> for an explanation on how to override the default error message with <code>msg</code> and <code>values</code>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Should%20Be%20Equal%20As%20Numbers"
  },
  {
    "name": "Should Be Equal As Strings",
    "library": "BuiltIn",
    "args": [
      {
        "name": "first",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "first"
      },
      {
        "name": "second",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "second"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "values=True"
      },
      {
        "name": "ignore_case",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case=False"
      },
      {
        "name": "strip_spaces",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "strip_spaces=False"
      },
      {
        "name": "formatter",
        "type": null,
        "defaultValue": "str",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "formatter=str"
      },
      {
        "name": "collapse_spaces",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "collapse_spaces=False"
      }
    ],
    "doc": "<p>Fails if objects are unequal after converting them to strings.</p>\n<p>See <a href=\"#Should%20Be%20Equal\" class=\"name\">Should Be Equal</a> for an explanation on how to override the default error message with <code>msg</code>, <code>values</code> and <code>formatter</code>.</p>\n<p>If <code>ignore_case</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>), comparison is done case-insensitively. If both arguments are multiline strings, this keyword uses <a href=\"#Multiline%20string%20comparison\" class=\"name\">multiline string comparison</a>.</p>\n<p>If <code>strip_spaces</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and both arguments are strings, the comparison is done without leading and trailing spaces. If <code>strip_spaces</code> is given a string value <code>LEADING</code> or <code>TRAILING</code> (case-insensitive), the comparison is done without leading or trailing spaces, respectively.</p>\n<p>If <code>collapse_spaces</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and both arguments are strings, the comparison is done with all white spaces replaced by a single space character.</p>\n<p>Strings are always <a href=\"https://en.wikipedia.org/wiki/Unicode_equivalence\">NFC normalized</a>.</p>\n<p><code>strip_spaces</code> is new in Robot Framework 4.0 and <code>collapse_spaces</code> is new in Robot Framework 4.1.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Should%20Be%20Equal%20As%20Strings"
  },
  {
    "name": "Should Be True",
    "library": "BuiltIn",
    "args": [
      {
        "name": "condition",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "condition"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      }
    ],
    "doc": "<p>Fails if the given condition is not true.</p>\n<p>If <code>condition</code> is a string (e.g. <code>${rc} &lt; 10</code>), it is evaluated as a Python expression as explained in <a href=\"#Evaluating%20expressions\" class=\"name\">Evaluating expressions</a> and the keyword status is decided based on the result. If a non-string item is given, the status is got directly from its <a href=\"http://docs.python.org/library/stdtypes.html#truth\">truth value</a>.</p>\n<p>The default error message (<code>&lt;condition&gt; should be true</code>) is not very informative, but it can be overridden with the <code>msg</code> argument.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Should Be True</td>\n<td>${rc} &lt; 10</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be True</td>\n<td>'${status}' == 'PASS'</td>\n<td># Strings must be quoted</td>\n</tr>\n<tr>\n<td>Should Be True</td>\n<td>${number}</td>\n<td># Passes if ${number} is not zero</td>\n</tr>\n<tr>\n<td>Should Be True</td>\n<td>${list}</td>\n<td># Passes if ${list} is not empty</td>\n</tr>\n</table>\n<p>Variables used like <code>${variable}</code>, as in the examples above, are replaced in the expression before evaluation. Variables are also available in the evaluation namespace, and can be accessed using special <code>$variable</code> syntax as explained in the <a href=\"#Evaluating%20expressions\" class=\"name\">Evaluating expressions</a> section.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Should Be True</td>\n<td>$rc &lt; 10</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be True</td>\n<td>$status == 'PASS'</td>\n<td># Expected string must be quoted</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Should%20Be%20True"
  },
  {
    "name": "Should Contain",
    "library": "BuiltIn",
    "args": [
      {
        "name": "container",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "container"
      },
      {
        "name": "item",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "item"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "values=True"
      },
      {
        "name": "ignore_case",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case=False"
      },
      {
        "name": "strip_spaces",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "strip_spaces=False"
      },
      {
        "name": "collapse_spaces",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "collapse_spaces=False"
      }
    ],
    "doc": "<p>Fails if <code>container</code> does not contain <code>item</code> one or more times.</p>\n<p>Works with strings, lists, bytes, and anything that supports Python's <code>in</code> operator.</p>\n<p>See <a href=\"#Should%20Be%20Equal\" class=\"name\">Should Be Equal</a> for an explanation on how to override the default error message with arguments <code>msg</code> and <code>values</code>.</p>\n<p>If <code>ignore_case</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and compared items are strings, it indicates that comparison should be case-insensitive. If the <code>container</code> is a list-like object, string items in it are compared case-insensitively.</p>\n<p>If <code>strip_spaces</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and both arguments are strings, the comparison is done without leading and trailing spaces. If <code>strip_spaces</code> is given a string value <code>LEADING</code> or <code>TRAILING</code> (case-insensitive), the comparison is done without leading or trailing spaces, respectively.</p>\n<p>If <code>collapse_spaces</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and both arguments are strings, the comparison is done with all white spaces replaced by a single space character.</p>\n<p>If the <code>container</code> is bytes and the <code>item</code> is a string, the <code>item</code> is automatically converted to bytes. Conversion is done using the ISO-8859-1 encoding that maps each Unicode code point directly to a matching byte.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Should Contain</td>\n<td>${output}</td>\n<td>PASS</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Contain</td>\n<td>${some list}</td>\n<td>value</td>\n<td>msg=Failure!</td>\n<td>values=False</td>\n</tr>\n<tr>\n<td>Should Contain</td>\n<td>${some list}</td>\n<td>value</td>\n<td>ignore_case=True</td>\n<td></td>\n</tr>\n</table>\n<p><code>strip_spaces</code> is new in Robot Framework 4.0, <code>collapse_spaces</code> is new in Robot Framework 4.1 and automatically converting <code>item</code> to bytes is new in Robot Framework 7.1.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Should%20Contain"
  },
  {
    "name": "Should Contain Any",
    "library": "BuiltIn",
    "args": [
      {
        "name": "container",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "container"
      },
      {
        "name": "items",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*items"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": "True",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "values=True"
      },
      {
        "name": "ignore_case",
        "type": null,
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "ignore_case=False"
      },
      {
        "name": "strip_spaces",
        "type": null,
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "strip_spaces=False"
      },
      {
        "name": "collapse_spaces",
        "type": null,
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "collapse_spaces=False"
      }
    ],
    "doc": "<p>Fails if <code>container</code> does not contain any of the <code>*items</code>.</p>\n<p>Works with strings, lists, and anything that supports Python's <code>in</code> operator.</p>\n<p>Supports additional configuration parameters <code>msg</code>, <code>values</code>, <code>ignore_case</code> and <code>strip_spaces</code>, and <code>collapse_spaces</code> which have exactly the same semantics as arguments with same names have with <a href=\"#Should%20Contain\" class=\"name\">Should Contain</a>. These arguments must always be given using <code>name=value</code> syntax after all <code>items</code>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Should Contain Any</td>\n<td>${string}</td>\n<td>substring 1</td>\n<td>substring 2</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Contain Any</td>\n<td>${list}</td>\n<td>item 1</td>\n<td>item 2</td>\n<td>item 3</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Contain Any</td>\n<td>${list}</td>\n<td>item 1</td>\n<td>item 2</td>\n<td>item 3</td>\n<td>ignore_case=True</td>\n</tr>\n<tr>\n<td>Should Contain Any</td>\n<td>${list}</td>\n<td>@{items}</td>\n<td>msg=Custom message</td>\n<td>values=False</td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Should%20Contain%20Any"
  },
  {
    "name": "Should Contain X Times",
    "library": "BuiltIn",
    "args": [
      {
        "name": "container",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "container"
      },
      {
        "name": "item",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "item"
      },
      {
        "name": "count",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "count"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "ignore_case",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case=False"
      },
      {
        "name": "strip_spaces",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "strip_spaces=False"
      },
      {
        "name": "collapse_spaces",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "collapse_spaces=False"
      }
    ],
    "doc": "<p>Fails if <code>container</code> does not contain <code>item</code> <code>count</code> times.</p>\n<p>Works with strings, lists and all objects that <a href=\"#Get%20Count\" class=\"name\">Get Count</a> works with. The default error message can be overridden with <code>msg</code> and the actual count is always logged.</p>\n<p>If <code>ignore_case</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and compared items are strings, it indicates that comparison should be case-insensitive. If the <code>container</code> is a list-like object, string items in it are compared case-insensitively.</p>\n<p>If <code>strip_spaces</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and both arguments are strings, the comparison is done without leading and trailing spaces. If <code>strip_spaces</code> is given a string value <code>LEADING</code> or <code>TRAILING</code> (case-insensitive), the comparison is done without leading or trailing spaces, respectively.</p>\n<p>If <code>collapse_spaces</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and both arguments are strings, the comparison is done with all white spaces replaced by a single space character.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Should Contain X Times</td>\n<td>${output}</td>\n<td>hello</td>\n<td>2</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Contain X Times</td>\n<td>${some list}</td>\n<td>value</td>\n<td>3</td>\n<td>ignore_case=True</td>\n</tr>\n</table>\n<p><code>strip_spaces</code> is new in Robot Framework 4.0 and <code>collapse_spaces</code> is new in Robot Framework 4.1.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Should%20Contain%20X%20Times"
  },
  {
    "name": "Should End With",
    "library": "BuiltIn",
    "args": [
      {
        "name": "str1",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "str1"
      },
      {
        "name": "str2",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "str2"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "values=True"
      },
      {
        "name": "ignore_case",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case=False"
      },
      {
        "name": "strip_spaces",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "strip_spaces=False"
      },
      {
        "name": "collapse_spaces",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "collapse_spaces=False"
      }
    ],
    "doc": "<p>Fails if the string <code>str1</code> does not end with the string <code>str2</code>.</p>\n<p>See <a href=\"#Should%20Be%20Equal\" class=\"name\">Should Be Equal</a> for an explanation on how to override the default error message with <code>msg</code> and <code>values</code>, as well as for semantics of the <code>ignore_case</code>, <code>strip_spaces</code>, and <code>collapse_spaces</code> options.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Should%20End%20With"
  },
  {
    "name": "Should Match",
    "library": "BuiltIn",
    "args": [
      {
        "name": "string",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "string"
      },
      {
        "name": "pattern",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "pattern"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "values=True"
      },
      {
        "name": "ignore_case",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case=False"
      }
    ],
    "doc": "<p>Fails if the given <code>string</code> does not match the given <code>pattern</code>.</p>\n<p>Pattern matching is similar as matching files in a shell with <code>*</code>, <code>?</code> and <code>[chars]</code> acting as wildcards. See the <a href=\"#Glob%20patterns\" class=\"name\">Glob patterns</a> section for more information.</p>\n<p>If <code>ignore_case</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and compared items are strings, it indicates that comparison should be case-insensitive.</p>\n<p>See <a href=\"#Should%20Be%20Equal\" class=\"name\">Should Be Equal</a> for an explanation on how to override the default error message with <code>msg</code> and <code>values</code>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Should%20Match"
  },
  {
    "name": "Should Match Regexp",
    "library": "BuiltIn",
    "args": [
      {
        "name": "string",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "string"
      },
      {
        "name": "pattern",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "pattern"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "values=True"
      },
      {
        "name": "flags",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "flags=None"
      }
    ],
    "doc": "<p>Fails if <code>string</code> does not match <code>pattern</code> as a regular expression.</p>\n<p>See the <a href=\"#Regular%20expressions\" class=\"name\">Regular expressions</a> section for more information about regular expressions and how to use then in Robot Framework test data.</p>\n<p>Notice that the given pattern does not need to match the whole string. For example, the pattern <code>ello</code> matches the string <code>Hello world!</code>. If a full match is needed, the <code>^</code> and <code>$</code> characters can be used to denote the beginning and end of the string, respectively. For example, <code>^ello$</code> only matches the exact string <code>ello</code>.</p>\n<p>Possible flags altering how the expression is parsed (e.g. <code>re.IGNORECASE</code>, <code>re.MULTILINE</code>) can be given using the <code>flags</code> argument (e.g. <code>flags=IGNORECASE | MULTILINE</code>) or embedded to the pattern (e.g. <code>(?im)pattern</code>).</p>\n<p>If this keyword passes, it returns the portion of the string that matched the pattern. Additionally, the possible captured groups are returned.</p>\n<p>See the <a href=\"#Should%20Be%20Equal\" class=\"name\">Should Be Equal</a> keyword for an explanation on how to override the default error message with the <code>msg</code> and <code>values</code> arguments.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Should Match Regexp</td>\n<td>${output}</td>\n<td>\\\\d{6}</td>\n<td># Output contains six numbers</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Match Regexp</td>\n<td>${output}</td>\n<td>^\\\\d{6}$</td>\n<td># Six numbers and nothing more</td>\n<td></td>\n</tr>\n<tr>\n<td>${ret} =</td>\n<td>Should Match Regexp</td>\n<td>Foo: 42</td>\n<td>foo: \\\\d+</td>\n<td>flags=IGNORECASE</td>\n</tr>\n<tr>\n<td>${ret} =</td>\n<td>Should Match Regexp</td>\n<td>Foo: 42</td>\n<td>(?i)foo: \\\\d+</td>\n<td></td>\n</tr>\n<tr>\n<td>${match}</td>\n<td>${group1}</td>\n<td>${group2} =</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>Should Match Regexp</td>\n<td>Bar: 43</td>\n<td>(Foo|Bar): (\\\\d+)</td>\n<td></td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${ret} = 'Foo: 42'\n${match} = 'Bar: 43'\n${group1} = 'Bar'\n${group2} = '43'\n</pre>\n<p>The <code>flags</code> argument is new in Robot Framework 6.0.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Should%20Match%20Regexp"
  },
  {
    "name": "Should Not Be Empty",
    "library": "BuiltIn",
    "args": [
      {
        "name": "item",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "item"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      }
    ],
    "doc": "<p>Verifies that the given item is not empty.</p>\n<p>The length of the item is got using the <a href=\"#Get%20Length\" class=\"name\">Get Length</a> keyword. The default error message can be overridden with the <code>msg</code> argument.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Should%20Not%20Be%20Empty"
  },
  {
    "name": "Should Not Be Equal",
    "library": "BuiltIn",
    "args": [
      {
        "name": "first",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "first"
      },
      {
        "name": "second",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "second"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "values=True"
      },
      {
        "name": "ignore_case",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case=False"
      },
      {
        "name": "strip_spaces",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "strip_spaces=False"
      },
      {
        "name": "collapse_spaces",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "collapse_spaces=False"
      }
    ],
    "doc": "<p>Fails if the given objects are equal.</p>\n<p>See <a href=\"#Should%20Be%20Equal\" class=\"name\">Should Be Equal</a> for an explanation on how to override the default error message with <code>msg</code> and <code>values</code>.</p>\n<p>If <code>ignore_case</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and both arguments are strings, comparison is done case-insensitively.</p>\n<p>If <code>strip_spaces</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and both arguments are strings, the comparison is done without leading and trailing spaces. If <code>strip_spaces</code> is given a string value <code>LEADING</code> or <code>TRAILING</code> (case-insensitive), the comparison is done without leading or trailing spaces, respectively.</p>\n<p>If <code>collapse_spaces</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and both arguments are strings, the comparison is done with all white spaces replaced by a single space character.</p>\n<p><code>strip_spaces</code> is new in Robot Framework 4.0 and <code>collapse_spaces</code> is new in Robot Framework 4.1.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Should%20Not%20Be%20Equal"
  },
  {
    "name": "Should Not Be Equal As Integers",
    "library": "BuiltIn",
    "args": [
      {
        "name": "first",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "first"
      },
      {
        "name": "second",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "second"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "values=True"
      },
      {
        "name": "base",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "base=None"
      }
    ],
    "doc": "<p>Fails if objects are equal after converting them to integers.</p>\n<p>See <a href=\"#Convert%20To%20Integer\" class=\"name\">Convert To Integer</a> for information how to convert integers from other bases than 10 using <code>base</code> argument or <code>0b/0o/0x</code> prefixes.</p>\n<p>See <a href=\"#Should%20Be%20Equal\" class=\"name\">Should Be Equal</a> for an explanation on how to override the default error message with <code>msg</code> and <code>values</code>.</p>\n<p>See <a href=\"#Should%20Be%20Equal%20As%20Integers\" class=\"name\">Should Be Equal As Integers</a> for some usage examples.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Should%20Not%20Be%20Equal%20As%20Integers"
  },
  {
    "name": "Should Not Be Equal As Numbers",
    "library": "BuiltIn",
    "args": [
      {
        "name": "first",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "first"
      },
      {
        "name": "second",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "second"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "values=True"
      },
      {
        "name": "precision",
        "type": null,
        "defaultValue": "6",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "precision=6"
      }
    ],
    "doc": "<p>Fails if objects are equal after converting them to real numbers.</p>\n<p>The conversion is done with <a href=\"#Convert%20To%20Number\" class=\"name\">Convert To Number</a> keyword using the given <code>precision</code>.</p>\n<p>See <a href=\"#Should%20Be%20Equal%20As%20Numbers\" class=\"name\">Should Be Equal As Numbers</a> for examples on how to use <code>precision</code> and why it does not always work as expected. See also <a href=\"#Should%20Be%20Equal\" class=\"name\">Should Be Equal</a> for an explanation on how to override the default error message with <code>msg</code> and <code>values</code>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Should%20Not%20Be%20Equal%20As%20Numbers"
  },
  {
    "name": "Should Not Be Equal As Strings",
    "library": "BuiltIn",
    "args": [
      {
        "name": "first",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "first"
      },
      {
        "name": "second",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "second"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "values=True"
      },
      {
        "name": "ignore_case",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case=False"
      },
      {
        "name": "strip_spaces",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "strip_spaces=False"
      },
      {
        "name": "collapse_spaces",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "collapse_spaces=False"
      }
    ],
    "doc": "<p>Fails if objects are equal after converting them to strings.</p>\n<p>See <a href=\"#Should%20Be%20Equal\" class=\"name\">Should Be Equal</a> for an explanation on how to override the default error message with <code>msg</code> and <code>values</code>.</p>\n<p>If <code>ignore_case</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>), comparison is done case-insensitively.</p>\n<p>If <code>strip_spaces</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and both arguments are strings, the comparison is done without leading and trailing spaces. If <code>strip_spaces</code> is given a string value <code>LEADING</code> or <code>TRAILING</code> (case-insensitive), the comparison is done without leading or trailing spaces, respectively.</p>\n<p>If <code>collapse_spaces</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and both arguments are strings, the comparison is done with all white spaces replaced by a single space character.</p>\n<p>Strings are always <a href=\"https://en.wikipedia.org/wiki/Unicode_equivalence\">NFC normalized</a>.</p>\n<p><code>strip_spaces</code> is new in Robot Framework 4.0 and <code>collapse_spaces</code> is new in Robot Framework 4.1.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Should%20Not%20Be%20Equal%20As%20Strings"
  },
  {
    "name": "Should Not Be True",
    "library": "BuiltIn",
    "args": [
      {
        "name": "condition",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "condition"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      }
    ],
    "doc": "<p>Fails if the given condition is true.</p>\n<p>See <a href=\"#Should%20Be%20True\" class=\"name\">Should Be True</a> for details about how <code>condition</code> is evaluated and how <code>msg</code> can be used to override the default error message.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Should%20Not%20Be%20True"
  },
  {
    "name": "Should Not Contain",
    "library": "BuiltIn",
    "args": [
      {
        "name": "container",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "container"
      },
      {
        "name": "item",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "item"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "values=True"
      },
      {
        "name": "ignore_case",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case=False"
      },
      {
        "name": "strip_spaces",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "strip_spaces=False"
      },
      {
        "name": "collapse_spaces",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "collapse_spaces=False"
      }
    ],
    "doc": "<p>Fails if <code>container</code> contains <code>item</code> one or more times.</p>\n<p>Works with strings, lists, and anything that supports Python's <code>in</code> operator.</p>\n<p>See <a href=\"#Should%20Be%20Equal\" class=\"name\">Should Be Equal</a> for an explanation on how to override the default error message with arguments <code>msg</code> and <code>values</code>. <code>ignore_case</code> has exactly the same semantics as with <a href=\"#Should%20Contain\" class=\"name\">Should Contain</a>.</p>\n<p>If <code>strip_spaces</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and both arguments are strings, the comparison is done without leading and trailing spaces. If <code>strip_spaces</code> is given a string value <code>LEADING</code> or <code>TRAILING</code> (case-insensitive), the comparison is done without leading or trailing spaces, respectively.</p>\n<p>If <code>collapse_spaces</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and both arguments are strings, the comparison is done with all white spaces replaced by a single space character.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Should Not Contain</td>\n<td>${some list}</td>\n<td>value</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Not Contain</td>\n<td>${output}</td>\n<td>FAILED</td>\n<td>ignore_case=True</td>\n</tr>\n</table>\n<p><code>strip_spaces</code> is new in Robot Framework 4.0 and <code>collapse_spaces</code> is new in Robot Framework 4.1.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Should%20Not%20Contain"
  },
  {
    "name": "Should Not Contain Any",
    "library": "BuiltIn",
    "args": [
      {
        "name": "container",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "container"
      },
      {
        "name": "items",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*items"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": "True",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "values=True"
      },
      {
        "name": "ignore_case",
        "type": null,
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "ignore_case=False"
      },
      {
        "name": "strip_spaces",
        "type": null,
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "strip_spaces=False"
      },
      {
        "name": "collapse_spaces",
        "type": null,
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "collapse_spaces=False"
      }
    ],
    "doc": "<p>Fails if <code>container</code> contains one or more of the <code>*items</code>.</p>\n<p>Works with strings, lists, and anything that supports Python's <code>in</code> operator.</p>\n<p>Supports additional configuration parameters <code>msg</code>, <code>values</code>, <code>ignore_case</code> and <code>strip_spaces</code>, and <code>collapse_spaces</code> which have exactly the same semantics as arguments with same names have with <a href=\"#Should%20Contain\" class=\"name\">Should Contain</a>. These arguments must always be given using <code>name=value</code> syntax after all <code>items</code>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Should Not Contain Any</td>\n<td>${string}</td>\n<td>substring 1</td>\n<td>substring 2</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Not Contain Any</td>\n<td>${list}</td>\n<td>item 1</td>\n<td>item 2</td>\n<td>item 3</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Not Contain Any</td>\n<td>${list}</td>\n<td>item 1</td>\n<td>item 2</td>\n<td>item 3</td>\n<td>ignore_case=True</td>\n</tr>\n<tr>\n<td>Should Not Contain Any</td>\n<td>${list}</td>\n<td>@{items}</td>\n<td>msg=Custom message</td>\n<td>values=False</td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Should%20Not%20Contain%20Any"
  },
  {
    "name": "Should Not End With",
    "library": "BuiltIn",
    "args": [
      {
        "name": "str1",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "str1"
      },
      {
        "name": "str2",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "str2"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "values=True"
      },
      {
        "name": "ignore_case",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case=False"
      },
      {
        "name": "strip_spaces",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "strip_spaces=False"
      },
      {
        "name": "collapse_spaces",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "collapse_spaces=False"
      }
    ],
    "doc": "<p>Fails if the string <code>str1</code> ends with the string <code>str2</code>.</p>\n<p>See <a href=\"#Should%20Be%20Equal\" class=\"name\">Should Be Equal</a> for an explanation on how to override the default error message with <code>msg</code> and <code>values</code>, as well as for semantics of the <code>ignore_case</code>, <code>strip_spaces</code>, and <code>collapse_spaces</code> options.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Should%20Not%20End%20With"
  },
  {
    "name": "Should Not Match",
    "library": "BuiltIn",
    "args": [
      {
        "name": "string",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "string"
      },
      {
        "name": "pattern",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "pattern"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "values=True"
      },
      {
        "name": "ignore_case",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case=False"
      }
    ],
    "doc": "<p>Fails if the given <code>string</code> matches the given <code>pattern</code>.</p>\n<p>Pattern matching is similar as matching files in a shell with <code>*</code>, <code>?</code> and <code>[chars]</code> acting as wildcards. See the <a href=\"#Glob%20patterns\" class=\"name\">Glob patterns</a> section for more information.</p>\n<p>If <code>ignore_case</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>), the comparison is case-insensitive.</p>\n<p>See <a href=\"#Should%20Be%20Equal\" class=\"name\">Should Be Equal</a> for an explanation on how to override the default error message with <code>msg</code> and <span class=\"name\">`values</span>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Should%20Not%20Match"
  },
  {
    "name": "Should Not Match Regexp",
    "library": "BuiltIn",
    "args": [
      {
        "name": "string",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "string"
      },
      {
        "name": "pattern",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "pattern"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "values=True"
      },
      {
        "name": "flags",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "flags=None"
      }
    ],
    "doc": "<p>Fails if <code>string</code> matches <code>pattern</code> as a regular expression.</p>\n<p>See <a href=\"#Should%20Match%20Regexp\" class=\"name\">Should Match Regexp</a> for more information about arguments.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Should%20Not%20Match%20Regexp"
  },
  {
    "name": "Should Not Start With",
    "library": "BuiltIn",
    "args": [
      {
        "name": "str1",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "str1"
      },
      {
        "name": "str2",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "str2"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "values=True"
      },
      {
        "name": "ignore_case",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case=False"
      },
      {
        "name": "strip_spaces",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "strip_spaces=False"
      },
      {
        "name": "collapse_spaces",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "collapse_spaces=False"
      }
    ],
    "doc": "<p>Fails if the string <code>str1</code> starts with the string <code>str2</code>.</p>\n<p>See <a href=\"#Should%20Be%20Equal\" class=\"name\">Should Be Equal</a> for an explanation on how to override the default error message with <code>msg</code> and <code>values</code>, as well as for semantics of the <code>ignore_case</code>, <code>strip_spaces</code>, and <code>collapse_spaces</code> options.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Should%20Not%20Start%20With"
  },
  {
    "name": "Should Start With",
    "library": "BuiltIn",
    "args": [
      {
        "name": "str1",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "str1"
      },
      {
        "name": "str2",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "str2"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "values=True"
      },
      {
        "name": "ignore_case",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case=False"
      },
      {
        "name": "strip_spaces",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "strip_spaces=False"
      },
      {
        "name": "collapse_spaces",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "collapse_spaces=False"
      }
    ],
    "doc": "<p>Fails if the string <code>str1</code> does not start with the string <code>str2</code>.</p>\n<p>See <a href=\"#Should%20Be%20Equal\" class=\"name\">Should Be Equal</a> for an explanation on how to override the default error message with <code>msg</code> and <code>values</code>, as well as for semantics of the <code>ignore_case</code>, <code>strip_spaces</code>, and <code>collapse_spaces</code> options.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Should%20Start%20With"
  },
  {
    "name": "Skip",
    "library": "BuiltIn",
    "args": [
      {
        "name": "msg",
        "type": null,
        "defaultValue": "Skipped with Skip keyword.",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=Skipped with Skip keyword."
      }
    ],
    "doc": "<p>Skips the rest of the current test.</p>\n<p>Skips the remaining keywords in the current test and sets the given message to the test. If the test has teardown, it will be executed.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Skip"
  },
  {
    "name": "Skip If",
    "library": "BuiltIn",
    "args": [
      {
        "name": "condition",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "condition"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      }
    ],
    "doc": "<p>Skips the rest of the current test if the <code>condition</code> is True.</p>\n<p>Skips the remaining keywords in the current test and sets the given message to the test. If <code>msg</code> is not given, the <code>condition</code> will be used as the message. If the test has teardown, it will be executed.</p>\n<p>If the <code>condition</code> evaluates to False, does nothing.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Skip%20If"
  },
  {
    "name": "Sleep",
    "library": "BuiltIn",
    "args": [
      {
        "name": "time_",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "time_"
      },
      {
        "name": "reason",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "reason=None"
      }
    ],
    "doc": "<p>Pauses the test executed for the given time.</p>\n<p><code>time</code> may be either a number or a time string. Time strings are in a format such as <code>1 day 2 hours 3 minutes 4 seconds 5milliseconds</code> or <code>1d 2h 3m 4s 5ms</code>, and they are fully explained in an appendix of Robot Framework User Guide. Providing a value without specifying minutes or seconds, defaults to seconds. Optional <span class=\"name\">reason</span> can be used to explain why sleeping is necessary. Both the time slept and the reason are logged.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Sleep</td>\n<td>42</td>\n<td></td>\n</tr>\n<tr>\n<td>Sleep</td>\n<td>1.5</td>\n<td></td>\n</tr>\n<tr>\n<td>Sleep</td>\n<td>2 minutes 10 seconds</td>\n<td></td>\n</tr>\n<tr>\n<td>Sleep</td>\n<td>10s</td>\n<td>Wait for a reply</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Sleep"
  },
  {
    "name": "Variable Should Exist",
    "library": "BuiltIn",
    "args": [
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "message",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message=None"
      }
    ],
    "doc": "<p>Fails unless the given variable exists within the current scope.</p>\n<p>The name of the variable can be given either as a normal variable name like <code>${name}</code> or in escaped format like <code>$name</code> or <code>\\${name}</code>. For the reasons explained in the <a href=\"#Using%20variables%20with%20keywords%20creating%20or%20accessing%20variables\" class=\"name\">Using variables with keywords creating or accessing variables</a> section, using the escaped format is recommended.</p>\n<p>The default error message can be overridden with the <code>message</code> argument. Notice that it must be given positionally like <code>A message</code> and not using the named-argument syntax like <code>message=A message</code>. We hope to be able to remove this limitation in the future.</p>\n<p>See also <a href=\"#Variable%20Should%20Not%20Exist\" class=\"name\">Variable Should Not Exist</a> and <a href=\"#Keyword%20Should%20Exist\" class=\"name\">Keyword Should Exist</a>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Variable%20Should%20Exist"
  },
  {
    "name": "Variable Should Not Exist",
    "library": "BuiltIn",
    "args": [
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "message",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message=None"
      }
    ],
    "doc": "<p>Fails if the given variable exists within the current scope.</p>\n<p>The name of the variable can be given either as a normal variable name like <code>${name}</code> or in escaped format like <code>$name</code> or <code>\\${name}</code>. For the reasons explained in the <a href=\"#Using%20variables%20with%20keywords%20creating%20or%20accessing%20variables\" class=\"name\">Using variables with keywords creating or accessing variables</a> section, using the escaped format is recommended.</p>\n<p>The default error message can be overridden with the <code>message</code> argument. Notice that it must be given positionally like <code>A message</code> and not using the named-argument syntax like <code>message=A message</code>. We hope to be able to remove this limitation in the future.</p>\n<p>See also <a href=\"#Variable%20Should%20Exist\" class=\"name\">Variable Should Exist</a> and <a href=\"#Keyword%20Should%20Exist\" class=\"name\">Keyword Should Exist</a>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Variable%20Should%20Not%20Exist"
  },
  {
    "name": "Wait Until Keyword Succeeds",
    "library": "BuiltIn",
    "args": [
      {
        "name": "retry",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "retry"
      },
      {
        "name": "retry_interval",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "retry_interval"
      },
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      }
    ],
    "doc": "<p>Runs the specified keyword and retries if it fails.</p>\n<p><code>name</code> and <code>args</code> define the keyword that is executed similarly as with <a href=\"#Run%20Keyword\" class=\"name\">Run Keyword</a>. How long to retry running the keyword is defined using <code>retry</code> argument either as timeout or count. <code>retry_interval</code> is the time to wait between execution attempts.</p>\n<p>If <code>retry</code> is given as timeout, it must be in Robot Framework's time format (e.g. <code>1 minute</code>, <code>2 min 3 s</code>, <code>4.5</code>) that is explained in an appendix of Robot Framework User Guide. If it is given as count, it must have <code>times</code> or <code>x</code> postfix (e.g. <code>5 times</code>, <code>10 x</code>). <code>retry_interval</code> must always be given in Robot Framework's time format.</p>\n<p>By default, <code>retry_interval</code> is the time to wait <i>after</i> a keyword has failed. For example, if the first run takes 2 seconds and the retry interval is 3 seconds, the second run starts 5 seconds after the first run started. If <code>retry_interval</code> start with prefix <code>strict:</code>, the execution time of the previous keyword is subtracted from the retry time. With the earlier example the second run would thus start 3 seconds after the first run started. A warning is logged if keyword execution time is longer than a strict interval.</p>\n<p>If the keyword does not succeed regardless of retries, this keyword fails. If the executed keyword passes, its return value is returned.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Wait Until Keyword Succeeds</td>\n<td>2 min</td>\n<td>5 sec</td>\n<td>My keyword</td>\n<td>argument</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Wait Until Keyword Succeeds</td>\n<td>3x</td>\n<td>200ms</td>\n<td>My keyword</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Wait Until Keyword Succeeds</td>\n<td>3x</td>\n<td>strict: 200ms</td>\n<td>My keyword</td>\n</tr>\n</table>\n<p>All normal failures are caught by this keyword. Errors caused by invalid syntax, test or keyword timeouts, or fatal exceptions (caused e.g. by <a href=\"#Fatal%20Error\" class=\"name\">Fatal Error</a>) are not caught.</p>\n<p>Running the same keyword multiple times inside this keyword can create lots of output and considerably increase the size of the generated output files. It is possible to remove unnecessary keywords from the outputs using the <code>--remove-keywords WUKS</code> command line option.</p>\n<p>Support for \"strict\" retry interval is new in Robot Framework 4.1.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Wait%20Until%20Keyword%20Succeeds"
  },
  {
    "name": "Append To List",
    "library": "Collections",
    "args": [
      {
        "name": "list_",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "list_"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*values"
      }
    ],
    "doc": "<p>Adds <code>values</code> to the end of <code>list</code>.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Append To List</td>\n<td>${L1}</td>\n<td>xxx</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Append To List</td>\n<td>${L2}</td>\n<td>x</td>\n<td>y</td>\n<td>z</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${L1} = ['a', 'xxx']\n${L2} = ['a', 'b', 'x', 'y', 'z']\n</pre>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Append%20To%20List"
  },
  {
    "name": "Combine Lists",
    "library": "Collections",
    "args": [
      {
        "name": "lists",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*lists"
      }
    ],
    "doc": "<p>Combines the given <code>lists</code> together and returns the result.</p>\n<p>The given lists are not altered by this keyword.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${x} =</td>\n<td>Combine Lists</td>\n<td>${L1}</td>\n<td>${L2}</td>\n<td></td>\n</tr>\n<tr>\n<td>${y} =</td>\n<td>Combine Lists</td>\n<td>${L1}</td>\n<td>${L2}</td>\n<td>${L1}</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${x} = ['a', 'a', 'b']\n${y} = ['a', 'a', 'b', 'a']\n${L1} and ${L2} are not changed.\n</pre>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Combine%20Lists"
  },
  {
    "name": "Convert To Dictionary",
    "library": "Collections",
    "args": [
      {
        "name": "item",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "item"
      }
    ],
    "doc": "<p>Converts the given <code>item</code> to a Python <code>dict</code> type.</p>\n<p>Mainly useful for converting other mappings to normal dictionaries. This includes converting Robot Framework's own <code>DotDict</code> instances that it uses if variables are created using the <code>&amp;{var}</code> syntax.</p>\n<p>Use <span class=\"name\">Create Dictionary</span> from the BuiltIn library for constructing new dictionaries.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Convert%20To%20Dictionary"
  },
  {
    "name": "Convert To List",
    "library": "Collections",
    "args": [
      {
        "name": "item",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "item"
      }
    ],
    "doc": "<p>Converts the given <code>item</code> to a Python <code>list</code> type.</p>\n<p>Mainly useful for converting tuples and other iterable to lists. Use <span class=\"name\">Create List</span> from the BuiltIn library for constructing new lists.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Convert%20To%20List"
  },
  {
    "name": "Copy Dictionary",
    "library": "Collections",
    "args": [
      {
        "name": "dictionary",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "dictionary"
      },
      {
        "name": "deepcopy",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "deepcopy=False"
      }
    ],
    "doc": "<p>Returns a copy of the given dictionary.</p>\n<p>By default, returns a new dictionary with same items as in the original. Set the <code>deepcopy</code> argument to a true value if also items should be copied.</p>\n<p>The given dictionary is never altered by this keyword.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Copy%20Dictionary"
  },
  {
    "name": "Copy List",
    "library": "Collections",
    "args": [
      {
        "name": "list_",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "list_"
      },
      {
        "name": "deepcopy",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "deepcopy=False"
      }
    ],
    "doc": "<p>Returns a copy of the given list.</p>\n<p>By default, returns a new list with same items as in the original. Set the <code>deepcopy</code> argument to a true value if also items should be copied.</p>\n<p>The given list is never altered by this keyword.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Copy%20List"
  },
  {
    "name": "Count Values In List",
    "library": "Collections",
    "args": [
      {
        "name": "list_",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "list_"
      },
      {
        "name": "value",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "value"
      },
      {
        "name": "start",
        "type": null,
        "defaultValue": "0",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "start=0"
      },
      {
        "name": "end",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "end=None"
      }
    ],
    "doc": "<p>Returns the number of occurrences of the given <code>value</code> in <code>list</code>.</p>\n<p>The search can be narrowed to the selected sublist by the <code>start</code> and <code>end</code> indexes having the same semantics as with <a href=\"#Get%20Slice%20From%20List\" class=\"name\">Get Slice From List</a> keyword. The given list is never altered by this keyword.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${x} =</td>\n<td>Count Values In List</td>\n<td>${L3}</td>\n<td>b</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${x} = 1\n${L3} is not changed\n</pre>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Count%20Values%20In%20List"
  },
  {
    "name": "Dictionaries Should Be Equal",
    "library": "Collections",
    "args": [
      {
        "name": "dict1",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "dict1"
      },
      {
        "name": "dict2",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "dict2"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "values=True"
      },
      {
        "name": "ignore_keys",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_keys=None"
      },
      {
        "name": "ignore_case",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case=False"
      },
      {
        "name": "ignore_value_order",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_value_order=False"
      }
    ],
    "doc": "<p>Fails if the given dictionaries are not equal.</p>\n<p>First the equality of dictionaries' keys is checked and after that all the key value pairs. If there are differences between the values, those are listed in the error message. The types of the dictionaries do not need to be same.</p>\n<p><code>ignore_keys</code> can be used to provide a list of keys to ignore in the comparison. It can be an actual list or a Python list literal. This option is new in Robot Framework 6.1. It works recursively with nested dictionaries starting from Robot Framework 7.0.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Dictionaries Should Be Equal</td>\n<td>${dict}</td>\n<td>${expected}</td>\n<td></td>\n</tr>\n<tr>\n<td>Dictionaries Should Be Equal</td>\n<td>${dict}</td>\n<td>${expected}</td>\n<td>ignore_keys=${ignored}</td>\n</tr>\n<tr>\n<td>Dictionaries Should Be Equal</td>\n<td>${dict}</td>\n<td>${expected}</td>\n<td>ignore_keys=['key1', 'key2']</td>\n</tr>\n</table>\n<p>See <a href=\"#Lists%20Should%20Be%20Equal\" class=\"name\">Lists Should Be Equal</a> for more information about configuring the error message with <code>msg</code> and <code>values</code> arguments.</p>\n<p>The <code>ignore_case</code> argument can be used to make comparison case-insensitive. See the <a href=\"#Ignore%20case\" class=\"name\">Ignore case</a> section for more details. This option is new in Robot Framework 7.0.</p>\n<p>The <code>ignore_value_order</code> argument can be used to make comparison in case of list-like values to ignore the order of the elements in the lists. Using it requires items to be sortable. This option is new in Robot Framework 7.2.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Dictionaries%20Should%20Be%20Equal"
  },
  {
    "name": "Dictionary Should Contain Item",
    "library": "Collections",
    "args": [
      {
        "name": "dictionary",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "dictionary"
      },
      {
        "name": "key",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "key"
      },
      {
        "name": "value",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "value"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "ignore_case",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case=False"
      }
    ],
    "doc": "<p>An item of <code>key</code> / <code>value</code> must be found in a <code>dictionary</code>.</p>\n<p>Use the <code>msg</code> argument to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be used to make comparison case-insensitive. See the <a href=\"#Ignore%20case\" class=\"name\">Ignore case</a> section for more details. This option is new in Robot Framework 7.0.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Dictionary%20Should%20Contain%20Item"
  },
  {
    "name": "Dictionary Should Contain Key",
    "library": "Collections",
    "args": [
      {
        "name": "dictionary",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "dictionary"
      },
      {
        "name": "key",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "key"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "ignore_case",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case=False"
      }
    ],
    "doc": "<p>Fails if <code>key</code> is not found from <code>dictionary</code>.</p>\n<p>Use the <code>msg</code> argument to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be used to make comparison case-insensitive. See the <a href=\"#Ignore%20case\" class=\"name\">Ignore case</a> section for more details. This option is new in Robot Framework 7.0.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Dictionary%20Should%20Contain%20Key"
  },
  {
    "name": "Dictionary Should Contain Sub Dictionary",
    "library": "Collections",
    "args": [
      {
        "name": "dict1",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "dict1"
      },
      {
        "name": "dict2",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "dict2"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "values=True"
      },
      {
        "name": "ignore_case",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case=False"
      },
      {
        "name": "ignore_value_order",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_value_order=False"
      }
    ],
    "doc": "<p>Fails unless all items in <code>dict2</code> are found from <code>dict1</code>.</p>\n<p>See <a href=\"#Lists%20Should%20Be%20Equal\" class=\"name\">Lists Should Be Equal</a> for more information about configuring the error message with <code>msg</code> and <code>values</code> arguments.</p>\n<p>The <code>ignore_case</code> argument can be used to make comparison case-insensitive. See the <a href=\"#Ignore%20case\" class=\"name\">Ignore case</a> section for more details. This option is new in Robot Framework 7.0.</p>\n<p>The <code>ignore_value_order</code> argument can be used to make comparison in case of list-like values to ignore the order of the elements in the lists. Using it requires items to be sortable. This option is new in Robot Framework 7.2.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Dictionary%20Should%20Contain%20Sub%20Dictionary"
  },
  {
    "name": "Dictionary Should Contain Value",
    "library": "Collections",
    "args": [
      {
        "name": "dictionary",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "dictionary"
      },
      {
        "name": "value",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "value"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "ignore_case",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case=False"
      }
    ],
    "doc": "<p>Fails if <code>value</code> is not found from <code>dictionary</code>.</p>\n<p>Use the <code>msg</code> argument to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be used to make comparison case-insensitive. See the <a href=\"#Ignore%20case\" class=\"name\">Ignore case</a> section for more details. This option is new in Robot Framework 7.0.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Dictionary%20Should%20Contain%20Value"
  },
  {
    "name": "Dictionary Should Not Contain Key",
    "library": "Collections",
    "args": [
      {
        "name": "dictionary",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "dictionary"
      },
      {
        "name": "key",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "key"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "ignore_case",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case=False"
      }
    ],
    "doc": "<p>Fails if <code>key</code> is found from <code>dictionary</code>.</p>\n<p>Use the <code>msg</code> argument to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be used to make comparison case-insensitive. See the <a href=\"#Ignore%20case\" class=\"name\">Ignore case</a> section for more details. This option is new in Robot Framework 7.0.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Dictionary%20Should%20Not%20Contain%20Key"
  },
  {
    "name": "Dictionary Should Not Contain Value",
    "library": "Collections",
    "args": [
      {
        "name": "dictionary",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "dictionary"
      },
      {
        "name": "value",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "value"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "ignore_case",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case=False"
      }
    ],
    "doc": "<p>Fails if <code>value</code> is found from <code>dictionary</code>.</p>\n<p>Use the <code>msg</code> argument to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be used to make comparison case-insensitive. See the <a href=\"#Ignore%20case\" class=\"name\">Ignore case</a> section for more details. This option is new in Robot Framework 7.0.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Dictionary%20Should%20Not%20Contain%20Value"
  },
  {
    "name": "Get Dictionary Items",
    "library": "Collections",
    "args": [
      {
        "name": "dictionary",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "dictionary"
      },
      {
        "name": "sort_keys",
        "type": null,
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "sort_keys=True"
      }
    ],
    "doc": "<p>Returns items of the given <code>dictionary</code> as a list.</p>\n<p>Uses <a href=\"#Get%20Dictionary%20Keys\" class=\"name\">Get Dictionary Keys</a> to get keys and then returns corresponding items. By default, keys are sorted and items returned in that order, but this can be changed by giving <code>sort_keys</code> a false value.</p>\n<p>Items are returned as a flat list so that first item is a key, second item is a corresponding value, third item is the second key, and so on.</p>\n<p>The given <code>dictionary</code> is never altered by this keyword.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${sorted} =</td>\n<td>Get Dictionary Items</td>\n<td>${D3}</td>\n<td></td>\n</tr>\n<tr>\n<td>${unsorted} =</td>\n<td>Get Dictionary Items</td>\n<td>${D3}</td>\n<td>sort_keys=False</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Get%20Dictionary%20Items"
  },
  {
    "name": "Get Dictionary Keys",
    "library": "Collections",
    "args": [
      {
        "name": "dictionary",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "dictionary"
      },
      {
        "name": "sort_keys",
        "type": null,
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "sort_keys=True"
      }
    ],
    "doc": "<p>Returns keys of the given <code>dictionary</code> as a list.</p>\n<p>By default, keys are returned in sorted order (assuming they are sortable), but they can be returned in the original order by giving <code>sort_keys</code> a false value.</p>\n<p>The given <code>dictionary</code> is never altered by this keyword.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${sorted} =</td>\n<td>Get Dictionary Keys</td>\n<td>${D3}</td>\n<td></td>\n</tr>\n<tr>\n<td>${unsorted} =</td>\n<td>Get Dictionary Keys</td>\n<td>${D3}</td>\n<td>sort_keys=False</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Get%20Dictionary%20Keys"
  },
  {
    "name": "Get Dictionary Values",
    "library": "Collections",
    "args": [
      {
        "name": "dictionary",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "dictionary"
      },
      {
        "name": "sort_keys",
        "type": null,
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "sort_keys=True"
      }
    ],
    "doc": "<p>Returns values of the given <code>dictionary</code> as a list.</p>\n<p>Uses <a href=\"#Get%20Dictionary%20Keys\" class=\"name\">Get Dictionary Keys</a> to get keys and then returns corresponding values. By default, keys are sorted and values returned in that order, but this can be changed by giving <code>sort_keys</code> a false value.</p>\n<p>The given <code>dictionary</code> is never altered by this keyword.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${sorted} =</td>\n<td>Get Dictionary Values</td>\n<td>${D3}</td>\n<td></td>\n</tr>\n<tr>\n<td>${unsorted} =</td>\n<td>Get Dictionary Values</td>\n<td>${D3}</td>\n<td>sort_keys=False</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Get%20Dictionary%20Values"
  },
  {
    "name": "Get From Dictionary",
    "library": "Collections",
    "args": [
      {
        "name": "dictionary",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "dictionary"
      },
      {
        "name": "key",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "key"
      },
      {
        "name": "default",
        "type": null,
        "defaultValue": "",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "default="
      }
    ],
    "doc": "<p>Returns a value from the given <code>dictionary</code> based on the given <code>key</code>.</p>\n<p>If the given <code>key</code> cannot be found from the <code>dictionary</code>, this keyword fails. If optional <code>default</code> value is given, it will be returned instead of failing.</p>\n<p>The given dictionary is never altered by this keyword.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${value} =</td>\n<td>Get From Dictionary</td>\n<td>${D3}</td>\n<td>b</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${value} = 2\n</pre>\n<p>Support for <code>default</code> is new in Robot Framework 6.0.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Get%20From%20Dictionary"
  },
  {
    "name": "Get From List",
    "library": "Collections",
    "args": [
      {
        "name": "list_",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "list_"
      },
      {
        "name": "index",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "index"
      }
    ],
    "doc": "<p>Returns the value specified with an <code>index</code> from <code>list</code>.</p>\n<p>The given list is never altered by this keyword.</p>\n<p>Index <code>0</code> means the first position, <code>1</code> the second, and so on. Similarly, <code>-1</code> is the last position, <code>-2</code> the second last, and so on. Using an index that does not exist on the list causes an error. The index can be either an integer or a string that can be converted to an integer.</p>\n<p>Examples (including Python equivalents in comments):</p>\n<table border=\"1\">\n<tr>\n<td>${x} =</td>\n<td>Get From List</td>\n<td>${L5}</td>\n<td>0</td>\n<td># L5[0]</td>\n</tr>\n<tr>\n<td>${y} =</td>\n<td>Get From List</td>\n<td>${L5}</td>\n<td>-2</td>\n<td># L5[-2]</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${x} = 'a'\n${y} = 'd'\n${L5} is not changed\n</pre>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Get%20From%20List"
  },
  {
    "name": "Get Index From List",
    "library": "Collections",
    "args": [
      {
        "name": "list_",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "list_"
      },
      {
        "name": "value",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "value"
      },
      {
        "name": "start",
        "type": null,
        "defaultValue": "0",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "start=0"
      },
      {
        "name": "end",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "end=None"
      }
    ],
    "doc": "<p>Returns the index of the first occurrence of the <code>value</code> on the list.</p>\n<p>The search can be narrowed to the selected sublist by the <code>start</code> and <code>end</code> indexes having the same semantics as with <a href=\"#Get%20Slice%20From%20List\" class=\"name\">Get Slice From List</a> keyword. In case the value is not found, -1 is returned. The given list is never altered by this keyword.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${x} =</td>\n<td>Get Index From List</td>\n<td>${L5}</td>\n<td>d</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${x} = 3\n${L5} is not changed\n</pre>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Get%20Index%20From%20List"
  },
  {
    "name": "Get Match Count",
    "library": "Collections",
    "args": [
      {
        "name": "list",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "list"
      },
      {
        "name": "pattern",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "pattern"
      },
      {
        "name": "case_insensitive",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "case_insensitive: bool | None = None"
      },
      {
        "name": "whitespace_insensitive",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "whitespace_insensitive: bool | None = None"
      },
      {
        "name": "ignore_case",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case: bool = False"
      },
      {
        "name": "ignore_whitespace",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_whitespace: bool = False"
      }
    ],
    "doc": "<p>Returns the count of matches to <code>pattern</code> in <code>list</code>.</p>\n<p>For more information on <code>pattern</code>, <code>case_insensitive/ignore_case</code>, and <code>whitespace_insensitive/ignore_whitespace</code>, see <a href=\"#Should%20Contain%20Match\" class=\"name\">Should Contain Match</a>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${count}=</td>\n<td>Get Match Count</td>\n<td>${list}</td>\n<td>a*</td>\n<td># ${count} will be the count of strings beginning with 'a'</td>\n<td></td>\n</tr>\n<tr>\n<td>${count}=</td>\n<td>Get Match Count</td>\n<td>${list}</td>\n<td>regexp=a.*</td>\n<td># ${matches} will be the count of strings beginning with 'a' (regexp version)</td>\n<td></td>\n</tr>\n<tr>\n<td>${count}=</td>\n<td>Get Match Count</td>\n<td>${list}</td>\n<td>a*</td>\n<td>case_insensitive=${True}</td>\n<td># ${matches} will be the count of strings beginning with 'a' or 'A'</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Get%20Match%20Count"
  },
  {
    "name": "Get Matches",
    "library": "Collections",
    "args": [
      {
        "name": "list",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "list"
      },
      {
        "name": "pattern",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "pattern"
      },
      {
        "name": "case_insensitive",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "case_insensitive: bool | None = None"
      },
      {
        "name": "whitespace_insensitive",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "whitespace_insensitive: bool | None = None"
      },
      {
        "name": "ignore_case",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case: bool = False"
      },
      {
        "name": "ignore_whitespace",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_whitespace: bool = False"
      }
    ],
    "doc": "<p>Returns a list of matches to <code>pattern</code> in <code>list</code>.</p>\n<p>For more information on <code>pattern</code>, <code>case_insensitive/ignore_case</code>, and <code>whitespace_insensitive/ignore_whitespace</code>, see <a href=\"#Should%20Contain%20Match\" class=\"name\">Should Contain Match</a>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${matches}=</td>\n<td>Get Matches</td>\n<td>${list}</td>\n<td>a*</td>\n<td># ${matches} will contain any string beginning with 'a'</td>\n<td></td>\n</tr>\n<tr>\n<td>${matches}=</td>\n<td>Get Matches</td>\n<td>${list}</td>\n<td>regexp=a.*</td>\n<td># ${matches} will contain any string beginning with 'a' (regexp version)</td>\n<td></td>\n</tr>\n<tr>\n<td>${matches}=</td>\n<td>Get Matches</td>\n<td>${list}</td>\n<td>a*</td>\n<td>ignore_case=True</td>\n<td># ${matches} will contain any string beginning with 'a' or 'A'</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Get%20Matches"
  },
  {
    "name": "Get Slice From List",
    "library": "Collections",
    "args": [
      {
        "name": "list_",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "list_"
      },
      {
        "name": "start",
        "type": null,
        "defaultValue": "0",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "start=0"
      },
      {
        "name": "end",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "end=None"
      }
    ],
    "doc": "<p>Returns a slice of the given list between <code>start</code> and <code>end</code> indexes.</p>\n<p>The given list is never altered by this keyword.</p>\n<p>If both <code>start</code> and <code>end</code> are given, a sublist containing values from <code>start</code> to <code>end</code> is returned. This is the same as <code>list[start:end]</code> in Python. To get all items from the beginning, use 0 as the start value, and to get all items until and including the end, use <code>None</code> (default) as the end value.</p>\n<p>Using <code>start</code> or <code>end</code> not found on the list is the same as using the largest (or smallest) available index.</p>\n<p>Examples (incl. Python equivalents in comments):</p>\n<table border=\"1\">\n<tr>\n<td>${x} =</td>\n<td>Get Slice From List</td>\n<td>${L5}</td>\n<td>2</td>\n<td>4</td>\n<td># L5[2:4]</td>\n</tr>\n<tr>\n<td>${y} =</td>\n<td>Get Slice From List</td>\n<td>${L5}</td>\n<td>1</td>\n<td></td>\n<td># L5[1:None]</td>\n</tr>\n<tr>\n<td>${z} =</td>\n<td>Get Slice From List</td>\n<td>${L5}</td>\n<td>end=-2</td>\n<td></td>\n<td># L5[0:-2]</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${x} = ['c', 'd']\n${y} = ['b', 'c', 'd', 'e']\n${z} = ['a', 'b', 'c']\n${L5} is not changed\n</pre>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Get%20Slice%20From%20List"
  },
  {
    "name": "Insert Into List",
    "library": "Collections",
    "args": [
      {
        "name": "list_",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "list_"
      },
      {
        "name": "index",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "index"
      },
      {
        "name": "value",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "value"
      }
    ],
    "doc": "<p>Inserts <code>value</code> into <code>list</code> to the position specified with <code>index</code>.</p>\n<p>Index <code>0</code> adds the value into the first position, <code>1</code> to the second, and so on. Inserting from right works with negative indices so that <code>-1</code> is the second last position, <code>-2</code> third last, and so on. Use <a href=\"#Append%20To%20List\" class=\"name\">Append To List</a> to add items to the end of the list.</p>\n<p>If the absolute value of the index is greater than the length of the list, the value is added at the end (positive index) or the beginning (negative index). An index can be given either as an integer or a string that can be converted to an integer.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Insert Into List</td>\n<td>${L1}</td>\n<td>0</td>\n<td>xxx</td>\n</tr>\n<tr>\n<td>Insert Into List</td>\n<td>${L2}</td>\n<td>${-1}</td>\n<td>xxx</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${L1} = ['xxx', 'a']\n${L2} = ['a', 'xxx', 'b']\n</pre>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Insert%20Into%20List"
  },
  {
    "name": "Keep In Dictionary",
    "library": "Collections",
    "args": [
      {
        "name": "dictionary",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "dictionary"
      },
      {
        "name": "keys",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*keys"
      }
    ],
    "doc": "<p>Keeps the given <code>keys</code> in the <code>dictionary</code> and removes all other.</p>\n<p>If the given <code>key</code> cannot be found from the <code>dictionary</code>, it is ignored.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Keep In Dictionary</td>\n<td>${D5}</td>\n<td>b</td>\n<td>x</td>\n<td>d</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${D5} = {'b': 2, 'd': 4}\n</pre>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Keep%20In%20Dictionary"
  },
  {
    "name": "List Should Contain Sub List",
    "library": "Collections",
    "args": [
      {
        "name": "list1",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "list1"
      },
      {
        "name": "list2",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "list2"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "values=True"
      },
      {
        "name": "ignore_case",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case=False"
      }
    ],
    "doc": "<p>Fails if not all elements in <code>list2</code> are found in <code>list1</code>.</p>\n<p>The order of values and the number of values are not taken into account.</p>\n<p>See <a href=\"#Lists%20Should%20Be%20Equal\" class=\"name\">Lists Should Be Equal</a> for more information about configuring the error message with <code>msg</code> and <code>values</code> arguments.</p>\n<p>The <code>ignore_case</code> argument can be used to make comparison case-insensitive. See the <a href=\"#Ignore%20case\" class=\"name\">Ignore case</a> section for more details. This option is new in Robot Framework 7.0.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#List%20Should%20Contain%20Sub%20List"
  },
  {
    "name": "List Should Contain Value",
    "library": "Collections",
    "args": [
      {
        "name": "list_",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "list_"
      },
      {
        "name": "value",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "value"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "ignore_case",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case=False"
      }
    ],
    "doc": "<p>Fails if the <code>value</code> is not found from <code>list</code>.</p>\n<p>Use the <code>msg</code> argument to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be used to make comparison case-insensitive. See the <a href=\"#Ignore%20case\" class=\"name\">Ignore case</a> section for more details. This option is new in Robot Framework 7.0.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#List%20Should%20Contain%20Value"
  },
  {
    "name": "List Should Not Contain Duplicates",
    "library": "Collections",
    "args": [
      {
        "name": "list_",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "list_"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "ignore_case",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case=False"
      }
    ],
    "doc": "<p>Fails if any element in the <code>list</code> is found from it more than once.</p>\n<p>The default error message lists all the elements that were found from the <code>list</code> multiple times, but it can be overridden by giving a custom <code>msg</code>. All multiple times found items and their counts are also logged.</p>\n<p>This keyword works with all iterables that can be converted to a list. The original iterable is never altered.</p>\n<p>The <code>ignore_case</code> argument can be used to make comparison case-insensitive. See the <a href=\"#Ignore%20case\" class=\"name\">Ignore case</a> section for more details. This option is new in Robot Framework 7.0.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#List%20Should%20Not%20Contain%20Duplicates"
  },
  {
    "name": "List Should Not Contain Value",
    "library": "Collections",
    "args": [
      {
        "name": "list_",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "list_"
      },
      {
        "name": "value",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "value"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "ignore_case",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case=False"
      }
    ],
    "doc": "<p>Fails if the <code>value</code> is found from <code>list</code>.</p>\n<p>Use the <code>msg</code> argument to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be used to make comparison case-insensitive. See the <a href=\"#Ignore%20case\" class=\"name\">Ignore case</a> section for more details. This option is new in Robot Framework 7.0.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#List%20Should%20Not%20Contain%20Value"
  },
  {
    "name": "Lists Should Be Equal",
    "library": "Collections",
    "args": [
      {
        "name": "list1",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "list1"
      },
      {
        "name": "list2",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "list2"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "values=True"
      },
      {
        "name": "names",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "names=None"
      },
      {
        "name": "ignore_order",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_order=False"
      },
      {
        "name": "ignore_case",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case=False"
      }
    ],
    "doc": "<p>Fails if given lists are unequal.</p>\n<p>The keyword first verifies that the lists have equal lengths, and then it checks are all their values equal. Possible differences between the values are listed in the default error message like <code>Index 4: ABC != Abc</code>. The types of the lists do not need to be the same. For example, Python tuple and list with same content are considered equal.</p>\n<p>The error message can be configured using <code>msg</code> and <code>values</code> arguments:</p>\n<ul>\n<li>If <code>msg</code> is not given, the default error message is used.</li>\n<li>If <code>msg</code> is given and <code>values</code> gets a value considered true (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>), the error message starts with the given <code>msg</code> followed by a newline and the default message.</li>\n<li>If <code>msg</code> is given and <code>values</code>  is not given a true value, the error message is just the given <code>msg</code>.</li>\n</ul>\n<p>The optional <code>names</code> argument can be used for naming the indices shown in the default error message. It can either be a list of names matching the indices in the lists or a dictionary where keys are indices that need to be named. It is not necessary to name all indices. When using a dictionary, keys can be either integers or strings that can be converted to integers.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${names} =</td>\n<td>Create List</td>\n<td>First Name</td>\n<td>Family Name</td>\n<td>Email</td>\n</tr>\n<tr>\n<td>Lists Should Be Equal</td>\n<td>${people1}</td>\n<td>${people2}</td>\n<td>names=${names}</td>\n<td></td>\n</tr>\n<tr>\n<td>${names} =</td>\n<td>Create Dictionary</td>\n<td>0=First Name</td>\n<td>2=Email</td>\n<td></td>\n</tr>\n<tr>\n<td>Lists Should Be Equal</td>\n<td>${people1}</td>\n<td>${people2}</td>\n<td>names=${names}</td>\n<td></td>\n</tr>\n</table>\n<p>If the items in index 2 would differ in the above examples, the error message would contain a row like <code>Index 2 (email): name@foo.com != name@bar.com</code>.</p>\n<p>The optional <code>ignore_order</code> argument can be used to ignore the order of the elements in the lists. Using it requires items to be sortable. This option works recursively with nested lists starting from Robot Framework 7.0.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${list1} =</td>\n<td>Create List</td>\n<td>apple</td>\n<td>cherry</td>\n<td>banana</td>\n</tr>\n<tr>\n<td>${list2} =</td>\n<td>Create List</td>\n<td>cherry</td>\n<td>banana</td>\n<td>apple</td>\n</tr>\n<tr>\n<td>Lists Should Be Equal</td>\n<td>${list1}</td>\n<td>${list2}</td>\n<td>ignore_order=True</td>\n<td></td>\n</tr>\n</table>\n<p>The <code>ignore_case</code> argument can be used to make comparison case-insensitive. See the <a href=\"#Ignore%20case\" class=\"name\">Ignore case</a> section for more details. This option is new in Robot Framework 7.0.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Lists%20Should%20Be%20Equal"
  },
  {
    "name": "Log Dictionary",
    "library": "Collections",
    "args": [
      {
        "name": "dictionary",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "dictionary"
      },
      {
        "name": "level",
        "type": null,
        "defaultValue": "INFO",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "level=INFO"
      }
    ],
    "doc": "<p>Logs the size and contents of the <code>dictionary</code> using given <code>level</code>.</p>\n<p>Valid levels are TRACE, DEBUG, INFO (default), and WARN.</p>\n<p>If you only want to log the size, use keyword <span class=\"name\">Get Length</span> from the BuiltIn library.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Log%20Dictionary"
  },
  {
    "name": "Log List",
    "library": "Collections",
    "args": [
      {
        "name": "list_",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "list_"
      },
      {
        "name": "level",
        "type": null,
        "defaultValue": "INFO",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "level=INFO"
      }
    ],
    "doc": "<p>Logs the length and contents of the <code>list</code> using given <code>level</code>.</p>\n<p>Valid levels are TRACE, DEBUG, INFO (default), and WARN.</p>\n<p>If you only want to the length, use keyword <span class=\"name\">Get Length</span> from the BuiltIn library.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Log%20List"
  },
  {
    "name": "Pop From Dictionary",
    "library": "Collections",
    "args": [
      {
        "name": "dictionary",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "dictionary"
      },
      {
        "name": "key",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "key"
      },
      {
        "name": "default",
        "type": null,
        "defaultValue": "",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "default="
      }
    ],
    "doc": "<p>Pops the given <code>key</code> from the <code>dictionary</code> and returns its value.</p>\n<p>By default the keyword fails if the given <code>key</code> cannot be found from the <code>dictionary</code>. If optional <code>default</code> value is given, it will be returned instead of failing.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${val}=</td>\n<td>Pop From Dictionary</td>\n<td>${D3}</td>\n<td>b</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${val} = 2\n${D3} = {'a': 1, 'c': 3}\n</pre>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Pop%20From%20Dictionary"
  },
  {
    "name": "Remove Duplicates",
    "library": "Collections",
    "args": [
      {
        "name": "list_",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "list_"
      }
    ],
    "doc": "<p>Returns a list without duplicates based on the given <code>list</code>.</p>\n<p>Creates and returns a new list that contains all items in the given list so that one item can appear only once. Order of the items in the new list is the same as in the original except for missing duplicates. Number of the removed duplicates is logged.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Remove%20Duplicates"
  },
  {
    "name": "Remove From Dictionary",
    "library": "Collections",
    "args": [
      {
        "name": "dictionary",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "dictionary"
      },
      {
        "name": "keys",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*keys"
      }
    ],
    "doc": "<p>Removes the given <code>keys</code> from the <code>dictionary</code>.</p>\n<p>If the given <code>key</code> cannot be found from the <code>dictionary</code>, it is ignored.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Remove From Dictionary</td>\n<td>${D3}</td>\n<td>b</td>\n<td>x</td>\n<td>y</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${D3} = {'a': 1, 'c': 3}\n</pre>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Remove%20From%20Dictionary"
  },
  {
    "name": "Remove From List",
    "library": "Collections",
    "args": [
      {
        "name": "list_",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "list_"
      },
      {
        "name": "index",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "index"
      }
    ],
    "doc": "<p>Removes and returns the value specified with an <code>index</code> from <code>list</code>.</p>\n<p>Index <code>0</code> means the first position, <code>1</code> the second and so on. Similarly, <code>-1</code> is the last position, <code>-2</code> the second last, and so on. Using an index that does not exist on the list causes an error. The index can be either an integer or a string that can be converted to an integer.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${x} =</td>\n<td>Remove From List</td>\n<td>${L2}</td>\n<td>0</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${x} = 'a'\n${L2} = ['b']\n</pre>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Remove%20From%20List"
  },
  {
    "name": "Remove Values From List",
    "library": "Collections",
    "args": [
      {
        "name": "list_",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "list_"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*values"
      }
    ],
    "doc": "<p>Removes all occurrences of given <code>values</code> from <code>list</code>.</p>\n<p>It is not an error if a value does not exist in the list at all.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Remove Values From List</td>\n<td>${L4}</td>\n<td>a</td>\n<td>c</td>\n<td>e</td>\n<td>f</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${L4} = ['b', 'd']\n</pre>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Remove%20Values%20From%20List"
  },
  {
    "name": "Reverse List",
    "library": "Collections",
    "args": [
      {
        "name": "list_",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "list_"
      }
    ],
    "doc": "<p>Reverses the given list in place.</p>\n<p>Note that the given list is changed and nothing is returned. Use <a href=\"#Copy%20List\" class=\"name\">Copy List</a> first, if you need to keep also the original order.</p>\n<table border=\"1\">\n<tr>\n<td>Reverse List</td>\n<td>${L3}</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${L3} = ['c', 'b', 'a']\n</pre>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Reverse%20List"
  },
  {
    "name": "Set List Value",
    "library": "Collections",
    "args": [
      {
        "name": "list_",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "list_"
      },
      {
        "name": "index",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "index"
      },
      {
        "name": "value",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "value"
      }
    ],
    "doc": "<p>Sets the value of <code>list</code> specified by <code>index</code> to the given <code>value</code>.</p>\n<p>Index <code>0</code> means the first position, <code>1</code> the second and so on. Similarly, <code>-1</code> is the last position, <code>-2</code> second last, and so on. Using an index that does not exist on the list causes an error. The index can be either an integer or a string that can be converted to an integer.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Set List Value</td>\n<td>${L3}</td>\n<td>1</td>\n<td>xxx</td>\n</tr>\n<tr>\n<td>Set List Value</td>\n<td>${L3}</td>\n<td>-1</td>\n<td>yyy</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${L3} = ['a', 'xxx', 'yyy']\n</pre>\n<p>Starting from Robot Framework 6.1, it is also possible to use the native item assignment syntax. This is equivalent to the above:</p>\n<table border=\"1\">\n<tr>\n<td>${L3}[1] =</td>\n<td>Set Variable</td>\n<td>xxx</td>\n</tr>\n<tr>\n<td>${L3}[-1] =</td>\n<td>Set Variable</td>\n<td>yyy</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Set%20List%20Value"
  },
  {
    "name": "Set To Dictionary",
    "library": "Collections",
    "args": [
      {
        "name": "dictionary",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "dictionary"
      },
      {
        "name": "key_value_pairs",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*key_value_pairs"
      },
      {
        "name": "items",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_NAMED",
        "required": false,
        "repr": "**items"
      }
    ],
    "doc": "<p>Adds the given <code>key_value_pairs</code> and/or <code>items</code> to the <code>dictionary</code>.</p>\n<p>If given items already exist in the dictionary, their values are updated.</p>\n<p>It is easiest to specify items using the <code>name=value</code> syntax:</p>\n<table border=\"1\">\n<tr>\n<td>Set To Dictionary</td>\n<td>${D1}</td>\n<td>key=value</td>\n<td>second=${2}</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${D1} = {'a': 1, 'key': 'value', 'second': 2}\n</pre>\n<p>A limitation of the above syntax is that keys must be strings. That can be avoided by passing keys and values as separate arguments:</p>\n<table border=\"1\">\n<tr>\n<td>Set To Dictionary</td>\n<td>${D1}</td>\n<td>key</td>\n<td>value</td>\n<td>${2}</td>\n<td>value 2</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${D1} = {'a': 1, 'key': 'value', 2: 'value 2'}\n</pre>\n<p>Starting from Robot Framework 6.1, it is also possible to use the native item assignment syntax. This is equivalent to the above:</p>\n<table border=\"1\">\n<tr>\n<td>${D1}[key] =</td>\n<td>Set Variable</td>\n<td>value</td>\n</tr>\n<tr>\n<td>${D1}[${2}] =</td>\n<td>Set Variable</td>\n<td>value 2</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Set%20To%20Dictionary"
  },
  {
    "name": "Should Contain Match",
    "library": "Collections",
    "args": [
      {
        "name": "list",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "list"
      },
      {
        "name": "pattern",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "pattern"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "case_insensitive",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "case_insensitive: bool | None = None"
      },
      {
        "name": "whitespace_insensitive",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "whitespace_insensitive: bool | None = None"
      },
      {
        "name": "ignore_case",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case: bool = False"
      },
      {
        "name": "ignore_whitespace",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_whitespace: bool = False"
      }
    ],
    "doc": "<p>Fails if <code>pattern</code> is not found in <code>list</code>.</p>\n<p>By default, pattern matching is similar to matching files in a shell and is case-sensitive and whitespace-sensitive. In the pattern syntax, <code>*</code> matches to anything and <code>?</code> matches to any single character. You can also prepend <code>glob=</code> to your pattern to explicitly use this pattern matching behavior.</p>\n<p>If you prepend <code>regexp=</code> to your pattern, your pattern will be used according to the Python <a href=\"http://docs.python.org/library/re.html\">re module</a> regular expression syntax. Notice that the backslash character often used with regular expressions is an escape character in Robot Framework data and needs to be escaped with another backslash like <code>regexp=\\\\d{6}</code>. See <span class=\"name\">BuiltIn.Should Match Regexp</span> for more details.</p>\n<p>Matching is case-sensitive by default, but that can be changed by giving the <code>ignore_case</code> argument a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>). This argument is new in Robot Framework 7.0, but with earlier versions it is possible to use <code>case_insensitive</code> for the same purpose.</p>\n<p>It is possible to ignore all whitespace by giving the <code>ignore_whitespace</code> argument a true value. This argument is new in Robot Framework 7.0 as well, and with earlier versions it is possible to use <code>whitespace_insensitive</code>.</p>\n<p>Notice that both <code>case_insensitive</code> and <code>whitespace_insensitive</code> are considered deprecated. They will eventually be removed.</p>\n<p>Non-string values in lists are ignored when matching patterns.</p>\n<p>Use the <code>msg</code> argument to override the default error message.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Should Contain Match</td>\n<td>${list}</td>\n<td>a*</td>\n<td></td>\n<td></td>\n<td># Match strings beginning with 'a'.</td>\n</tr>\n<tr>\n<td>Should Contain Match</td>\n<td>${list}</td>\n<td>regexp=a.*</td>\n<td></td>\n<td></td>\n<td># Same as the above but with regexp.</td>\n</tr>\n<tr>\n<td>Should Contain Match</td>\n<td>${list}</td>\n<td>regexp=\\\\d{6}</td>\n<td></td>\n<td></td>\n<td># Match strings containing six digits.</td>\n</tr>\n<tr>\n<td>Should Contain Match</td>\n<td>${list}</td>\n<td>a*</td>\n<td>ignore_case=True</td>\n<td></td>\n<td># Match strings beginning with 'a' or 'A'.</td>\n</tr>\n<tr>\n<td>Should Contain Match</td>\n<td>${list}</td>\n<td>ab*</td>\n<td>ignore_whitespace=yes</td>\n<td></td>\n<td># Match strings beginning with 'ab' with possible whitespace ignored.</td>\n</tr>\n<tr>\n<td>Should Contain Match</td>\n<td>${list}</td>\n<td>ab*</td>\n<td>ignore_whitespace=true</td>\n<td>ignore_case=true</td>\n<td># Same as the above but also ignore case.</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Should%20Contain%20Match"
  },
  {
    "name": "Should Not Contain Match",
    "library": "Collections",
    "args": [
      {
        "name": "list",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "list"
      },
      {
        "name": "pattern",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "pattern"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "case_insensitive",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "case_insensitive: bool | None = None"
      },
      {
        "name": "whitespace_insensitive",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "whitespace_insensitive: bool | None = None"
      },
      {
        "name": "ignore_case",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case: bool = False"
      },
      {
        "name": "ignore_whitespace",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_whitespace: bool = False"
      }
    ],
    "doc": "<p>Fails if <code>pattern</code> is found in <code>list</code>.</p>\n<p>Exact opposite of <a href=\"#Should%20Contain%20Match\" class=\"name\">Should Contain Match</a> keyword. See that keyword for information about arguments and usage in general.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Should%20Not%20Contain%20Match"
  },
  {
    "name": "Sort List",
    "library": "Collections",
    "args": [
      {
        "name": "list_",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "list_"
      }
    ],
    "doc": "<p>Sorts the given list in place.</p>\n<p>Sorting fails if items in the list are not comparable with each others. For example, sorting a list containing strings and numbers is not possible.</p>\n<p>Note that the given list is changed and nothing is returned. Use <a href=\"#Copy%20List\" class=\"name\">Copy List</a> first, if you need to preserve the list also in the original order.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Collections.html#Sort%20List"
  },
  {
    "name": "Call Stored Procedure",
    "library": "Database",
    "args": [
      {
        "name": "procedure_name",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "procedure_name: str"
      },
      {
        "name": "procedure_params",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "List",
              "typedoc": "list",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "procedure_params: List | None = None"
      },
      {
        "name": "no_transaction",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "no_transaction: bool = False"
      },
      {
        "name": "alias",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "alias: str | None = None"
      },
      {
        "name": "additional_output_params",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "List",
              "typedoc": "list",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "additional_output_params: List | None = None"
      },
      {
        "name": "",
        "type": null,
        "defaultValue": null,
        "kind": "NAMED_ONLY_MARKER",
        "required": false,
        "repr": "*"
      },
      {
        "name": "spName",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "spName: str | None = None"
      },
      {
        "name": "spParams",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "List",
              "typedoc": "list",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "spParams: List | None = None"
      },
      {
        "name": "sansTran",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "sansTran: bool | None = None"
      }
    ],
    "doc": "<p>Calls a stored procedure <span class=\"name\">procedure_name</span> with the <span class=\"name\">procedure_params</span> - a <b>list</b> of parameters the procedure requires. <b>Returns two lists</b> - the <i>parameter values</i> and the <i>result sets</i>.</p>\n<p>Use the special <b>CURSOR</b> value for OUT params, which should receive result sets - relevant only for some databases (e.g. Oracle or PostgreSQL).</p>\n<p>Set <code>no_transaction</code> to <i>True</i> to run command without explicit transaction commit or rollback in case of error. See <a href=\"#Commit%20behavior\" class=\"name\">Commit behavior</a> for details.</p>\n<p>Use <code>alias</code> to specify what connection should be used if <a href=\"#Handling%20multiple%20database%20connections\" class=\"name\">Handling multiple database connections</a>.</p>\n<p>Use the <code>additional_output_params</code> list for OUT params of a procedure in MSSQL.</p>\n<h4>Some parameters were renamed in version 2.0</h4>\n<p>The old parameters <code>spName</code>, <code>spParams</code> and <code>sansTran</code> are <b>deprecated</b>, please use new parameters <code>procedure_name</code>, <code>procedure_params</code> and <code>no_transaction</code> instead.</p>\n<p><b>The old parameters will be removed in future versions.</b></p>\n<h2>Handling parameters and result sets</h2>\n<p>Handling the input and output parameters and the result sets is very different depending on the database itself and on the Python database driver - i.e. how it implements the <span class=\"name\">cursor.callproc()</span> function.</p>\n<h3>Common case (e.g. MySQL)</h3>\n<p>Generally a procedure call requires all parameter values (IN and OUT) put together in a list - <span class=\"name\">procedure_params</span>.</p>\n<p>Calling the procedure returns <b>two lists</b>:</p>\n<ul>\n<li><b>Param values</b> - the copy of procedure parameters (modified, if the procedure changes the OUT params). The list is empty, if procedures receives no params.</li>\n<li><b>Result sets</b> - the list of lists, each of them containing results of some query, if the procedure returns them.</li>\n</ul>\n<h3>Oracle (oracledb, cx_Oracle)</h3>\n<p>Oracle procedures work fine with simple IN and OUT params, but require some special handling of result sets.</p>\n<h4>Simple case with IN and OUT params (no result sets)</h4>\n<p>Consider the following procedure:</p>\n<pre>\nCREATE OR REPLACE PROCEDURE\nget_second_name (person_first_name IN VARCHAR, person_second_name OUT VARCHAR) AS\nBEGIN\n  SELECT last_name\n  INTO person_second_name\n  FROM person\n  WHERE first_name = person_first_name;\nEND;\n</pre>\n<p>Calling the procedure in Robot Framework:</p>\n<pre>\n@{params}=         Create List    Jerry    OUTPUT\n# Second parameter value can be anything, it will be replaced anyway\n\n${param values}    ${result sets}=    Call Stored Procedure    get_second_name    ${params}\n# ${param values} = ['Jerry', 'Schneider']\n# ${result sets} = []\n</pre>\n<h4>Oracle procedure returning a result set</h4>\n<p>If a procedure in Oracle should return a result set, it must take OUT parameters of a special type - <i>SYS_REFCURSOR</i>.</p>\n<p>Consider the following procedure:</p>\n<pre>\nget_all_second_names (second_names_cursor OUT SYS_REFCURSOR) AS\nBEGIN\n  OPEN second_names_cursor for\n  SELECT LAST_NAME FROM person;\nEND;\n</pre>\n<p>Calling the procedure in Robot Framework requires the special value <b>CURSOR</b> for the OUT parameters, they will be converted to appropriate DB variables before calling the procedure.</p>\n<pre>\n@{params}=    Create List    CURSOR\n# The parameter must have this special value CURSOR\n\n${param values}    ${result sets}=    Call Stored Procedure    get_all_second_names    ${params}\n# ${param values} = [&lt;oracledb.Cursor on &lt;oracledb.Connection ...&gt;&gt;]\n# ${result sets} = [[('Franz Allan',), ('Jerry',)], [('See',), ('Schneider',)]]\n</pre>\n<h4>Oracle procedure returning multiple result sets</h4>\n<p>If a procedure takes multiple OUT parameters of the <i>SYS_REFCURSOR</i> type, they all must have the special <b>CURSOR</b> value when calling the procedure:</p>\n<pre>\n@{params} =        Create List         CURSOR    CURSOR\n${param values}    ${result sets} =    Call Stored Procedure    Get_all_first_and_second_names    ${params}\n# ${param values} = [&lt;oracledb.Cursor on &lt;oracledb.Connection ...&gt;&gt;, &lt;oracledb.Cursor on &lt;oracledb.Connection ...&gt;&gt;]\n# ${result sets}  = [[('Franz Allan',), ('Jerry',)], [('See',), ('Schneider',)]]\n</pre>\n<h3>PostgreSQL (psycopg2, psycopg3)</h3>\n<p>PostgreSQL doesn't return single values as params, only as result sets. It also supports special handling of result sets over OUT params of a special type (like Oracle).</p>\n<h4>Simple case with IN and OUT params (no CURSOR parameters)</h4>\n<p>Consider the following procedure:</p>\n<pre>\nCREATE FUNCTION\nget_second_name (IN person_first_name VARCHAR(20),\nOUT person_second_name VARCHAR(20))\nLANGUAGE plpgsql\nAS\n'\nBEGIN\n  SELECT LAST_NAME INTO person_second_name\n  FROM person\n  WHERE FIRST_NAME = person_first_name;\nEND\n';\n</pre>\n<p>Calling the procedure in Robot Framework:</p>\n<pre>\n@{params}=    Create List    Jerry\n${param values}    ${result sets}=    Call Stored Procedure    get_second_name    ${params}\n# ${param values} = ['Jerry']\n# ${result sets} = [[('Schneider',)]]\n</pre>\n<h4>PostgreSQL procedure with CURSOR parameters</h4>\n<p>If a procedure in PostgreSQL should return a proper result set, it must take OUT parameters of a special type - <i>refcursor</i>.</p>\n<p>Consider the following procedure:</p>\n<pre>\nCREATE FUNCTION\nget_all_first_and_second_names(result1 refcursor, result2 refcursor)\nRETURNS SETOF refcursor\nLANGUAGE plpgsql\nAS\n'\nBEGIN\n  OPEN result1 FOR SELECT FIRST_NAME FROM person;\n  RETURN NEXT result1;\n  OPEN result2 FOR SELECT LAST_NAME FROM person;\n  RETURN NEXT result2;\nEND\n';\n</pre>\n<p>Calling the procedure in Robot Framework requires the special value <b>CURSOR</b> for the OUT parameters, they will be converted to appropriate DB variables before calling the procedure.</p>\n<pre>\n@{params}=    Create List    CURSOR    CURSOR\n# The parameters must have this special value CURSOR\n\n${param values}    ${result sets}=    Call Stored Procedure    get_all_first_and_second_names    ${params}\n# ${param values} = ['CURSOR_0', 'CURSOR_1']\n# ${result sets} = [[('Franz Allan',), ('Jerry',)], [('See',), ('Schneider',)]\n</pre>\n<h3>MS SQL Server (pymssql)</h3>\n<p>The <i>pymssql</i> driver doesn't natively support getting the OUT parameter values after calling a procedure.</p>\n<ul>\n<li>This requires special handling of OUT parameters using the <span class=\"name\">additional_output_params</span> argument.</li>\n<li>Furthermore, it's not possible to fetch the OUT parameter values for a procedure, which returns a result set AND has OUT parameters.</li>\n</ul>\n<h4>Simple case with IN and OUT params (no result sets)</h4>\n<p>Consider the following procedure:</p>\n<pre>\nCREATE PROCEDURE\nreturn_out_param_without_result_sets\n@my_input VARCHAR(20),\n@my_output INT OUTPUT\nAS\nBEGIN\n IF @my_input = 'give me 1'\n    BEGIN\n        SELECT @my_output = 1;\n    END\n    ELSE\n    BEGIN\n        SELECT @my_output = 0;\n    END\nEND;\n</pre>\n<p>Calling the procedure in Robot Framework requires putting the IN parameters as usual in the <span class=\"name\">procedure_params</span> argument, but the sample values of OUT parameters must be put in the argument <span class=\"name\">additional_output_params</span>.</p>\n<pre>\n@{params}=    Create List    give me 1\n@{out_params}=    Create List    ${9}\n${param values}    ${result sets}=    Call Stored Procedure    return_out_param_without_result_sets\n...    ${params}    additional_output_params=${out_params}\n# ${result sets} = []\n# ${param values} = ('give me 1', 1)\n</pre>\n<p>The library uses the sample values in the <span class=\"name\">additional_output_params</span> list to determine the number and the type of OUT parameters - so they are type-sensitive, the type must be the same as in the procedure itself.</p>\n<h4>MS SQL procedure returning a result set (no OUT params)</h4>\n<p>If a procedure doesn't have any OUT params and returns only result sets, they are handled in a normal way. Consider the following procedure:</p>\n<pre>\nCREATE PROCEDURE get_all_first_and_second_names\nAS\nBEGIN\n  SELECT FIRST_NAME FROM person;\n  SELECT LAST_NAME FROM person;\n  RETURN;\nEND;\n</pre>\n<p>Calling the procedure in Robot Framework:</p>\n<pre>\n${param values}    ${result sets}=    Call Stored Procedure    get_all_first_and_second_names\n${param values} = ()\n${result sets} = [[('Franz Allan',), ('Jerry',)], [('See',), ('Schneider',)]]\n</pre>\n<h4>MS SQL procedure returning result sets AND OUT params</h4>\n<p>This case is <b>not fully supported</b> by the library - the OUT params won't be fetched.</p>",
    "url": "https://marketsquare.github.io/Robotframework-Database-Library/#Call%20Stored%20Procedure"
  },
  {
    "name": "Check If Exists In Database",
    "library": "Database",
    "args": [
      {
        "name": "select_statement",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "select_statement: str"
      },
      {
        "name": "",
        "type": null,
        "defaultValue": null,
        "kind": "NAMED_ONLY_MARKER",
        "required": false,
        "repr": "*"
      },
      {
        "name": "no_transaction",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "no_transaction: bool = False"
      },
      {
        "name": "msg",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "msg: str | None = None"
      },
      {
        "name": "alias",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "alias: str | None = None"
      },
      {
        "name": "parameters",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Tuple",
              "typedoc": "tuple",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "parameters: Tuple | None = None"
      }
    ],
    "doc": "<p><b>DEPRECATED</b> Use new <a href=\"#Check%20Row%20Count\" class=\"name\">Check Row Count</a> keyword with assertion engine instead. The deprecated keyword will be removed in future versions.</p>\n<p>Check if any row would be returned by given the input <code>select_statement</code>. If there are no results, then this will throw an AssertionError.</p>\n<p>Set optional input <code>no_transaction</code> to <i>True</i> to run command without an explicit transaction commit or rollback.</p>\n<p>The default error message can be overridden with the <code>msg</code> argument.</p>\n<p>Use optional <code>alias</code> parameter to specify what connection should be used for the query if you have more than one connection open.</p>\n<p>Use <code>parameters</code> for query variable substitution (variable substitution syntax may be different depending on the database client).</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Check If Exists In Database</td>\n<td>SELECT id FROM person WHERE first_name = 'Franz Allan'</td>\n<td></td>\n</tr>\n<tr>\n<td>Check If Exists In Database</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td>msg=my error message</td>\n</tr>\n<tr>\n<td>Check If Exists In Database</td>\n<td>SELECT id FROM person WHERE first_name = 'Franz Allan'</td>\n<td>alias=my_alias</td>\n</tr>\n<tr>\n<td>Check If Exists In Database</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td>no_transaction=True</td>\n</tr>\n<tr>\n<td>@{parameters}</td>\n<td>Create List</td>\n<td>John</td>\n</tr>\n<tr>\n<td>Check If Exists In Database</td>\n<td>SELECT id FROM person WHERE first_name = %s</td>\n<td>parameters=${parameters}</td>\n</tr>\n</table>",
    "url": "https://marketsquare.github.io/Robotframework-Database-Library/#Check%20If%20Exists%20In%20Database"
  },
  {
    "name": "Check If Not Exists In Database",
    "library": "Database",
    "args": [
      {
        "name": "selectStatement",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selectStatement: str"
      },
      {
        "name": "sansTran",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "sansTran: bool = False"
      },
      {
        "name": "msg",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg: str | None = None"
      },
      {
        "name": "alias",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "alias: str | None = None"
      },
      {
        "name": "parameters",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Tuple",
              "typedoc": "tuple",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "parameters: Tuple | None = None"
      }
    ],
    "doc": "<p><b>DEPRECATED</b> Use new <a href=\"#Check%20Row%20Count\" class=\"name\">Check Row Count</a> keyword with assertion engine instead. The deprecated keyword will be removed in future versions.</p>\n<p>This is the negation of <span class=\"name\">check_if_exists_in_database</span>.</p>\n<p>Check if no rows would be returned by given the input <code>selectStatement</code>. If there are any results, then this will throw an AssertionError.</p>\n<p>Set optional input <code>sansTran</code> to <i>True</i> to run command without an explicit transaction commit or rollback.</p>\n<p>The default error message can be overridden with the <code>msg</code> argument.</p>\n<p>Use optional <code>alias</code> parameter to specify what connection should be used for the query if you have more than one connection open.</p>\n<p>Use <code>parameters</code> for query variable substitution (variable substitution syntax may be different depending on the database client).</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Check If Not Exists In Database</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td></td>\n</tr>\n<tr>\n<td>Check If Not Exists In Database</td>\n<td>SELECT id FROM person WHERE first_name = 'Franz Allan'</td>\n<td>msg=my error message</td>\n</tr>\n<tr>\n<td>Check If Not Exists In Database</td>\n<td>SELECT id FROM person WHERE first_name = 'Franz Allan'</td>\n<td>alias=my_alias</td>\n</tr>\n<tr>\n<td>Check If Not Exists In Database</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td>sansTran=True</td>\n</tr>\n<tr>\n<td>@{parameters}</td>\n<td>Create List</td>\n<td>John</td>\n</tr>\n<tr>\n<td>Check If Not Exists In Database</td>\n<td>SELECT id FROM person WHERE first_name = %s</td>\n<td>parameters=${parameters}</td>\n</tr>\n</table>",
    "url": "https://marketsquare.github.io/Robotframework-Database-Library/#Check%20If%20Not%20Exists%20In%20Database"
  },
  {
    "name": "Check Query Result",
    "library": "Database",
    "args": [
      {
        "name": "select_statement",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "select_statement: str"
      },
      {
        "name": "assertion_operator",
        "type": {
          "name": "AssertionOperator",
          "typedoc": "AssertionOperator",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "assertion_operator: AssertionOperator"
      },
      {
        "name": "expected_value",
        "type": {
          "name": "Any",
          "typedoc": "Any",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "expected_value: Any"
      },
      {
        "name": "row",
        "type": null,
        "defaultValue": "0",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "row=0"
      },
      {
        "name": "col",
        "type": null,
        "defaultValue": "0",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "col=0"
      },
      {
        "name": "assertion_message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_message: str | None = None"
      },
      {
        "name": "no_transaction",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "no_transaction: bool = False"
      },
      {
        "name": "alias",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "alias: str | None = None"
      },
      {
        "name": "parameters",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Tuple",
              "typedoc": "tuple",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "parameters: Tuple | None = None"
      },
      {
        "name": "retry_timeout",
        "type": null,
        "defaultValue": "0 seconds",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "retry_timeout=0 seconds"
      },
      {
        "name": "retry_pause",
        "type": null,
        "defaultValue": "0.5 seconds",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "retry_pause=0.5 seconds"
      },
      {
        "name": "",
        "type": null,
        "defaultValue": null,
        "kind": "NAMED_ONLY_MARKER",
        "required": false,
        "repr": "*"
      },
      {
        "name": "selectStatement",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "selectStatement: str | None = None"
      },
      {
        "name": "sansTran",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "sansTran: bool | None = None"
      }
    ],
    "doc": "<p>Check value in query result returned from <code>select_statement</code> using <code>assertion_operator</code> and <code>expected_value</code>. The value position in results can be adjusted using <code>row</code> and <code>col</code> parameters (0-based). See <a href=\"#Inline%20assertions\" class=\"name\">Inline assertions</a> for more details.</p>\n<p><b>The assertion in this keyword is type sensitive!</b> The <code>expected_value</code> is taken as a string, no argument conversion is performed. Use RF syntax like <code>${1}</code> for numeric values.</p>\n<p>Use optional <code>assertion_message</code> to override the default error message.</p>\n<p>Set <code>no_transaction</code> to <i>True</i> to run command without explicit transaction rollback in case of error. See <a href=\"#Commit%20behavior\" class=\"name\">Commit behavior</a> for details.</p>\n<p>Use <code>alias</code> to specify what connection should be used if <a href=\"#Handling%20multiple%20database%20connections\" class=\"name\">Handling multiple database connections</a>.</p>\n<p>Use <code>parameters</code> for query variable substitution (variable substitution syntax may be different depending on the database client).</p>\n<p>Use <code>retry_timeout</code> and <code>retry_pause</code> parameters to enable waiting for assertion to pass. See <a href=\"#Retry%20mechanism\" class=\"name\">Retry mechanism</a> for more details.</p>\n<h4>Some parameters were renamed in version 2.0</h4>\n<p>The old parameters <code>selectStatement</code> and <code>sansTran</code> are <b>deprecated</b>, please use new parameters <code>select_statement</code> and <code>no_transaction</code> instead.</p>\n<p><b>The old parameters will be removed in future versions.</b></p>\n<h4>Examples</h4>\n<table border=\"1\">\n<tr>\n<td>Check Query Result</td>\n<td>SELECT first_name FROM person</td>\n<td><b>contains</b></td>\n<td>Allan</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Check Query Result</td>\n<td>SELECT first_name, last_name FROM person</td>\n<td><b>==</b></td>\n<td>Schneider</td>\n<td>row=1</td>\n<td>col=1</td>\n</tr>\n<tr>\n<td>Check Query Result</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td><b>==</b></td>\n<td>2</td>\n<td># Fails, if query returns an integer value</td>\n<td></td>\n</tr>\n<tr>\n<td>Check Query Result</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td><b>==</b></td>\n<td>${2}</td>\n<td># Works, if query returns an integer value</td>\n<td></td>\n</tr>\n<tr>\n<td>Check Query Result</td>\n<td>SELECT first_name FROM person</td>\n<td><b>equal</b></td>\n<td>Franz Allan</td>\n<td>assertion_message=my error message</td>\n<td></td>\n</tr>\n<tr>\n<td>Check Query Result</td>\n<td>SELECT first_name FROM person</td>\n<td><b>inequal</b></td>\n<td>John</td>\n<td>alias=my_alias</td>\n<td></td>\n</tr>\n<tr>\n<td>Check Query Result</td>\n<td>SELECT first_name FROM person</td>\n<td><b>contains</b></td>\n<td>Allan</td>\n<td>no_transaction=True</td>\n<td></td>\n</tr>\n<tr>\n<td>@{parameters}</td>\n<td>Create List</td>\n<td>John</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Check Query Result</td>\n<td>SELECT first_name FROM person</td>\n<td><b>contains</b></td>\n<td>Allan</td>\n<td>parameters=${parameters}</td>\n<td></td>\n</tr>\n</table>",
    "url": "https://marketsquare.github.io/Robotframework-Database-Library/#Check%20Query%20Result"
  },
  {
    "name": "Check Row Count",
    "library": "Database",
    "args": [
      {
        "name": "select_statement",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "select_statement: str"
      },
      {
        "name": "assertion_operator",
        "type": {
          "name": "AssertionOperator",
          "typedoc": "AssertionOperator",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "assertion_operator: AssertionOperator"
      },
      {
        "name": "expected_value",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "expected_value: int"
      },
      {
        "name": "assertion_message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "assertion_message: str | None = None"
      },
      {
        "name": "no_transaction",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "no_transaction: bool = False"
      },
      {
        "name": "alias",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "alias: str | None = None"
      },
      {
        "name": "parameters",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Tuple",
              "typedoc": "tuple",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "parameters: Tuple | None = None"
      },
      {
        "name": "retry_timeout",
        "type": null,
        "defaultValue": "0 seconds",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "retry_timeout=0 seconds"
      },
      {
        "name": "retry_pause",
        "type": null,
        "defaultValue": "0.5 seconds",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "retry_pause=0.5 seconds"
      },
      {
        "name": "",
        "type": null,
        "defaultValue": null,
        "kind": "NAMED_ONLY_MARKER",
        "required": false,
        "repr": "*"
      },
      {
        "name": "selectStatement",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "selectStatement: str | None = None"
      },
      {
        "name": "sansTran",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "sansTran: bool | None = None"
      }
    ],
    "doc": "<p>Check the number of rows returned from <code>select_statement</code> using <code>assertion_operator</code> and <code>expected_value</code>. See <a href=\"#Inline%20assertions\" class=\"name\">Inline assertions</a> for more details.</p>\n<p>Use <code>assertion_message</code> to override the default error message.</p>\n<p>Set <code>no_transaction</code> to <i>True</i> to run command without explicit transaction rollback in case of error. See <a href=\"#Commit%20behavior\" class=\"name\">Commit behavior</a> for details.</p>\n<p>Use <code>alias</code> to specify what connection should be used if <a href=\"#Handling%20multiple%20database%20connections\" class=\"name\">Handling multiple database connections</a>.</p>\n<p>Use <code>parameters</code> for query variable substitution (variable substitution syntax may be different depending on the database client).</p>\n<p>Use <code>retry_timeout</code> and <code>retry_pause</code> parameters to enable waiting for assertion to pass. See <a href=\"#Retry%20mechanism\" class=\"name\">Retry mechanism</a> for more details.</p>\n<h4>Some parameters were renamed in version 2.0</h4>\n<p>The old parameters <code>selectStatement</code> and <code>sansTran</code> are <b>deprecated</b>, please use new parameters <code>select_statement</code> and <code>no_transaction</code> instead.</p>\n<p><b>The old parameters will be removed in future versions.</b></p>\n<h4>Examples</h4>\n<table border=\"1\">\n<tr>\n<td>Check Row Count</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td><b>==</b></td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>Check Row Count</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td><b>&gt;=</b></td>\n<td>2</td>\n<td>assertion_message=my error message</td>\n</tr>\n<tr>\n<td>Check Row Count</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td><b>inequal</b></td>\n<td>3</td>\n<td>alias=my_alias</td>\n</tr>\n<tr>\n<td>Check Row Count</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td><b>less than</b></td>\n<td>4</td>\n<td>no_transaction=True</td>\n</tr>\n<tr>\n<td>@{parameters}</td>\n<td>Create List</td>\n<td>John</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Check Row Count</td>\n<td>SELECT id FROM person WHERE first_name = %s</td>\n<td><b>equals</b></td>\n<td>5</td>\n<td>parameters=${parameters}</td>\n</tr>\n</table>",
    "url": "https://marketsquare.github.io/Robotframework-Database-Library/#Check%20Row%20Count"
  },
  {
    "name": "Connect To Database",
    "library": "Database",
    "args": [
      {
        "name": "db_module",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "db_module: str | None = None"
      },
      {
        "name": "db_name",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "db_name: str | None = None"
      },
      {
        "name": "db_user",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "db_user: str | None = None"
      },
      {
        "name": "db_password",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "db_password: str | None = None"
      },
      {
        "name": "db_host",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "db_host: str | None = None"
      },
      {
        "name": "db_port",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "db_port: int | None = None"
      },
      {
        "name": "db_charset",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "db_charset: str | None = None"
      },
      {
        "name": "odbc_driver",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "odbc_driver: str | None = None"
      },
      {
        "name": "config_file",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "config_file: str | None = None"
      },
      {
        "name": "oracle_driver_mode",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "oracle_driver_mode: str | None = None"
      },
      {
        "name": "alias",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "default",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "alias: str = default"
      },
      {
        "name": "custom_connection_params",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_NAMED",
        "required": false,
        "repr": "**custom_connection_params"
      }
    ],
    "doc": "<p>Creates a database connection using the DB API 2.0 <code>db_module</code> and the parameters provided. Along with listed commonly used arguments (<span class=\"name\">db_name</span>, <span class=\"name\">db_host</span> etc.) you can set any other DB module specific parameters as key/value pairs.</p>\n<p>Use <code>config_file</code> to provide a path to configuration file with connection parameters to be used along with / instead of keyword arguments. If no specified, it defaults to <span class=\"name\">./resources/db.cfg</span>. See <a href=\"#Using%20configuration%20file\" class=\"name\">Using configuration file</a> for more details.</p>\n<p>All params are optional, although <code>db_module</code> must be set - either as keyword argument or in config file. If some of the listed keyword arguments (<span class=\"name\">db_name</span>, <span class=\"name\">db_host</span> etc.) are not provided (i.e. left on default value <a href=\"#type-None\" class=\"name\">None</a>), they are normally not passed to the Python DB module at all, except:</p>\n<ul>\n<li><i>db_port</i> - commonly used port number for known databases is set as fallback</li>\n<li><i>db_charset</i> - <i>UTF8</i> is used as fallback for <i>pymysql</i>, <i>pymssql</i> and <i>pyodbc</i></li>\n<li><i>oracle_driver_mode</i> - <i>thin</i> is used as fallback for <i>oracledb</i></li>\n</ul>\n<p>Other custom params from keyword arguments and config file are passed to the Python DB module as provided - normally as arguments for the <i>connect()</i> function. However, when using <b>pyodbc</b> or <b>ibm_db_dbi</b>, the connection is established using a <b>connection string</b> - so all the custom params are added into it instead of function arguments.</p>\n<p>Set <code>alias</code> for <a href=\"#Handling%20multiple%20database%20connections\" class=\"name\">Handling multiple database connections</a>. If the same alias is given twice, then previous connection will be overridden.</p>\n<p>The <code>oracle_driver_mode</code> is used to select the <b>oracledb</b> client mode. Allowed values are:</p>\n<ul>\n<li><i>thin</i> (default if omitted)</li>\n<li><i>thick</i></li>\n<li><i>thick,lib_dir=&lt;PATH_TO_ORACLE_CLIENT&gt;</i></li>\n</ul>\n<p>By default, there is a warning when overwriting an existing connection (i.e. not closing it properly). This can be disabled by setting the <code>warn_on_connection_overwrite</code> parameter to <b>False</b> in the library import.</p>\n<h4>Some parameters were renamed in version 2.0</h4>\n<p>The old parameters <code>dbapiModuleName</code>, <code>dbName</code>, <code>dbUsername</code>, <code>dbPassword</code>, <code>dbHost</code>, <code>dbPort</code>, <code>dbCharset</code>, <code>dbDriver</code>, <code>dbConfigFile</code> and <code>driverMode</code> are <b>deprecated</b>, please use new parameters <code>db_module</code>, <code>db_name</code>, <code>db_user</code>, <code>db_password</code>, <code>db_host</code>, <code>db_port</code>, <code>db_charset</code>, <code>odbc_driver</code>, <code>config_file</code> and <code>oracle_driver_mode</code> instead.</p>\n<p><b>The old parameters will be removed in future versions.</b></p>\n<h3>Basic examples</h3>\n<table border=\"1\">\n<tr>\n<td>Connect To Database</td>\n<td>psycopg2</td>\n<td>my_db</td>\n<td>user</td>\n<td>pass</td>\n<td>127.0.0.1</td>\n<td>5432</td>\n<td></td>\n</tr>\n<tr>\n<td>Connect To Database</td>\n<td>psycopg2</td>\n<td>my_db</td>\n<td>user</td>\n<td>pass</td>\n<td>127.0.0.1</td>\n<td>5432</td>\n<td>my_custom_param=value</td>\n</tr>\n<tr>\n<td>Connect To Database</td>\n<td>psycopg2</td>\n<td>my_db</td>\n<td>user</td>\n<td>pass</td>\n<td>127.0.0.1</td>\n<td>5432</td>\n<td>alias=my_alias</td>\n</tr>\n<tr>\n<td>Connect To Database</td>\n<td>config_file=my_db_params.cfg</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>See <a href=\"#Connection%20examples%20for%20different%20DB%20modules\" class=\"name\">Connection examples for different DB modules</a>.</p>",
    "url": "https://marketsquare.github.io/Robotframework-Database-Library/#Connect%20To%20Database"
  },
  {
    "name": "Connect To Database Using Custom Connection String",
    "library": "Database",
    "args": [
      {
        "name": "db_module",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "db_module: str | None = None"
      },
      {
        "name": "db_connect_string",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "db_connect_string: str = "
      },
      {
        "name": "alias",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "default",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "alias: str = default"
      },
      {
        "name": "",
        "type": null,
        "defaultValue": null,
        "kind": "NAMED_ONLY_MARKER",
        "required": false,
        "repr": "*"
      },
      {
        "name": "dbapiModuleName",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "dbapiModuleName: str | None = None"
      }
    ],
    "doc": "<p>Loads the DB API 2.0 module given <code>db_module</code> then uses it to connect to the database using the <code>db_connect_string</code> (parsed as single connection string or URI).</p>\n<p>Use <a href=\"#Connect%20To%20Database\" class=\"name\">Connect To Database</a> for passing custom connection params as named arguments.</p>\n<h4>Some parameters were renamed in version 2.0</h4>\n<p>The old parameter <code>dbapiModuleName</code> is <b>deprecated</b>, please use new parameter <code>db_module</code> instead.</p>\n<p><b>The old parameter will be removed in future versions.</b></p>\n<p>Example usage:</p>\n<table border=\"1\">\n<tr>\n<td>Connect To Database Using Custom Connection String</td>\n<td>psycopg2</td>\n<td><a href=\"postgresql://postgres:s3cr3t@tiger.foobar.com:5432/my_db_test\">postgresql://postgres:s3cr3t@tiger.foobar.com:5432/my_db_test</a></td>\n</tr>\n<tr>\n<td>Connect To Database Using Custom Connection String</td>\n<td>oracledb</td>\n<td>username/pass@localhost:1521/orclpdb</td>\n</tr>\n</table>",
    "url": "https://marketsquare.github.io/Robotframework-Database-Library/#Connect%20To%20Database%20Using%20Custom%20Connection%20String"
  },
  {
    "name": "Connect To Database Using Custom Params",
    "library": "Database",
    "args": [
      {
        "name": "db_module",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "db_module: str | None = None"
      },
      {
        "name": "db_connect_string",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "db_connect_string: str = "
      },
      {
        "name": "alias",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "default",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "alias: str = default"
      },
      {
        "name": "",
        "type": null,
        "defaultValue": null,
        "kind": "NAMED_ONLY_MARKER",
        "required": false,
        "repr": "*"
      },
      {
        "name": "dbapiModuleName",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "dbapiModuleName: str | None = None"
      }
    ],
    "doc": "<p><b>DEPRECATED</b> Use new <a href=\"#Connect%20To%20Database\" class=\"name\">Connect To Database</a> keyword with custom parameters instead. The deprecated keyword will be removed in future versions.</p>\n<p>Loads the DB API 2.0 module given <code>db_module</code> then uses it to connect to the database using the map string <code>db_connect_string</code> (parsed as a list of named arguments).</p>\n<p>Use <span class=\"name\">connect_to_database_using_custom_connection_string</span> for passing all params in a single connection string or URI.</p>\n<h4>Some parameters were renamed in version 2.0</h4>\n<p>The old parameter <code>dbapiModuleName</code> is <b>deprecated</b>, please use new parameter <code>db_module</code> instead.</p>\n<p><b>The old parameter will be removed in future versions.</b></p>\n<h4>Examples</h4>\n<table border=\"1\">\n<tr>\n<td>Connect To Database Using Custom Params</td>\n<td>psycopg2</td>\n<td>database='my_db_test', user='postgres', password='s3cr3t', host='tiger.foobar.com', port=5432</td>\n</tr>\n<tr>\n<td>Connect To Database Using Custom Params</td>\n<td>jaydebeapi</td>\n<td>'oracle.jdbc.driver.OracleDriver', 'my_db_test', 'system', 's3cr3t'</td>\n</tr>\n<tr>\n<td>Connect To Database Using Custom Params</td>\n<td>oracledb</td>\n<td>user=\"username\", password=\"pass\", dsn=\"localhost/orclpdb\"</td>\n</tr>\n<tr>\n<td>Connect To Database Using Custom Params</td>\n<td>sqlite3</td>\n<td>database=\"./my_database.db\", isolation_level=None</td>\n</tr>\n</table>",
    "url": "https://marketsquare.github.io/Robotframework-Database-Library/#Connect%20To%20Database%20Using%20Custom%20Params"
  },
  {
    "name": "Delete All Rows From Table",
    "library": "Database",
    "args": [
      {
        "name": "table_name",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "table_name: str"
      },
      {
        "name": "no_transaction",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "no_transaction: bool = False"
      },
      {
        "name": "alias",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "alias: str | None = None"
      },
      {
        "name": "",
        "type": null,
        "defaultValue": null,
        "kind": "NAMED_ONLY_MARKER",
        "required": false,
        "repr": "*"
      },
      {
        "name": "tableName",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "tableName: str | None = None"
      },
      {
        "name": "sansTran",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "sansTran: bool | None = None"
      }
    ],
    "doc": "<p>Deletes all rows from table with <code>table_name</code>.</p>\n<p>Set <code>no_transaction</code> to <i>True</i> to run command without explicit transaction commit or rollback in case of error. See <a href=\"#Commit%20behavior\" class=\"name\">Commit behavior</a> for details.</p>\n<p>Use <code>alias</code> to specify what connection should be used if <a href=\"#Handling%20multiple%20database%20connections\" class=\"name\">Handling multiple database connections</a>.</p>\n<h4>Some parameters were renamed in version 2.0</h4>\n<p>The old parameters <code>tableName</code> and <code>sansTran</code> are <b>deprecated</b>, please use new parameters <code>table_name</code> and <code>no_transaction</code> instead.</p>\n<p><b>The old parameters will be removed in future versions.</b></p>\n<h4>Examples</h4>\n<table border=\"1\">\n<tr>\n<td>Delete All Rows From Table</td>\n<td>person</td>\n<td></td>\n</tr>\n<tr>\n<td>Delete All Rows From Table</td>\n<td>person</td>\n<td>no_transaction=True</td>\n</tr>\n<tr>\n<td>Delete All Rows From Table</td>\n<td>person</td>\n<td>alias=my_alias</td>\n</tr>\n</table>",
    "url": "https://marketsquare.github.io/Robotframework-Database-Library/#Delete%20All%20Rows%20From%20Table"
  },
  {
    "name": "Description",
    "library": "Database",
    "args": [
      {
        "name": "select_statement",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "select_statement: str"
      },
      {
        "name": "no_transaction",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "no_transaction: bool = False"
      },
      {
        "name": "alias",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "alias: str | None = None"
      },
      {
        "name": "parameters",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Tuple",
              "typedoc": "tuple",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "parameters: Tuple | None = None"
      },
      {
        "name": "",
        "type": null,
        "defaultValue": null,
        "kind": "NAMED_ONLY_MARKER",
        "required": false,
        "repr": "*"
      },
      {
        "name": "selectStatement",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "selectStatement: str | None = None"
      },
      {
        "name": "sansTran",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "sansTran: bool | None = None"
      }
    ],
    "doc": "<p>Runs a query with the <code>select_statement</code> to determine the table description.</p>\n<p>Set <code>no_transaction</code> to <i>True</i> to run command without explicit transaction commit or rollback in case of error. See <a href=\"#Commit%20behavior\" class=\"name\">Commit behavior</a> for details.</p>\n<p>Use <code>alias</code> to specify what connection should be used if <a href=\"#Handling%20multiple%20database%20connections\" class=\"name\">Handling multiple database connections</a>.</p>\n<p>Use <code>parameters</code> for query variable substitution (variable substitution syntax may be different depending on the database client).</p>\n<h4>Some parameters were renamed in version 2.0</h4>\n<p>The old parameters <code>selectStatement</code> and <code>sansTran</code> are <b>deprecated</b>, please use new parameters <code>select_statement</code> and <code>no_transaction</code> instead.</p>\n<p><b>The old parameters will be removed in future versions.</b></p>\n<h4>Examples</h4>\n<table border=\"1\">\n<tr>\n<td>${Person table description}=</td>\n<td>Description</td>\n<td>select LAST_NAME from person</td>\n<td></td>\n</tr>\n<tr>\n<td>${Person table description}=</td>\n<td>Description</td>\n<td>select LAST_NAME from person</td>\n<td>no_transaction=True</td>\n</tr>\n<tr>\n<td>${Person table description}=</td>\n<td>Description</td>\n<td>select LAST_NAME from person</td>\n<td>alias=postgres</td>\n</tr>\n<tr>\n<td>@{parameters}</td>\n<td>Create List</td>\n<td>person</td>\n<td></td>\n</tr>\n<tr>\n<td>${Person table description}=</td>\n<td>Description</td>\n<td>SELECT * FROM %s</td>\n<td>parameters=${parameters}</td>\n</tr>\n</table>",
    "url": "https://marketsquare.github.io/Robotframework-Database-Library/#Description"
  },
  {
    "name": "Disconnect From All Databases",
    "library": "Database",
    "args": [],
    "doc": "<p>Disconnects from all the databases - useful when testing with multiple database connections (aliases).</p>",
    "url": "https://marketsquare.github.io/Robotframework-Database-Library/#Disconnect%20From%20All%20Databases"
  },
  {
    "name": "Disconnect From Database",
    "library": "Database",
    "args": [
      {
        "name": "error_if_no_connection",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "error_if_no_connection: bool = False"
      },
      {
        "name": "alias",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "alias: str | None = None"
      }
    ],
    "doc": "<p>Disconnects from the database.</p>\n<p>By default, it's not an error if there was no open database connection - suitable for usage as a teardown. However, you can enforce it using the <code>error_if_no_connection</code> parameter.</p>\n<p>Use <code>alias</code> to specify what connection should be closed if <a href=\"#Handling%20multiple%20database%20connections\" class=\"name\">Handling multiple database connections</a>.</p>\n<h4>Examples</h4>\n<table border=\"1\">\n<tr>\n<td>Disconnect From Database</td>\n<td></td>\n</tr>\n<tr>\n<td>Disconnect From Database</td>\n<td>alias=postgres</td>\n</tr>\n</table>",
    "url": "https://marketsquare.github.io/Robotframework-Database-Library/#Disconnect%20From%20Database"
  },
  {
    "name": "Execute Sql Script",
    "library": "Database",
    "args": [
      {
        "name": "script_path",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "script_path: str"
      },
      {
        "name": "no_transaction",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "no_transaction: bool = False"
      },
      {
        "name": "alias",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "alias: str | None = None"
      },
      {
        "name": "split",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "split: bool = True"
      },
      {
        "name": "external_parser",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "external_parser=False"
      },
      {
        "name": "",
        "type": null,
        "defaultValue": null,
        "kind": "NAMED_ONLY_MARKER",
        "required": false,
        "repr": "*"
      },
      {
        "name": "sqlScriptFileName",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "sqlScriptFileName: str | None = None"
      },
      {
        "name": "sansTran",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "sansTran: bool | None = None"
      }
    ],
    "doc": "<p>Executes the content of the SQL script file loaded from <span class=\"name\">script_path</span> as SQL commands.</p>\n<p>SQL commands are expected to be delimited by a semicolon (';') - they will be split and executed separately. Set <code>split</code> to <i>False</i> to disable this behavior  - in this case the entire script content will be passed to the database module for execution as a single command.</p>\n<p>Set <code>external_parser</code> to <i>True</i> to use the external library <a href=\"https://pypi.org/project/sqlparse/\">sqlparse</a> for splitting the script.</p>\n<p>Set <code>no_transaction</code> to <i>True</i> to run command without explicit transaction commit or rollback in case of error. See <a href=\"#Commit%20behavior\" class=\"name\">Commit behavior</a> for details.</p>\n<p>Use <code>alias</code> to specify what connection should be used if <a href=\"#Handling%20multiple%20database%20connections\" class=\"name\">Handling multiple database connections</a>.</p>\n<h4>Some parameters were renamed in version 2.0</h4>\n<p>The old parameters <code>sqlScriptFileName</code> and <code>sansTran</code> are <b>deprecated</b>, please use new parameters <code>script_path</code> and <code>no_transaction</code> instead.</p>\n<p><b>The old parameters will be removed in future versions.</b></p>\n<h4>Examples</h4>\n<table border=\"1\">\n<tr>\n<td>Execute SQL Script</td>\n<td>insert_data_in_person_table.sql</td>\n<td></td>\n</tr>\n<tr>\n<td>Execute SQL Script</td>\n<td>insert_data_in_person_table.sql</td>\n<td>no_transaction=True</td>\n</tr>\n<tr>\n<td>Execute SQL Script</td>\n<td>insert_data_in_person_table.sql</td>\n<td>alias=postgres</td>\n</tr>\n<tr>\n<td>Execute SQL Script</td>\n<td>insert_data_in_person_table.sql</td>\n<td>split=False</td>\n</tr>\n</table>",
    "url": "https://marketsquare.github.io/Robotframework-Database-Library/#Execute%20Sql%20Script"
  },
  {
    "name": "Execute Sql String",
    "library": "Database",
    "args": [
      {
        "name": "sql_string",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "sql_string: str"
      },
      {
        "name": "no_transaction",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "no_transaction: bool = False"
      },
      {
        "name": "alias",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "alias: str | None = None"
      },
      {
        "name": "parameters",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Tuple",
              "typedoc": "tuple",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "parameters: Tuple | None = None"
      },
      {
        "name": "omit_trailing_semicolon",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "omit_trailing_semicolon: bool | None = None"
      },
      {
        "name": "",
        "type": null,
        "defaultValue": null,
        "kind": "NAMED_ONLY_MARKER",
        "required": false,
        "repr": "*"
      },
      {
        "name": "sqlString",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "sqlString: str | None = None"
      },
      {
        "name": "sansTran",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "sansTran: bool | None = None"
      },
      {
        "name": "omitTrailingSemicolon",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "omitTrailingSemicolon: bool | None = None"
      }
    ],
    "doc": "<p>Executes the <code>sql_string</code> as a single SQL command.</p>\n<p>Set <code>no_transaction</code> to <i>True</i> to run command without explicit transaction commit or rollback in case of error. See <a href=\"#Commit%20behavior\" class=\"name\">Commit behavior</a> for details.</p>\n<p>Use <code>alias</code> to specify what connection should be used if <a href=\"#Handling%20multiple%20database%20connections\" class=\"name\">Handling multiple database connections</a>.</p>\n<p>Use <code>parameters</code> for query variable substitution (variable substitution syntax may be different depending on the database client).</p>\n<p>Set the <code>omit_trailing_semicolon</code> to explicitly control the <a href=\"#Omitting%20trailing%20semicolon%20behavior\" class=\"name\">Omitting trailing semicolon behavior</a> for the command.</p>\n<h4>Some parameters were renamed in version 2.0</h4>\n<p>The old parameters <code>sqlString</code>, <code>sansTran</code> and <code>omitTrailingSemicolon</code> are <b>deprecated</b>, please use new parameters <code>sql_string</code>, <code>no_transaction</code> and <code>omit_trailing_semicolon</code> instead.</p>\n<p><b>The old parameters will be removed in future versions.</b></p>\n<h4>Examples</h4>\n<table border=\"1\">\n<tr>\n<td>Execute Sql String</td>\n<td>DELETE FROM person_employee_table; DELETE FROM person_table</td>\n<td></td>\n</tr>\n<tr>\n<td>Execute Sql String</td>\n<td>DELETE FROM person_employee_table; DELETE FROM person_table</td>\n<td>no_transaction=True</td>\n</tr>\n<tr>\n<td>Execute Sql String</td>\n<td>DELETE FROM person_employee_table; DELETE FROM person_table</td>\n<td>alias=my_alias</td>\n</tr>\n<tr>\n<td>Execute Sql String</td>\n<td>CREATE PROCEDURE proc AS BEGIN DBMS_OUTPUT.PUT_LINE('Hello!'); END;</td>\n<td>omit_trailing_semicolon=False</td>\n</tr>\n<tr>\n<td>@{parameters}</td>\n<td>Create List</td>\n<td>person_employee_table</td>\n</tr>\n<tr>\n<td>Execute Sql String</td>\n<td>DELETE FROM %s</td>\n<td>parameters=${parameters}</td>\n</tr>\n</table>",
    "url": "https://marketsquare.github.io/Robotframework-Database-Library/#Execute%20Sql%20String"
  },
  {
    "name": "Query",
    "library": "Database",
    "args": [
      {
        "name": "select_statement",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "select_statement: str"
      },
      {
        "name": "no_transaction",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "no_transaction: bool = False"
      },
      {
        "name": "return_dict",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "return_dict: bool = False"
      },
      {
        "name": "alias",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "alias: str | None = None"
      },
      {
        "name": "parameters",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Tuple",
              "typedoc": "tuple",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "parameters: Tuple | None = None"
      },
      {
        "name": "",
        "type": null,
        "defaultValue": null,
        "kind": "NAMED_ONLY_MARKER",
        "required": false,
        "repr": "*"
      },
      {
        "name": "selectStatement",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "selectStatement: str | None = None"
      },
      {
        "name": "sansTran",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "sansTran: bool | None = None"
      },
      {
        "name": "returnAsDict",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "returnAsDict: bool | None = None"
      }
    ],
    "doc": "<p>Runs a query with the <code>select_statement</code> and returns the result as list of rows. The type of row values depends on the database module - usually they are tuples or tuple-like objects.</p>\n<p>Set <code>no_transaction</code> to <i>True</i> to run command without explicit transaction commit or rollback in case of error. See <a href=\"#Commit%20behavior\" class=\"name\">Commit behavior</a> for details.</p>\n<p>Set <code>return_dict</code> to <i>True</i> to explicitly convert the return values into list of dictionaries.</p>\n<p>Use <code>alias</code> to specify what connection should be used if <a href=\"#Handling%20multiple%20database%20connections\" class=\"name\">Handling multiple database connections</a>.</p>\n<p>Use <code>parameters</code> for query variable substitution (variable substitution syntax may be different depending on the database client).</p>\n<h4>Some parameters were renamed in version 2.0</h4>\n<p>The old parameters <code>selectStatement</code>, <code>sansTran</code> and <code>returnAsDict</code> are <b>deprecated</b>, please use new parameters <code>select_statement</code>, <code>no_transaction</code> and <code>return_dict</code> instead.</p>\n<p><b>The old parameters will be removed in future versions.</b></p>\n<h4>Examples</h4>\n<table border=\"1\">\n<tr>\n<td>${Results}=</td>\n<td>Query</td>\n<td>select LAST_NAME from person</td>\n<td></td>\n</tr>\n<tr>\n<td>${Results}=</td>\n<td>Query</td>\n<td>select LAST_NAME from person</td>\n<td>no_transaction=True</td>\n</tr>\n<tr>\n<td>${Results}=</td>\n<td>Query</td>\n<td>select LAST_NAME from person</td>\n<td>return_dict=True</td>\n</tr>\n<tr>\n<td>${Results}=</td>\n<td>Query</td>\n<td>select LAST_NAME from person</td>\n<td>alias=postgres</td>\n</tr>\n<tr>\n<td>@{parameters}</td>\n<td>Create List</td>\n<td>person</td>\n<td></td>\n</tr>\n<tr>\n<td>${Results}=</td>\n<td>Query</td>\n<td>SELECT * FROM %s</td>\n<td>parameters=${parameters}</td>\n</tr>\n</table>",
    "url": "https://marketsquare.github.io/Robotframework-Database-Library/#Query"
  },
  {
    "name": "Row Count",
    "library": "Database",
    "args": [
      {
        "name": "select_statement",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "select_statement: str"
      },
      {
        "name": "no_transaction",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "no_transaction: bool = False"
      },
      {
        "name": "alias",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "alias: str | None = None"
      },
      {
        "name": "parameters",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Tuple",
              "typedoc": "tuple",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "parameters: Tuple | None = None"
      },
      {
        "name": "",
        "type": null,
        "defaultValue": null,
        "kind": "NAMED_ONLY_MARKER",
        "required": false,
        "repr": "*"
      },
      {
        "name": "selectStatement",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "selectStatement: str | None = None"
      },
      {
        "name": "sansTran",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "sansTran: bool | None = None"
      }
    ],
    "doc": "<p>Runs a query with the <code>select_statement</code> and returns the number of rows in the result.</p>\n<p>Set <code>no_transaction</code> to <i>True</i> to run command without explicit transaction commit or rollback in case of error. See <a href=\"#Commit%20behavior\" class=\"name\">Commit behavior</a> for details.</p>\n<p>Use <code>alias</code> to specify what connection should be used if <a href=\"#Handling%20multiple%20database%20connections\" class=\"name\">Handling multiple database connections</a>.</p>\n<p>Use <code>parameters</code> for query variable substitution (variable substitution syntax may be different depending on the database client).</p>\n<h4>Some parameters were renamed in version 2.0</h4>\n<p>The old parameters <code>selectStatement</code> and <code>sansTran</code> are <b>deprecated</b>, please use new parameters <code>select_statement</code> and <code>no_transaction</code> instead.</p>\n<p><b>The old parameters will be removed in future versions.</b></p>\n<h4>Examples</h4>\n<table border=\"1\">\n<tr>\n<td>${Rows}=</td>\n<td>Row Count</td>\n<td>select LAST_NAME from person</td>\n<td></td>\n</tr>\n<tr>\n<td>${Rows}=</td>\n<td>Row Count</td>\n<td>select LAST_NAME from person</td>\n<td>no_transaction=True</td>\n</tr>\n<tr>\n<td>${Rows}=</td>\n<td>Row Count</td>\n<td>select LAST_NAME from person</td>\n<td>alias=postgres</td>\n</tr>\n<tr>\n<td>@{parameters}</td>\n<td>Create List</td>\n<td>person</td>\n<td></td>\n</tr>\n<tr>\n<td>${Rows}=</td>\n<td>Row Count</td>\n<td>SELECT * FROM %s</td>\n<td>parameters=${parameters}</td>\n</tr>\n</table>",
    "url": "https://marketsquare.github.io/Robotframework-Database-Library/#Row%20Count"
  },
  {
    "name": "Row Count Is 0",
    "library": "Database",
    "args": [
      {
        "name": "selectStatement",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selectStatement: str"
      },
      {
        "name": "sansTran",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "sansTran: bool = False"
      },
      {
        "name": "msg",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg: str | None = None"
      },
      {
        "name": "alias",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "alias: str | None = None"
      },
      {
        "name": "parameters",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Tuple",
              "typedoc": "tuple",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "parameters: Tuple | None = None"
      }
    ],
    "doc": "<p><b>DEPRECATED</b> Use new <a href=\"#Check%20Row%20Count\" class=\"name\">Check Row Count</a> keyword with assertion engine instead. The deprecated keyword will be removed in future versions.</p>\n<p>Check if any rows are returned from the submitted <code>selectStatement</code>. If there are, then this will throw an AssertionError.</p>\n<p>Set optional input <code>sansTran</code> to <i>True</i> to run command without an explicit transaction commit or rollback.</p>\n<p>The default error message can be overridden with the <code>msg</code> argument.</p>\n<p>Use optional <code>alias</code> parameter to specify what connection should be used for the query if you have more than one connection open.</p>\n<p>Use <code>parameters</code> for query variable substitution (variable substitution syntax may be different depending on the database client).</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Row Count is 0</td>\n<td>SELECT id FROM person WHERE first_name = 'Franz Allan'</td>\n<td></td>\n</tr>\n<tr>\n<td>Row Count is 0</td>\n<td>SELECT id FROM person WHERE first_name = 'Franz Allan'</td>\n<td>msg=my error message</td>\n</tr>\n<tr>\n<td>Row Count is 0</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td>alias=my_alias</td>\n</tr>\n<tr>\n<td>Row Count is 0</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td>sansTran=True</td>\n</tr>\n<tr>\n<td>@{parameters}</td>\n<td>Create List</td>\n<td>John</td>\n</tr>\n<tr>\n<td>Row Count is 0</td>\n<td>SELECT id FROM person WHERE first_name = %s</td>\n<td>parameters=${parameters}</td>\n</tr>\n</table>",
    "url": "https://marketsquare.github.io/Robotframework-Database-Library/#Row%20Count%20Is%200"
  },
  {
    "name": "Row Count Is Equal To X",
    "library": "Database",
    "args": [
      {
        "name": "selectStatement",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selectStatement: str"
      },
      {
        "name": "numRows",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "numRows: str"
      },
      {
        "name": "sansTran",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "sansTran: bool = False"
      },
      {
        "name": "msg",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg: str | None = None"
      },
      {
        "name": "alias",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "alias: str | None = None"
      },
      {
        "name": "parameters",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Tuple",
              "typedoc": "tuple",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "parameters: Tuple | None = None"
      }
    ],
    "doc": "<p><b>DEPRECATED</b> Use new <a href=\"#Check%20Row%20Count\" class=\"name\">Check Row Count</a> keyword with assertion engine instead. The deprecated keyword will be removed in future versions.</p>\n<p>Check if the number of rows returned from <code>selectStatement</code> is equal to the value submitted. If not, then this will throw an AssertionError.</p>\n<p>Set optional input <code>sansTran</code> to <i>True</i> to run command without an explicit transaction commit or rollback.</p>\n<p>The default error message can be overridden with the <code>msg</code> argument.</p>\n<p>Use optional <code>alias</code> parameter to specify what connection should be used for the query if you have more than one connection open.</p>\n<p>Use <code>parameters</code> for query variable substitution (variable substitution syntax may be different depending on the database client).</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Row Count Is Equal To X</td>\n<td>SELECT id FROM person</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>Row Count Is Equal To X</td>\n<td>SELECT id FROM person</td>\n<td>3</td>\n<td>msg=my error message</td>\n</tr>\n<tr>\n<td>Row Count Is Equal To X</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td>0</td>\n<td>alias=my_alias</td>\n</tr>\n<tr>\n<td>Row Count Is Equal To X</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td>0</td>\n<td>sansTran=True</td>\n</tr>\n<tr>\n<td>@{parameters}</td>\n<td>Create List</td>\n<td>John</td>\n<td></td>\n</tr>\n<tr>\n<td>Row Count Is Equal To X</td>\n<td>SELECT id FROM person WHERE first_name = %s</td>\n<td>0</td>\n<td>parameters=${parameters}</td>\n</tr>\n</table>",
    "url": "https://marketsquare.github.io/Robotframework-Database-Library/#Row%20Count%20Is%20Equal%20To%20X"
  },
  {
    "name": "Row Count Is Greater Than X",
    "library": "Database",
    "args": [
      {
        "name": "selectStatement",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selectStatement: str"
      },
      {
        "name": "numRows",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "numRows: str"
      },
      {
        "name": "sansTran",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "sansTran: bool = False"
      },
      {
        "name": "msg",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg: str | None = None"
      },
      {
        "name": "alias",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "alias: str | None = None"
      },
      {
        "name": "parameters",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Tuple",
              "typedoc": "tuple",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "parameters: Tuple | None = None"
      }
    ],
    "doc": "<p><b>DEPRECATED</b> Use new <a href=\"#Check%20Row%20Count\" class=\"name\">Check Row Count</a> keyword with assertion engine instead. The deprecated keyword will be removed in future versions.</p>\n<p>Check if the number of rows returned from <code>selectStatement</code> is greater than the value submitted. If not, then this will throw an AssertionError.</p>\n<p>Set optional input <code>sansTran</code> to <i>True</i> to run command without an explicit transaction commit or rollback.</p>\n<p>The default error message can be overridden with the <code>msg</code> argument.</p>\n<p>Use optional <code>alias</code> parameter to specify what connection should be used for the query if you have more than one connection open.</p>\n<p>Use <code>parameters</code> for query variable substitution (variable substitution syntax may be different depending on the database client).</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Row Count Is Greater Than X</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>Row Count Is Greater Than X</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td>0</td>\n<td>msg=my error message</td>\n</tr>\n<tr>\n<td>Row Count Is Greater Than X</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td>0</td>\n<td>alias=my_alias</td>\n</tr>\n<tr>\n<td>Row Count Is Greater Than X</td>\n<td>SELECT id FROM person</td>\n<td>1</td>\n<td>sansTran=True</td>\n</tr>\n<tr>\n<td>@{parameters}</td>\n<td>Create List</td>\n<td>John</td>\n<td></td>\n</tr>\n<tr>\n<td>Row Count Is Greater Than X</td>\n<td>SELECT id FROM person WHERE first_name = %s</td>\n<td>0</td>\n<td>parameters=${parameters}</td>\n</tr>\n</table>",
    "url": "https://marketsquare.github.io/Robotframework-Database-Library/#Row%20Count%20Is%20Greater%20Than%20X"
  },
  {
    "name": "Row Count Is Less Than X",
    "library": "Database",
    "args": [
      {
        "name": "selectStatement",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "selectStatement: str"
      },
      {
        "name": "numRows",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "numRows: str"
      },
      {
        "name": "sansTran",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "sansTran: bool = False"
      },
      {
        "name": "msg",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg: str | None = None"
      },
      {
        "name": "alias",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "alias: str | None = None"
      },
      {
        "name": "parameters",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Tuple",
              "typedoc": "tuple",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "parameters: Tuple | None = None"
      }
    ],
    "doc": "<p><b>DEPRECATED</b> Use new <a href=\"#Check%20Row%20Count\" class=\"name\">Check Row Count</a> keyword with assertion engine instead. The deprecated keyword will be removed in future versions.</p>\n<p>Check if the number of rows returned from <code>selectStatement</code> is less than the value submitted. If not, then this will throw an AssertionError.</p>\n<p>Set optional input <code>sansTran</code> to <i>True</i> to run command without an explicit transaction commit or rollback.</p>\n<p>Using optional <code>msg</code> to override the default error message:</p>\n<p>Use optional <code>alias</code> parameter to specify what connection should be used for the query if you have more than one connection open.</p>\n<p>Use <code>parameters</code> for query variable substitution (variable substitution syntax may be different depending on the database client).</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Row Count Is Less Than X</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>Row Count Is Less Than X</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td>2</td>\n<td>msg=my error message</td>\n</tr>\n<tr>\n<td>Row Count Is Less Than X</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td>3</td>\n<td>alias=my_alias</td>\n</tr>\n<tr>\n<td>Row Count Is Less Than X</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td>4</td>\n<td>sansTran=True</td>\n</tr>\n<tr>\n<td>@{parameters}</td>\n<td>Create List</td>\n<td>John</td>\n<td></td>\n</tr>\n<tr>\n<td>Row Count Is Less Than X</td>\n<td>SELECT id FROM person WHERE first_name = %s</td>\n<td>5</td>\n<td>parameters=${parameters}</td>\n</tr>\n</table>",
    "url": "https://marketsquare.github.io/Robotframework-Database-Library/#Row%20Count%20Is%20Less%20Than%20X"
  },
  {
    "name": "Set Auto Commit",
    "library": "Database",
    "args": [
      {
        "name": "auto_commit",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "auto_commit: bool = True"
      },
      {
        "name": "alias",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "alias: str | None = None"
      },
      {
        "name": "",
        "type": null,
        "defaultValue": null,
        "kind": "NAMED_ONLY_MARKER",
        "required": false,
        "repr": "*"
      },
      {
        "name": "autoCommit",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "autoCommit: bool | None = None"
      }
    ],
    "doc": "<p>Explicitly sets the autocommit behavior of the database connection to <code>auto_commit</code>. See <a href=\"#Commit%20behavior\" class=\"name\">Commit behavior</a> for details.</p>\n<p>Use <code>alias</code> to specify what connection should be used if <a href=\"#Handling%20multiple%20database%20connections\" class=\"name\">Handling multiple database connections</a>.</p>\n<h4>Some parameters were renamed in version 2.0</h4>\n<p>The old parameter <code>autoCommit</code> is <b>deprecated</b>, please use new parameter <code>auto_commit</code> instead.</p>\n<p><b>The old parameter will be removed in future versions.</b></p>\n<h4>Examples</h4>\n<pre>\nSet Auto Commit\nSet Auto Commit | False |\nSet Auto Commit | True  | alias=postgres |\n</pre>",
    "url": "https://marketsquare.github.io/Robotframework-Database-Library/#Set%20Auto%20Commit"
  },
  {
    "name": "Set Logging Query Results",
    "library": "Database",
    "args": [
      {
        "name": "enabled",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "enabled: bool | None = None"
      },
      {
        "name": "log_head",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "log_head: int | None = None"
      }
    ],
    "doc": "<p>Allows to enable/disable logging of query results and to adjust the log head value.</p>\n<ul>\n<li>Overrides the values, which were set during the library import.</li>\n<li>See <a href=\"#Logging%20query%20results\" class=\"name\">Logging query results</a> for details.</li>\n</ul>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Set Logging Query Results</td>\n<td>enabled=False</td>\n<td></td>\n</tr>\n<tr>\n<td>Set Logging Query Results</td>\n<td>enabled=True</td>\n<td>log_head=0</td>\n</tr>\n<tr>\n<td>Set Logging Query Results</td>\n<td>log_head=10</td>\n<td></td>\n</tr>\n</table>",
    "url": "https://marketsquare.github.io/Robotframework-Database-Library/#Set%20Logging%20Query%20Results"
  },
  {
    "name": "Set Omit Trailing Semicolon",
    "library": "Database",
    "args": [
      {
        "name": "omit_trailing_semicolon",
        "type": null,
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "omit_trailing_semicolon=True"
      },
      {
        "name": "alias",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "alias: str | None = None"
      }
    ],
    "doc": "<p>Set the <code>omit_trailing_semicolon</code> to control the <a href=\"#Omitting%20trailing%20semicolon%20behavior\" class=\"name\">Omitting trailing semicolon behavior</a> for the connection.</p>\n<p>Use <code>alias</code> to specify what connection should be used if <a href=\"#Handling%20multiple%20database%20connections\" class=\"name\">Handling multiple database connections</a>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Set Omit Trailing Semicolon</td>\n<td>True</td>\n<td></td>\n</tr>\n<tr>\n<td>Set Omit Trailing Semicolon</td>\n<td>False</td>\n<td>alias=my_alias</td>\n</tr>\n</table>",
    "url": "https://marketsquare.github.io/Robotframework-Database-Library/#Set%20Omit%20Trailing%20Semicolon"
  },
  {
    "name": "Split Sql Script",
    "library": "Database",
    "args": [
      {
        "name": "script_path",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "script_path: str"
      },
      {
        "name": "external_parser",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "external_parser=False"
      }
    ],
    "doc": "<p>Splits the content of the SQL script file loaded from <code>script_path</code> into individual SQL commands and returns them as a list of strings. SQL commands are expected to be delimited by a semicolon (';').</p>\n<p>Set <code>external_parser</code> to <i>True</i> to use the external library <a href=\"https://pypi.org/project/sqlparse/\">sqlparse</a>.</p>",
    "url": "https://marketsquare.github.io/Robotframework-Database-Library/#Split%20Sql%20Script"
  },
  {
    "name": "Switch Database",
    "library": "Database",
    "args": [
      {
        "name": "alias",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "alias: str"
      }
    ],
    "doc": "<p>Switch the default database connection to <code>alias</code>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Switch Database</td>\n<td>my_alias</td>\n</tr>\n<tr>\n<td>Switch Database</td>\n<td>alias=my_alias</td>\n</tr>\n</table>",
    "url": "https://marketsquare.github.io/Robotframework-Database-Library/#Switch%20Database"
  },
  {
    "name": "Table Must Exist",
    "library": "Database",
    "args": [
      {
        "name": "table_name",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "table_name: str"
      },
      {
        "name": "no_transaction",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "no_transaction: bool = False"
      },
      {
        "name": "msg",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg: str | None = None"
      },
      {
        "name": "alias",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "alias: str | None = None"
      },
      {
        "name": "",
        "type": null,
        "defaultValue": null,
        "kind": "NAMED_ONLY_MARKER",
        "required": false,
        "repr": "*"
      },
      {
        "name": "tableName",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "tableName: str | None = None"
      },
      {
        "name": "sansTran",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "sansTran: bool | None = None"
      }
    ],
    "doc": "<p>Check if the table with <span class=\"name\">table_name</span> exists in the database.</p>\n<p>Use <code>msg</code> for custom error message.</p>\n<p>Set <code>no_transaction</code> to <i>True</i> to run command without explicit transaction rollback in case of error. See <a href=\"#Commit%20behavior\" class=\"name\">Commit behavior</a> for details.</p>\n<p>Use <code>alias</code> to specify what connection should be used if <a href=\"#Handling%20multiple%20database%20connections\" class=\"name\">Handling multiple database connections</a>.</p>\n<h4>Some parameters were renamed in version 2.0</h4>\n<p>The old parameters <code>tableName</code> and <code>sansTran</code> are <b>deprecated</b>, please use new parameters <code>table_name</code> and <code>no_transaction</code> instead.</p>\n<p><b>The old parameters will be removed in future versions.</b></p>\n<h4>Examples</h4>\n<table border=\"1\">\n<tr>\n<td>Table Must Exist</td>\n<td>person</td>\n<td></td>\n</tr>\n<tr>\n<td>Table Must Exist</td>\n<td>person</td>\n<td>msg=my error message</td>\n</tr>\n<tr>\n<td>Table Must Exist</td>\n<td>person</td>\n<td>alias=my_alias</td>\n</tr>\n<tr>\n<td>Table Must Exist</td>\n<td>person</td>\n<td>no_transaction=True</td>\n</tr>\n</table>",
    "url": "https://marketsquare.github.io/Robotframework-Database-Library/#Table%20Must%20Exist"
  },
  {
    "name": "Add Time To Date",
    "library": "DateTime",
    "args": [
      {
        "name": "date",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "date"
      },
      {
        "name": "time",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "time"
      },
      {
        "name": "result_format",
        "type": null,
        "defaultValue": "timestamp",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "result_format=timestamp"
      },
      {
        "name": "exclude_millis",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "exclude_millis=False"
      },
      {
        "name": "date_format",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "date_format=None"
      }
    ],
    "doc": "<p>Adds time to date and returns the resulting date.</p>\n<p>Arguments:</p>\n<ul>\n<li><code>date:</code>           Date to add time to in one of the supported <a href=\"#Date%20formats\" class=\"name\">date formats</a>.</li>\n<li><code>time:</code>           Time that is added in one of the supported <a href=\"#Time%20formats\" class=\"name\">time formats</a>.</li>\n<li><code>result_format:</code>  Format of the returned date.</li>\n<li><code>exclude_millis:</code> When set to any true value, rounds and drops milliseconds as explained in <a href=\"#Millisecond%20handling\" class=\"name\">millisecond handling</a>.</li>\n<li><code>date_format:</code>    Possible <a href=\"#Custom%20timestamp\" class=\"name\">custom timestamp</a> format of <code>date</code>.</li>\n</ul>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${date} =</td>\n<td>Add Time To Date</td>\n<td>2014-05-28 12:05:03.111</td>\n<td>7 days</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${date}</td>\n<td>2014-06-04 12:05:03.111</td>\n<td></td>\n</tr>\n<tr>\n<td>${date} =</td>\n<td>Add Time To Date</td>\n<td>2014-05-28 12:05:03.111</td>\n<td>01:02:03:004</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${date}</td>\n<td>2014-05-28 13:07:06.115</td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/DateTime.html#Add%20Time%20To%20Date"
  },
  {
    "name": "Add Time To Time",
    "library": "DateTime",
    "args": [
      {
        "name": "time1",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "time1"
      },
      {
        "name": "time2",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "time2"
      },
      {
        "name": "result_format",
        "type": null,
        "defaultValue": "number",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "result_format=number"
      },
      {
        "name": "exclude_millis",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "exclude_millis=False"
      }
    ],
    "doc": "<p>Adds time to another time and returns the resulting time.</p>\n<p>Arguments:</p>\n<ul>\n<li><code>time1:</code>          First time in one of the supported <a href=\"#Time%20formats\" class=\"name\">time formats</a>.</li>\n<li><code>time2:</code>          Second time in one of the supported <a href=\"#Time%20formats\" class=\"name\">time formats</a>.</li>\n<li><code>result_format:</code>  Format of the returned time.</li>\n<li><code>exclude_millis:</code> When set to any true value, rounds and drops milliseconds as explained in <a href=\"#Millisecond%20handling\" class=\"name\">millisecond handling</a>.</li>\n</ul>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${time} =</td>\n<td>Add Time To Time</td>\n<td>1 minute</td>\n<td>42</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${time}</td>\n<td>${102}</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${time} =</td>\n<td>Add Time To Time</td>\n<td>3 hours 5 minutes</td>\n<td>01:02:03</td>\n<td>timer</td>\n<td>exclude_millis=yes</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${time}</td>\n<td>04:07:03</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/DateTime.html#Add%20Time%20To%20Time"
  },
  {
    "name": "Convert Date",
    "library": "DateTime",
    "args": [
      {
        "name": "date",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "date"
      },
      {
        "name": "result_format",
        "type": null,
        "defaultValue": "timestamp",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "result_format=timestamp"
      },
      {
        "name": "exclude_millis",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "exclude_millis=False"
      },
      {
        "name": "date_format",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "date_format=None"
      }
    ],
    "doc": "<p>Converts between supported <a href=\"#Date%20formats\" class=\"name\">date formats</a>.</p>\n<p>Arguments:</p>\n<ul>\n<li><code>date:</code>           Date in one of the supported <a href=\"#Date%20formats\" class=\"name\">date formats</a>.</li>\n<li><code>result_format:</code>  Format of the returned date.</li>\n<li><code>exclude_millis:</code> When set to any true value, rounds and drops milliseconds as explained in <a href=\"#Millisecond%20handling\" class=\"name\">millisecond handling</a>.</li>\n<li><code>date_format:</code>    Specifies possible <a href=\"#Custom%20timestamp\" class=\"name\">custom timestamp</a> format.</li>\n</ul>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${date} =</td>\n<td>Convert Date</td>\n<td>20140528 12:05:03.111</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${date}</td>\n<td>2014-05-28 12:05:03.111</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${date} =</td>\n<td>Convert Date</td>\n<td>${date}</td>\n<td>epoch</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${date}</td>\n<td>${1401267903.111}</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${date} =</td>\n<td>Convert Date</td>\n<td>5.28.2014 12:05</td>\n<td>exclude_millis=yes</td>\n<td>date_format=%m.%d.%Y %H:%M</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${date}</td>\n<td>2014-05-28 12:05:00</td>\n<td></td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/DateTime.html#Convert%20Date"
  },
  {
    "name": "Convert Time",
    "library": "DateTime",
    "args": [
      {
        "name": "time",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "time"
      },
      {
        "name": "result_format",
        "type": null,
        "defaultValue": "number",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "result_format=number"
      },
      {
        "name": "exclude_millis",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "exclude_millis=False"
      }
    ],
    "doc": "<p>Converts between supported <a href=\"#Time%20formats\" class=\"name\">time formats</a>.</p>\n<p>Arguments:</p>\n<ul>\n<li><code>time:</code>           Time in one of the supported <a href=\"#Time%20formats\" class=\"name\">time formats</a>.</li>\n<li><code>result_format:</code>  Format of the returned time.</li>\n<li><code>exclude_millis:</code> When set to any true value, rounds and drops milliseconds as explained in <a href=\"#Millisecond%20handling\" class=\"name\">millisecond handling</a>.</li>\n</ul>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${time} =</td>\n<td>Convert Time</td>\n<td>10 seconds</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${time}</td>\n<td>${10}</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${time} =</td>\n<td>Convert Time</td>\n<td>1:00:01</td>\n<td>verbose</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${time}</td>\n<td>1 hour 1 second</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${time} =</td>\n<td>Convert Time</td>\n<td>${3661.5}</td>\n<td>timer</td>\n<td>exclude_milles=yes</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${time}</td>\n<td>01:01:02</td>\n<td></td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/DateTime.html#Convert%20Time"
  },
  {
    "name": "Get Current Date",
    "library": "DateTime",
    "args": [
      {
        "name": "time_zone",
        "type": null,
        "defaultValue": "local",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "time_zone=local"
      },
      {
        "name": "increment",
        "type": null,
        "defaultValue": "0",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "increment=0"
      },
      {
        "name": "result_format",
        "type": null,
        "defaultValue": "timestamp",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "result_format=timestamp"
      },
      {
        "name": "exclude_millis",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "exclude_millis=False"
      }
    ],
    "doc": "<p>Returns current local or UTC time with an optional increment.</p>\n<p>Arguments:</p>\n<ul>\n<li><code>time_zone:</code>      Get the current time on this time zone. Currently only <code>local</code> (default) and <code>UTC</code> are supported. Has no effect if date is returned as an <a href=\"#Epoch%20time\" class=\"name\">epoch time</a>.</li>\n<li><code>increment:</code>      Optional time increment to add to the returned date in one of the supported <a href=\"#Time%20formats\" class=\"name\">time formats</a>. Can be negative.</li>\n<li><code>result_format:</code>  Format of the returned date (see <a href=\"#Date%20formats\" class=\"name\">date formats</a>).</li>\n<li><code>exclude_millis:</code> When set to any true value, rounds and drops milliseconds as explained in <a href=\"#Millisecond%20handling\" class=\"name\">millisecond handling</a>.</li>\n</ul>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${date} =</td>\n<td>Get Current Date</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${date}</td>\n<td>2014-06-12 20:00:58.946</td>\n<td></td>\n</tr>\n<tr>\n<td>${date} =</td>\n<td>Get Current Date</td>\n<td>UTC</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${date}</td>\n<td>2014-06-12 17:00:58.946</td>\n<td></td>\n</tr>\n<tr>\n<td>${date} =</td>\n<td>Get Current Date</td>\n<td>increment=02:30:00</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${date}</td>\n<td>2014-06-12 22:30:58.946</td>\n<td></td>\n</tr>\n<tr>\n<td>${date} =</td>\n<td>Get Current Date</td>\n<td>UTC</td>\n<td>- 5 hours</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${date}</td>\n<td>2014-06-12 12:00:58.946</td>\n<td></td>\n</tr>\n<tr>\n<td>${date} =</td>\n<td>Get Current Date</td>\n<td>result_format=datetime</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${date.year}</td>\n<td>${2014}</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${date.month}</td>\n<td>${6}</td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/DateTime.html#Get%20Current%20Date"
  },
  {
    "name": "Subtract Date From Date",
    "library": "DateTime",
    "args": [
      {
        "name": "date1",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "date1"
      },
      {
        "name": "date2",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "date2"
      },
      {
        "name": "result_format",
        "type": null,
        "defaultValue": "number",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "result_format=number"
      },
      {
        "name": "exclude_millis",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "exclude_millis=False"
      },
      {
        "name": "date1_format",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "date1_format=None"
      },
      {
        "name": "date2_format",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "date2_format=None"
      }
    ],
    "doc": "<p>Subtracts date from another date and returns time between.</p>\n<p>Arguments:</p>\n<ul>\n<li><code>date1:</code>          Date to subtract another date from in one of the supported <a href=\"#Date%20formats\" class=\"name\">date formats</a>.</li>\n<li><code>date2:</code>          Date that is subtracted in one of the supported <a href=\"#Date%20formats\" class=\"name\">date formats</a>.</li>\n<li><code>result_format:</code>  Format of the returned time (see <a href=\"#Time%20formats\" class=\"name\">time formats</a>).</li>\n<li><code>exclude_millis:</code> When set to any true value, rounds and drops milliseconds as explained in <a href=\"#Millisecond%20handling\" class=\"name\">millisecond handling</a>.</li>\n<li><code>date1_format:</code>   Possible <a href=\"#Custom%20timestamp\" class=\"name\">custom timestamp</a> format of <code>date1</code>.</li>\n<li><code>date2_format:</code>   Possible <a href=\"#Custom%20timestamp\" class=\"name\">custom timestamp</a> format of <code>date2</code>.</li>\n</ul>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${time} =</td>\n<td>Subtract Date From Date</td>\n<td>2014-05-28 12:05:52</td>\n<td>2014-05-28 12:05:10</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${time}</td>\n<td>${42}</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${time} =</td>\n<td>Subtract Date From Date</td>\n<td>2014-05-28 12:05:52</td>\n<td>2014-05-27 12:05:10</td>\n<td>verbose</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${time}</td>\n<td>1 day 42 seconds</td>\n<td></td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/DateTime.html#Subtract%20Date%20From%20Date"
  },
  {
    "name": "Subtract Time From Date",
    "library": "DateTime",
    "args": [
      {
        "name": "date",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "date"
      },
      {
        "name": "time",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "time"
      },
      {
        "name": "result_format",
        "type": null,
        "defaultValue": "timestamp",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "result_format=timestamp"
      },
      {
        "name": "exclude_millis",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "exclude_millis=False"
      },
      {
        "name": "date_format",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "date_format=None"
      }
    ],
    "doc": "<p>Subtracts time from date and returns the resulting date.</p>\n<p>Arguments:</p>\n<ul>\n<li><code>date:</code>           Date to subtract time from in one of the supported <a href=\"#Date%20formats\" class=\"name\">date formats</a>.</li>\n<li><code>time:</code>           Time that is subtracted in one of the supported <a href=\"#Time%20formats\" class=\"name\">time formats</a>.</li>\n<li><code>result_format:</code>  Format of the returned date.</li>\n<li><code>exclude_millis:</code> When set to any true value, rounds and drops milliseconds as explained in <a href=\"#Millisecond%20handling\" class=\"name\">millisecond handling</a>.</li>\n<li><code>date_format:</code>    Possible <a href=\"#Custom%20timestamp\" class=\"name\">custom timestamp</a> format of <code>date</code>.</li>\n</ul>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${date} =</td>\n<td>Subtract Time From Date</td>\n<td>2014-06-04 12:05:03.111</td>\n<td>7 days</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${date}</td>\n<td>2014-05-28 12:05:03.111</td>\n<td></td>\n</tr>\n<tr>\n<td>${date} =</td>\n<td>Subtract Time From Date</td>\n<td>2014-05-28 13:07:06.115</td>\n<td>01:02:03:004</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${date}</td>\n<td>2014-05-28 12:05:03.111</td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/DateTime.html#Subtract%20Time%20From%20Date"
  },
  {
    "name": "Subtract Time From Time",
    "library": "DateTime",
    "args": [
      {
        "name": "time1",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "time1"
      },
      {
        "name": "time2",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "time2"
      },
      {
        "name": "result_format",
        "type": null,
        "defaultValue": "number",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "result_format=number"
      },
      {
        "name": "exclude_millis",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "exclude_millis=False"
      }
    ],
    "doc": "<p>Subtracts time from another time and returns the resulting time.</p>\n<p>Arguments:</p>\n<ul>\n<li><code>time1:</code>          Time to subtract another time from in one of the supported <a href=\"#Time%20formats\" class=\"name\">time formats</a>.</li>\n<li><code>time2:</code>          Time to subtract in one of the supported <a href=\"#Time%20formats\" class=\"name\">time formats</a>.</li>\n<li><code>result_format:</code>  Format of the returned time.</li>\n<li><code>exclude_millis:</code> When set to any true value, rounds and drops milliseconds as explained in <a href=\"#Millisecond%20handling\" class=\"name\">millisecond handling</a>.</li>\n</ul>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${time} =</td>\n<td>Subtract Time From Time</td>\n<td>00:02:30</td>\n<td>100</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${time}</td>\n<td>${50}</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${time} =</td>\n<td>Subtract Time From Time</td>\n<td>${time}</td>\n<td>1 minute</td>\n<td>compact</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${time}</td>\n<td>- 10s</td>\n<td></td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/DateTime.html#Subtract%20Time%20From%20Time"
  },
  {
    "name": "Aba",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate an ABA routing transit number.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Aba"
  },
  {
    "name": "Add Provider",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "self",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "self"
      },
      {
        "name": "provider",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "BaseProvider",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "Type",
              "typedoc": null,
              "nested": [
                {
                  "name": "BaseProvider",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "provider: BaseProvider | Type[BaseProvider]"
      }
    ],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Add%20Provider"
  },
  {
    "name": "Address",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>:example: '791 Crist Parks, Sashabury, IL 86039-9874'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Address"
  },
  {
    "name": "Administrative Unit",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Administrative%20Unit"
  },
  {
    "name": "Am Pm",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>:sample:</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Am%20Pm"
  },
  {
    "name": "Android Platform Token",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate an Android platform token used in user agent strings.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Android%20Platform%20Token"
  },
  {
    "name": "Ascii Company Email",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Ascii%20Company%20Email"
  },
  {
    "name": "Ascii Email",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Ascii%20Email"
  },
  {
    "name": "Ascii Free Email",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Ascii%20Free%20Email"
  },
  {
    "name": "Ascii Safe Email",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Ascii%20Safe%20Email"
  },
  {
    "name": "Bank Country",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate the bank provider's ISO 3166-1 alpha-2 country code.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Bank%20Country"
  },
  {
    "name": "Basic Phone Number",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Basic%20Phone%20Number"
  },
  {
    "name": "Bban",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a Basic Bank Account Number (BBAN).</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Bban"
  },
  {
    "name": "Binary",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "length",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "1048576",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "length: int = 1048576"
      }
    ],
    "doc": "<p>Generate a random binary blob of <code>length</code> bytes.</p>\n<p>If this faker instance has been seeded, performance will be signficiantly reduced, to conform to the seeding.</p>\n<p>:sample: length=64</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Binary"
  },
  {
    "name": "Boolean",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "chance_of_getting_true",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "50",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "chance_of_getting_true: int = 50"
      }
    ],
    "doc": "<p>Generate a random boolean value based on <code>chance_of_getting_true</code>.</p>\n<p>:sample: chance_of_getting_true=25 :sample: chance_of_getting_true=50 :sample: chance_of_getting_true=75</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Boolean"
  },
  {
    "name": "Bothify",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "text",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "## ??",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "text: str = ## ??"
      },
      {
        "name": "letters",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "letters: str = abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
      }
    ],
    "doc": "<p>Generate a string with each placeholder in <code>text</code> replaced according to the following rules:</p>\n<ul>\n<li>Number signs ('#') are replaced with a random digit (0 to 9).</li>\n<li>Question marks ('?') are replaced with a random character from <code>letters</code>.</li>\n</ul>\n<p>By default, <code>letters</code> contains all ASCII letters, uppercase and lowercase.</p>\n<p>Under the hood, this method uses :meth:<span class=\"name\">numerify() &lt;faker.providers.BaseProvider.numerify&gt;</span> and and :meth:<span class=\"name\">lexify() &lt;faker.providers.BaseProvider.lexify&gt;</span> to generate random values for number signs and question marks respectively.</p>\n<p>:sample: letters='ABCDE' :sample: text='Product Number: ????-########' :sample: text='Product Number: ????-########', letters='ABCDE'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Bothify"
  },
  {
    "name": "Bs",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>:example: 'integrate extensible convergence'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Bs"
  },
  {
    "name": "Building Number",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>:example: '791'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Building%20Number"
  },
  {
    "name": "Catch Phrase",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>:example: 'Robust full-range hub'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Catch%20Phrase"
  },
  {
    "name": "Century",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>:sample:</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Century"
  },
  {
    "name": "Chrome",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "version_from",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "13",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "version_from: int = 13"
      },
      {
        "name": "version_to",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "63",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "version_to: int = 63"
      },
      {
        "name": "build_from",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "800",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "build_from: int = 800"
      },
      {
        "name": "build_to",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "899",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "build_to: int = 899"
      }
    ],
    "doc": "<p>Generate a Chrome web browser user agent string.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Chrome"
  },
  {
    "name": "City",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>:example: 'Sashabury'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#City"
  },
  {
    "name": "City Prefix",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#City%20Prefix"
  },
  {
    "name": "City Suffix",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>:example: 'town'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#City%20Suffix"
  },
  {
    "name": "Color",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "hue",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "float",
              "typedoc": "float",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "Sequence",
              "typedoc": "list",
              "nested": [
                {
                  "name": "int",
                  "typedoc": "integer",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "hue: str | float | int | Sequence[int] | None = None"
      },
      {
        "name": "luminosity",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "luminosity: str | None = None"
      },
      {
        "name": "color_format",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "hex",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "color_format: str = hex"
      }
    ],
    "doc": "<p>Generate a color in a human-friendly way.</p>\n<p>Under the hood, this method first creates a color represented in the HSV color model and then converts it to the desired <code>color_format</code>. The argument <code>hue</code> controls the H value according to the following rules:</p>\n<ul>\n<li>If the value is a number from <code>0</code> to <code>360</code>, it will serve as the H value of the generated color.</li>\n<li>If the value is a tuple/list of 2 numbers from 0 to 360, the color's H value will be randomly selected from that range.</li>\n<li>If the value is a valid string, the color's H value will be randomly selected from the H range corresponding to the supplied string. Valid values are <code>'monochrome'</code>, <code>'red'</code>, <code>'orange'</code>, <code>'yellow'</code>, <code>'green'</code>, <code>'blue'</code>, <code>'purple'</code>, and <code>'pink'</code>.</li>\n</ul>\n<p>The argument <code>luminosity</code> influences both S and V values and is partially affected by <code>hue</code> as well. The finer details of this relationship are somewhat involved, so please refer to the source code instead if you wish to dig deeper. To keep the interface simple, this argument either can be omitted or can accept the following string values:<span class=\"name\">`'bright'</span>`, <code>'dark'</code>, <code>'light'</code>, or <code>'random'</code>.</p>\n<p>The argument <code>color_format</code> controls in which color model the color is represented. Valid values are <code>'hsv'</code>, <code>'hsl'</code>, <code>'rgb'</code>, or <code>'hex'</code> (default).</p>\n<p>:sample: hue='red' :sample: luminosity='light' :sample: hue=(100, 200), color_format='rgb' :sample: hue='orange', luminosity='bright' :sample: hue=135, luminosity='dark', color_format='hsv' :sample: hue=(300, 20), luminosity='random', color_format='hsl'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Color"
  },
  {
    "name": "Color Hsl",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "hue",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "float",
              "typedoc": "float",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "Sequence",
              "typedoc": "list",
              "nested": [
                {
                  "name": "int",
                  "typedoc": "integer",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "hue: str | float | int | Sequence[int] | None = None"
      },
      {
        "name": "luminosity",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "luminosity: str | None = None"
      }
    ],
    "doc": "<p>Generate a HSL color tuple in a human-friendly way.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Color%20Hsl"
  },
  {
    "name": "Color Hsv",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "hue",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "float",
              "typedoc": "float",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "Sequence",
              "typedoc": "list",
              "nested": [
                {
                  "name": "int",
                  "typedoc": "integer",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "hue: str | float | int | Sequence[int] | None = None"
      },
      {
        "name": "luminosity",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "luminosity: str | None = None"
      }
    ],
    "doc": "<p>Generate a HSV color tuple in a human-friendly way.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Color%20Hsv"
  },
  {
    "name": "Color Name",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a color name.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Color%20Name"
  },
  {
    "name": "Color Rgb",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "hue",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "float",
              "typedoc": "float",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "Sequence",
              "typedoc": "list",
              "nested": [
                {
                  "name": "int",
                  "typedoc": "integer",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "hue: str | float | int | Sequence[int] | None = None"
      },
      {
        "name": "luminosity",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "luminosity: str | None = None"
      }
    ],
    "doc": "<p>Generate a RGB color tuple of integers in a human-friendly way.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Color%20Rgb"
  },
  {
    "name": "Color Rgb Float",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "hue",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "float",
              "typedoc": "float",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "Sequence",
              "typedoc": "list",
              "nested": [
                {
                  "name": "int",
                  "typedoc": "integer",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "hue: str | float | int | Sequence[int] | None = None"
      },
      {
        "name": "luminosity",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "luminosity: str | None = None"
      }
    ],
    "doc": "<p>Generate a RGB color tuple of floats in a human-friendly way.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Color%20Rgb%20Float"
  },
  {
    "name": "Company",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>:example: 'Acme Ltd'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Company"
  },
  {
    "name": "Company Email",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Company%20Email"
  },
  {
    "name": "Company Suffix",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>:example: 'Ltd'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Company%20Suffix"
  },
  {
    "name": "Coordinate",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "center",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "float",
              "typedoc": "float",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "center: float | None = None"
      },
      {
        "name": "radius",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "float",
              "typedoc": "float",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "0.001",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "radius: float | int = 0.001"
      }
    ],
    "doc": "<p>Optionally center the coord and pick a point within radius.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Coordinate"
  },
  {
    "name": "Country",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Country"
  },
  {
    "name": "Country Calling Code",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Country%20Calling%20Code"
  },
  {
    "name": "Country Code",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "representation",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "alpha-2",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "representation: str = alpha-2"
      }
    ],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Country%20Code"
  },
  {
    "name": "Credit Card Expire",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "start",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "date",
              "typedoc": "date",
              "nested": [],
              "union": false
            },
            {
              "name": "datetime",
              "typedoc": "datetime",
              "nested": [],
              "union": false
            },
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "now",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "start: date | datetime | timedelta | str | int = now"
      },
      {
        "name": "end",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "date",
              "typedoc": "date",
              "nested": [],
              "union": false
            },
            {
              "name": "datetime",
              "typedoc": "datetime",
              "nested": [],
              "union": false
            },
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "+10y",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "end: date | datetime | timedelta | str | int = +10y"
      },
      {
        "name": "date_format",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "%m/%y",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "date_format: str = %m/%y"
      }
    ],
    "doc": "<p>Generate a credit card expiry date.</p>\n<p>This method uses |date_time_between| under the hood to generate the expiry date, so the <code>start</code> and <code>end</code> arguments work in the same way here as it would in that method. For the actual formatting of the expiry date, |strftime| is used and <code>date_format</code> is simply passed to that method.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Credit%20Card%20Expire"
  },
  {
    "name": "Credit Card Full",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "card_type",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "~CardType",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "card_type: ~CardType | None = None"
      }
    ],
    "doc": "<p>Generate a set of credit card details.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Credit%20Card%20Full"
  },
  {
    "name": "Credit Card Number",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "card_type",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "~CardType",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "card_type: ~CardType | None = None"
      }
    ],
    "doc": "<p>Generate a valid credit card number.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Credit%20Card%20Number"
  },
  {
    "name": "Credit Card Provider",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "card_type",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "~CardType",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "card_type: ~CardType | None = None"
      }
    ],
    "doc": "<p>Generate a credit card provider name.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Credit%20Card%20Provider"
  },
  {
    "name": "Credit Card Security Code",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "card_type",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "~CardType",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "card_type: ~CardType | None = None"
      }
    ],
    "doc": "<p>Generate a credit card security code.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Credit%20Card%20Security%20Code"
  },
  {
    "name": "Cryptocurrency",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Cryptocurrency"
  },
  {
    "name": "Cryptocurrency Code",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Cryptocurrency%20Code"
  },
  {
    "name": "Cryptocurrency Name",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Cryptocurrency%20Name"
  },
  {
    "name": "Csv",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "header",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Sequence",
              "typedoc": "list",
              "nested": [
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "header: Sequence[str] | None = None"
      },
      {
        "name": "data_columns",
        "type": {
          "name": "Tuple",
          "typedoc": "tuple",
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": false
        },
        "defaultValue": "('{{name}}', '{{address}}')",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "data_columns: Tuple[str, str] = ('{{name}}', '{{address}}')"
      },
      {
        "name": "num_rows",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "10",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "num_rows: int = 10"
      },
      {
        "name": "include_row_ids",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "include_row_ids: bool = False"
      }
    ],
    "doc": "<p>Generate random comma-separated values.</p>\n<p>For more information on the different arguments of this method, please refer to :meth:<span class=\"name\">dsv() &lt;faker.providers.misc.Provider.dsv&gt;</span> which is used under the hood.</p>\n<p>:sample: data_columns=('{{name}}', '{{address}}'), num_rows=10, include_row_ids=False :sample: header=('Name', 'Address', 'Favorite Color'), data_columns=('{{name}}', '{{address}}', '{{safe_color_name}}'), num_rows=10, include_row_ids=True</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Csv"
  },
  {
    "name": "Currency",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Currency"
  },
  {
    "name": "Currency Code",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Currency%20Code"
  },
  {
    "name": "Currency Name",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Currency%20Name"
  },
  {
    "name": "Currency Symbol",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "code",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "code: str | None = None"
      }
    ],
    "doc": "<p>:example: $</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Currency%20Symbol"
  },
  {
    "name": "Current Country",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Current%20Country"
  },
  {
    "name": "Current Country Code",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Current%20Country%20Code"
  },
  {
    "name": "Date",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "pattern",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "%Y-%m-%d",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "pattern: str = %Y-%m-%d"
      },
      {
        "name": "end_datetime",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "date",
              "typedoc": "date",
              "nested": [],
              "union": false
            },
            {
              "name": "datetime",
              "typedoc": "datetime",
              "nested": [],
              "union": false
            },
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "end_datetime: date | datetime | timedelta | str | int | None = None"
      }
    ],
    "doc": "<p>Get a date string between January 1, 1970 and now.</p>\n<p>:param pattern: Format of the date (year-month-day by default) :param end_datetime: A <code>DateParseType</code>. Defaults to the current date and time</p>\n<p>:sample: :sample: pattern='%m/%d/%Y' :sample: end_datetime='+1w'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Date"
  },
  {
    "name": "Date Between",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "start_date",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "date",
              "typedoc": "date",
              "nested": [],
              "union": false
            },
            {
              "name": "datetime",
              "typedoc": "datetime",
              "nested": [],
              "union": false
            },
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "-30y",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "start_date: date | datetime | timedelta | str | int = -30y"
      },
      {
        "name": "end_date",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "date",
              "typedoc": "date",
              "nested": [],
              "union": false
            },
            {
              "name": "datetime",
              "typedoc": "datetime",
              "nested": [],
              "union": false
            },
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "today",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "end_date: date | datetime | timedelta | str | int = today"
      }
    ],
    "doc": "<p>Get a Date object based on a random date between two given dates. Accepts date strings that can be recognized by strtotime().</p>\n<p>:param start_date: A <code>DateParseType</code>. Defaults to 30 years ago :param end_date: A <code>DateParseType</code>. Defaults to <code>\"today\"</code></p>\n<p>:sample: :sample: start_date='-1w' :sample: start_date=\"-1y\", end_date=\"+1w\"</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Date%20Between"
  },
  {
    "name": "Date Between Dates",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "date_start",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "date",
              "typedoc": "date",
              "nested": [],
              "union": false
            },
            {
              "name": "datetime",
              "typedoc": "datetime",
              "nested": [],
              "union": false
            },
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "date_start: date | datetime | timedelta | str | int | None = None"
      },
      {
        "name": "date_end",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "date",
              "typedoc": "date",
              "nested": [],
              "union": false
            },
            {
              "name": "datetime",
              "typedoc": "datetime",
              "nested": [],
              "union": false
            },
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "date_end: date | datetime | timedelta | str | int | None = None"
      }
    ],
    "doc": "<p>Get a random date between the two given dates.</p>\n<p>:param date_start: A <code>DateParseType</code>. Defaults to the UNIX epoch :param date_end: A <code>DateParseType</code>. Defaults to the current date and time</p>\n<p>:sample:</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Date%20Between%20Dates"
  },
  {
    "name": "Date Object",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "end_datetime",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "datetime",
              "typedoc": "datetime",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "end_datetime: datetime | None = None"
      }
    ],
    "doc": "<p>Get a date object between January 1, 1970 and now</p>\n<p>:param end_datetime: A <code>DateParseType</code>. Defaults to the current date and time</p>\n<p>:sample: :sample: end_datetime='+1w'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Date%20Object"
  },
  {
    "name": "Date Of Birth",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "tzinfo",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "tzinfo",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "tzinfo: tzinfo | None = None"
      },
      {
        "name": "minimum_age",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "0",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "minimum_age: int = 0"
      },
      {
        "name": "maximum_age",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "115",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "maximum_age: int = 115"
      }
    ],
    "doc": "<p>Generate a random date of birth represented as a Date object, constrained by optional miminimum_age and maximum_age parameters.</p>\n<p>:param tzinfo: Defaults to None. :param minimum_age: Defaults to <code>0</code>. :param maximum_age: Defaults to <code>115</code>.</p>\n<p>:sample: :sample: minimum_age=30, maximum_age=50</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Date%20Of%20Birth"
  },
  {
    "name": "Date This Century",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "before_today",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "before_today: bool = True"
      },
      {
        "name": "after_today",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "after_today: bool = False"
      }
    ],
    "doc": "<p>Gets a Date object for the current century.</p>\n<p>:param before_today: include days in current century before today. Defaults to True :param after_today: include days in current century after today. Defaults to False</p>\n<p>:sample: :sample: before_today=False, after_today=True</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Date%20This%20Century"
  },
  {
    "name": "Date This Decade",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "before_today",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "before_today: bool = True"
      },
      {
        "name": "after_today",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "after_today: bool = False"
      }
    ],
    "doc": "<p>Gets a Date object for the decade year.</p>\n<p>:param before_today: include days in current decade before today. Defaults to True :param after_today: include days in current decade after today. Defaults to False</p>\n<p>:sample: :sample: before_today=False, after_today=True</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Date%20This%20Decade"
  },
  {
    "name": "Date This Month",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "before_today",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "before_today: bool = True"
      },
      {
        "name": "after_today",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "after_today: bool = False"
      }
    ],
    "doc": "<p>Gets a Date object for the current month.</p>\n<p>:param before_today: include days in current month before today. Defaults to True :param after_today: include days in current month after today. Defaults to False</p>\n<p>:sample: :sample: before_today=False, after_today=True</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Date%20This%20Month"
  },
  {
    "name": "Date This Year",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "before_today",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "before_today: bool = True"
      },
      {
        "name": "after_today",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "after_today: bool = False"
      }
    ],
    "doc": "<p>Gets a Date object for the current year.</p>\n<p>:param before_today: include days in current year before today. Defaults to True :param after_today: include days in current year after today. Defaults to False</p>\n<p>:sample: :sample: before_today=False, after_today=True</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Date%20This%20Year"
  },
  {
    "name": "Date Time",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "tzinfo",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "tzinfo",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "tzinfo: tzinfo | None = None"
      },
      {
        "name": "end_datetime",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "date",
              "typedoc": "date",
              "nested": [],
              "union": false
            },
            {
              "name": "datetime",
              "typedoc": "datetime",
              "nested": [],
              "union": false
            },
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "end_datetime: date | datetime | timedelta | str | int | None = None"
      }
    ],
    "doc": "<p>Get a datetime object for a date between January 1, 1970 and a specified end_datetime</p>\n<p>:param tzinfo: timezone, instance of datetime.tzinfo subclass :param end_datetime: A <code>DateParseType</code>. Defaults to the current date and time</p>\n<p>:sample:</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Date%20Time"
  },
  {
    "name": "Date Time Ad",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "tzinfo",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "tzinfo",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "tzinfo: tzinfo | None = None"
      },
      {
        "name": "end_datetime",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "date",
              "typedoc": "date",
              "nested": [],
              "union": false
            },
            {
              "name": "datetime",
              "typedoc": "datetime",
              "nested": [],
              "union": false
            },
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "end_datetime: date | datetime | timedelta | str | int | None = None"
      },
      {
        "name": "start_datetime",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "date",
              "typedoc": "date",
              "nested": [],
              "union": false
            },
            {
              "name": "datetime",
              "typedoc": "datetime",
              "nested": [],
              "union": false
            },
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "start_datetime: date | datetime | timedelta | str | int | None = None"
      }
    ],
    "doc": "<p>Get a datetime object for a date between January 1, 0001 and now</p>\n<p>:param tzinfo: timezone, instance of datetime.tzinfo subclass :param end_datetime: A <code>DateParseType</code>. Defaults to the current date and time :param start_datetime: A <code>DateParseType</code>. Defaults to UNIX timestamp <code>-62135596800</code>, equivalent to 0001-01-01 00:00:00 UTC</p>\n<p>:sample:</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Date%20Time%20Ad"
  },
  {
    "name": "Date Time Between",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "start_date",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "date",
              "typedoc": "date",
              "nested": [],
              "union": false
            },
            {
              "name": "datetime",
              "typedoc": "datetime",
              "nested": [],
              "union": false
            },
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "-30y",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "start_date: date | datetime | timedelta | str | int = -30y"
      },
      {
        "name": "end_date",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "date",
              "typedoc": "date",
              "nested": [],
              "union": false
            },
            {
              "name": "datetime",
              "typedoc": "datetime",
              "nested": [],
              "union": false
            },
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "now",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "end_date: date | datetime | timedelta | str | int = now"
      },
      {
        "name": "tzinfo",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "tzinfo",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "tzinfo: tzinfo | None = None"
      }
    ],
    "doc": "<p>Get a datetime object based on a random date between two given dates. Accepts date strings that can be recognized by strtotime().</p>\n<p>:param start_date: A <code>DateParseType</code>. Defaults to 30 years ago :param end_date: A <code>DateParseType</code>. Defaults to <code>\"now\"</code> :param tzinfo: timezone, instance of datetime.tzinfo subclass</p>\n<p>:sample:</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Date%20Time%20Between"
  },
  {
    "name": "Date Time Between Dates",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "datetime_start",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "date",
              "typedoc": "date",
              "nested": [],
              "union": false
            },
            {
              "name": "datetime",
              "typedoc": "datetime",
              "nested": [],
              "union": false
            },
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "datetime_start: date | datetime | timedelta | str | int | None = None"
      },
      {
        "name": "datetime_end",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "date",
              "typedoc": "date",
              "nested": [],
              "union": false
            },
            {
              "name": "datetime",
              "typedoc": "datetime",
              "nested": [],
              "union": false
            },
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "datetime_end: date | datetime | timedelta | str | int | None = None"
      },
      {
        "name": "tzinfo",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "tzinfo",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "tzinfo: tzinfo | None = None"
      }
    ],
    "doc": "<p>Get a random datetime between the two given datetimes.</p>\n<p>:param datetime_start: A <code>DateParseType</code>. Defaults to the UNIX epoch :param datetime_end: A <code>DateParseType</code>. Defaults to the current date and time :param tzinfo: timezone, instance of datetime.tzinfo subclass</p>\n<p>:sample: :sample: datetime_start='-30y', datetime_end='now' :sample: datetime_start='now', datetime_end='+1y'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Date%20Time%20Between%20Dates"
  },
  {
    "name": "Date Time This Century",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "before_now",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "before_now: bool = True"
      },
      {
        "name": "after_now",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "after_now: bool = False"
      },
      {
        "name": "tzinfo",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "tzinfo",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "tzinfo: tzinfo | None = None"
      }
    ],
    "doc": "<p>Gets a datetime object for the current century.</p>\n<p>:param before_now: include days in current century before today. Defaults to True :param after_now: include days in current century after today. Defaults to False :param tzinfo: timezone, instance of datetime.tzinfo subclass</p>\n<p>:sample: :sample: before_now=False, after_now=True</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Date%20Time%20This%20Century"
  },
  {
    "name": "Date Time This Decade",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "before_now",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "before_now: bool = True"
      },
      {
        "name": "after_now",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "after_now: bool = False"
      },
      {
        "name": "tzinfo",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "tzinfo",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "tzinfo: tzinfo | None = None"
      }
    ],
    "doc": "<p>Gets a datetime object for the decade year.</p>\n<p>:param before_now: include days in current decade before today. Defaults to True :param after_now: include days in current decade after today. Defaults to False :param tzinfo: timezone, instance of datetime.tzinfo subclass</p>\n<p>:sample: :sample: before_now=False, after_now=True</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Date%20Time%20This%20Decade"
  },
  {
    "name": "Date Time This Month",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "before_now",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "before_now: bool = True"
      },
      {
        "name": "after_now",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "after_now: bool = False"
      },
      {
        "name": "tzinfo",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "tzinfo",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "tzinfo: tzinfo | None = None"
      }
    ],
    "doc": "<p>Gets a datetime object for the current month.</p>\n<p>:param before_now: include days in current month before today. Defaults to True :param after_now: include days in current month after today. Defaults to False :param tzinfo: timezone, instance of datetime.tzinfo subclass</p>\n<p>:sample: :sample: before_now=False, after_now=True</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Date%20Time%20This%20Month"
  },
  {
    "name": "Date Time This Year",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "before_now",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "before_now: bool = True"
      },
      {
        "name": "after_now",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "after_now: bool = False"
      },
      {
        "name": "tzinfo",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "tzinfo",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "tzinfo: tzinfo | None = None"
      }
    ],
    "doc": "<p>Gets a datetime object for the current year.</p>\n<p>:param before_now: include days in current year before today. Defaults to True :param after_now: include days in current year after today. Defaults to False :param tzinfo: timezone, instance of datetime.tzinfo subclass</p>\n<p>:sample: :sample: before_now=False, after_now=True</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Date%20Time%20This%20Year"
  },
  {
    "name": "Day Of Month",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>:sample:</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Day%20Of%20Month"
  },
  {
    "name": "Day Of Week",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>:sample:</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Day%20Of%20Week"
  },
  {
    "name": "Del Arguments",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "self",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "self"
      },
      {
        "name": "group",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "group: str"
      },
      {
        "name": "argument",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "argument: str | None = None"
      }
    ],
    "doc": "<p>Delete an argument from an argument group or the entire argument group. Used in conjunction with the set_arguments() method.</p>\n<p>generator.del_arguments('small') generator.del_arguments('small', 'max_value')</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Del%20Arguments"
  },
  {
    "name": "Dga",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "year",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "year: int | None = None"
      },
      {
        "name": "month",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "month: int | None = None"
      },
      {
        "name": "day",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "day: int | None = None"
      },
      {
        "name": "tld",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "tld: str | None = None"
      },
      {
        "name": "length",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "length: int | None = None"
      }
    ],
    "doc": "<p>Generates a domain name by given date <a href=\"https://en.wikipedia.org/wiki/Domain_generation_algorithm\">https://en.wikipedia.org/wiki/Domain_generation_algorithm</a></p>\n<p>:type year: int :type month: int :type day: int :type tld: str :type length: int :rtype: str</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Dga"
  },
  {
    "name": "Doi",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a valid Digital Object Identifier (DOI). Format: 10.{4-9 digits}/{alphanumeric string} Eg: 10.1000/xyz123</p>\n<p>:sample:</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Doi"
  },
  {
    "name": "Domain Name",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "levels",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "1",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "levels: int = 1"
      }
    ],
    "doc": "<p>Produce an Internet domain name with the specified number of subdomain levels.</p>\n<p>&gt;&gt;&gt; domain_name() nichols-phillips.com &gt;&gt;&gt; domain_name(2) williamson-hopkins.jackson.com</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Domain%20Name"
  },
  {
    "name": "Domain Word",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Domain%20Word"
  },
  {
    "name": "Dsv",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "dialect",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "faker-csv",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "dialect: str = faker-csv"
      },
      {
        "name": "header",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Sequence",
              "typedoc": "list",
              "nested": [
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "header: Sequence[str] | None = None"
      },
      {
        "name": "data_columns",
        "type": {
          "name": "Tuple",
          "typedoc": "tuple",
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": false
        },
        "defaultValue": "('{{name}}', '{{address}}')",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "data_columns: Tuple[str, str] = ('{{name}}', '{{address}}')"
      },
      {
        "name": "num_rows",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "10",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "num_rows: int = 10"
      },
      {
        "name": "include_row_ids",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "include_row_ids: bool = False"
      },
      {
        "name": "fmtparams",
        "type": {
          "name": "Any",
          "typedoc": "Any",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "VAR_NAMED",
        "required": false,
        "repr": "**fmtparams: Any"
      }
    ],
    "doc": "<p>Generate random delimiter-separated values.</p>\n<p>This method's behavior share some similarities with <code>csv.writer</code>. The <code>dialect</code> and <code>**fmtparams</code> arguments are the same arguments expected by <code>csv.writer</code> to control its behavior, and instead of expecting a file-like object to where output will be written, the output is controlled by additional keyword arguments and is returned as a string.</p>\n<p>The <code>dialect</code> argument defaults to <code>'faker-csv'</code> which is the name of a <code>csv.excel</code> subclass with full quoting enabled.</p>\n<p>The <code>header</code> argument expects a list or a tuple of strings that will serve as the header row if supplied. The <code>data_columns</code> argument expects a list or a tuple of string tokens, and these string tokens will be passed to  :meth:<span class=\"name\">pystr_format() &lt;faker.providers.python.Provider.pystr_format&gt;</span> for data generation. Argument Groups are used to pass arguments to the provider methods. Both <code>header</code> and <code>data_columns</code> must be of the same length.</p>\n<p>Example: fake.set_arguments('top_half', {'min_value': 50, 'max_value': 100}) fake.dsv(data_columns=('{{ name }}', '{{ pyint:top_half }}'))</p>\n<p>The <code>num_rows</code> argument controls how many rows of data to generate, and the <code>include_row_ids</code> argument may be set to <code>True</code> to include a sequential row ID column.</p>\n<p>:sample: dialect='excel', data_columns=('{{name}}', '{{address}}') :sample: dialect='excel-tab', data_columns=('{{name}}', '{{address}}'), include_row_ids=True :sample: data_columns=('{{name}}', '{{address}}'), num_rows=5, delimiter='$'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Dsv"
  },
  {
    "name": "Ean",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "length",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "13",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "length: int = 13"
      },
      {
        "name": "prefixes",
        "type": {
          "name": "Tuple",
          "typedoc": "tuple",
          "nested": [
            {
              "name": "Union",
              "typedoc": null,
              "nested": [
                {
                  "name": "int",
                  "typedoc": "integer",
                  "nested": [],
                  "union": false
                },
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                },
                {
                  "name": "Tuple",
                  "typedoc": "tuple",
                  "nested": [
                    {
                      "name": "Union",
                      "typedoc": null,
                      "nested": [
                        {
                          "name": "int",
                          "typedoc": "integer",
                          "nested": [],
                          "union": false
                        },
                        {
                          "name": "str",
                          "typedoc": "string",
                          "nested": [],
                          "union": false
                        }
                      ],
                      "union": true
                    },
                    {
                      "name": "...",
                      "typedoc": null,
                      "nested": [],
                      "union": false
                    }
                  ],
                  "union": false
                }
              ],
              "union": true
            },
            {
              "name": "...",
              "typedoc": null,
              "nested": [],
              "union": false
            }
          ],
          "union": false
        },
        "defaultValue": "()",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "prefixes: Tuple[int | str | Tuple[int | str, ...], ...] = ()"
      }
    ],
    "doc": "<p>Generate an EAN barcode of the specified <code>length</code>.</p>\n<p>The value of <code>length</code> can only be <code>8</code> or <code>13</code> (default) which will create an EAN-8 or an EAN-13 barcode respectively.</p>\n<p>If a value for <code>prefixes</code> is specified, the result will begin with one of the sequences in <code>prefixes</code>.</p>\n<p>:sample: length=13 :sample: length=8 :sample: prefixes=('00',) :sample: prefixes=('45', '49')</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Ean"
  },
  {
    "name": "Ean 13",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "prefixes",
        "type": {
          "name": "Tuple",
          "typedoc": "tuple",
          "nested": [
            {
              "name": "Union",
              "typedoc": null,
              "nested": [
                {
                  "name": "int",
                  "typedoc": "integer",
                  "nested": [],
                  "union": false
                },
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                },
                {
                  "name": "Tuple",
                  "typedoc": "tuple",
                  "nested": [
                    {
                      "name": "Union",
                      "typedoc": null,
                      "nested": [
                        {
                          "name": "int",
                          "typedoc": "integer",
                          "nested": [],
                          "union": false
                        },
                        {
                          "name": "str",
                          "typedoc": "string",
                          "nested": [],
                          "union": false
                        }
                      ],
                      "union": true
                    },
                    {
                      "name": "...",
                      "typedoc": null,
                      "nested": [],
                      "union": false
                    }
                  ],
                  "union": false
                }
              ],
              "union": true
            },
            {
              "name": "...",
              "typedoc": null,
              "nested": [],
              "union": false
            }
          ],
          "union": false
        },
        "defaultValue": "()",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "prefixes: Tuple[int | str | Tuple[int | str, ...], ...] = ()"
      },
      {
        "name": "leading_zero",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "leading_zero: bool | None = None"
      }
    ],
    "doc": "<p>Generate an EAN-13 barcode.</p>\n<p>If <code>leading_zero</code> is <code>True</code>, the leftmost digit of the barcode will be set to <code>0</code>. If <code>False</code>, the leftmost digit cannot be <code>0</code>. If <code>None</code> (default), the leftmost digit can be any digit.</p>\n<p>If a value for <code>prefixes</code> is specified, the result will begin with one of the sequences in <code>prefixes</code> and will ignore <code>leading_zero</code>.</p>\n<p>This method uses the standard barcode provider's |ean13| under the hood with the <code>prefixes</code> argument set to the correct value to attain the behavior described above.</p>\n<p>.. note:: EAN-13 barcode that starts with a zero can be converted to UPC-A by dropping the leading zero. This may cause problems with readers that treat all of these code as UPC-A codes and drop the first digit when reading it.</p>\n<p>You can set the argument <code>prefixes</code> ( or <code>leading_zero</code> for convenience) explicitly to avoid or to force the generated barcode to start with a zero. You can also generate actual UPC-A barcode with |EnUsBarcodeProvider.upc_a|.</p>\n<p>:sample: :sample: leading_zero=False :sample: leading_zero=True :sample: prefixes=('00',) :sample: prefixes=('45', '49')</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Ean%2013"
  },
  {
    "name": "Ean 8",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "prefixes",
        "type": {
          "name": "Tuple",
          "typedoc": "tuple",
          "nested": [
            {
              "name": "Union",
              "typedoc": null,
              "nested": [
                {
                  "name": "int",
                  "typedoc": "integer",
                  "nested": [],
                  "union": false
                },
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                },
                {
                  "name": "Tuple",
                  "typedoc": "tuple",
                  "nested": [
                    {
                      "name": "Union",
                      "typedoc": null,
                      "nested": [
                        {
                          "name": "int",
                          "typedoc": "integer",
                          "nested": [],
                          "union": false
                        },
                        {
                          "name": "str",
                          "typedoc": "string",
                          "nested": [],
                          "union": false
                        }
                      ],
                      "union": true
                    },
                    {
                      "name": "...",
                      "typedoc": null,
                      "nested": [],
                      "union": false
                    }
                  ],
                  "union": false
                }
              ],
              "union": true
            },
            {
              "name": "...",
              "typedoc": null,
              "nested": [],
              "union": false
            }
          ],
          "union": false
        },
        "defaultValue": "()",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "prefixes: Tuple[int | str | Tuple[int | str, ...], ...] = ()"
      }
    ],
    "doc": "<p>Generate an EAN-8 barcode.</p>\n<p>This method uses |ean| under the hood with the <code>length</code> argument explicitly set to <code>8</code>.</p>\n<p>If a value for <code>prefixes</code> is specified, the result will begin with one of the sequences in <code>prefixes</code>.</p>\n<p>:sample: :sample: prefixes=('00',) :sample: prefixes=('45', '49')</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Ean%208"
  },
  {
    "name": "Ein",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a random United States Employer Identification Number (EIN).</p>\n<p>An United States An Employer Identification Number (EIN) is also known as a Federal Tax Identification Number, and is used to identify a business entity. EINs follow a format of a two-digit prefix followed by a hyphen and a seven-digit sequence: ##-######</p>\n<p><a href=\"https://www.irs.gov/businesses/small-businesses-self-employed/employer-id-numbers\">https://www.irs.gov/businesses/small-businesses-self-employed/employer-id-numbers</a></p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Ein"
  },
  {
    "name": "Email",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "safe",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "safe: bool = True"
      },
      {
        "name": "domain",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "domain: str | None = None"
      }
    ],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Email"
  },
  {
    "name": "Emoji",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>:example: '😉'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Emoji"
  },
  {
    "name": "Enum",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "enum_cls",
        "type": {
          "name": "Type",
          "typedoc": null,
          "nested": [
            {
              "name": "~TEnum",
              "typedoc": null,
              "nested": [],
              "union": false
            }
          ],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "enum_cls: Type[~TEnum]"
      }
    ],
    "doc": "<p>Returns a random enum of the provided input <a href=\"#Enum\" class=\"name\">Enum</a> type.</p>\n<p>:param enum_cls: The <a href=\"#Enum\" class=\"name\">Enum</a> type to produce the value for. :returns: A randomly selected enum value.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Enum"
  },
  {
    "name": "File Extension",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "category",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "category: str | None = None"
      }
    ],
    "doc": "<p>Generate a file extension under the specified <code>category</code>.</p>\n<p>If <code>category</code> is <code>None</code>, a random category will be used. The list of valid categories include: <code>'audio'</code>, <code>'image'</code>, <code>'office'</code>, <code>'text'</code>, and <code>'video'</code>.</p>\n<p>:sample: :sample: category='image'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#File%20Extension"
  },
  {
    "name": "File Name",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "category",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "category: str | None = None"
      },
      {
        "name": "extension",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "extension: str | None = None"
      }
    ],
    "doc": "<p>Generate a random file name with extension.</p>\n<p>If <code>extension</code> is <code>None</code>, a random extension will be created under the hood using |file_extension| with the specified <code>category</code>. If a value for <code>extension</code> is provided, the value will be used instead, and <code>category</code> will be ignored. The actual name part itself is generated using |word|. If extension is an empty string then no extension will be added, and file_name will be the same as |word|.</p>\n<p>:sample: size=10 :sample: category='audio' :sample: extension='abcdef' :sample: category='audio', extension='abcdef' :sample: extension=''</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#File%20Name"
  },
  {
    "name": "File Path",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "depth",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "1",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "depth: int = 1"
      },
      {
        "name": "category",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "category: str | None = None"
      },
      {
        "name": "extension",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "Sequence",
              "typedoc": "list",
              "nested": [
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "extension: str | Sequence[str] | None = None"
      },
      {
        "name": "absolute",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "absolute: bool | None = True"
      },
      {
        "name": "file_system_rule",
        "type": {
          "name": "Literal",
          "typedoc": "Literal",
          "nested": [
            {
              "name": "'linux'",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "'windows'",
              "typedoc": null,
              "nested": [],
              "union": false
            }
          ],
          "union": false
        },
        "defaultValue": "linux",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "file_system_rule: Literal['linux', 'windows'] = linux"
      }
    ],
    "doc": "<p>Generate an pathname to a file.</p>\n<p>This method uses |file_name| under the hood to generate the file name itself, and <code>depth</code> controls the depth of the directory path, and |word| is used under the hood to generate the different directory names.</p>\n<p>If <code>absolute</code> is <code>True</code> (default), the generated path starts with <code>/</code> and is absolute. Otherwise, the generated path is relative.</p>\n<p>If used, <code>extension</code> can be either a string, forcing that extension, a sequence of strings (one will be picked at random), or an empty sequence (the path will have no extension). Default behaviour is the same as |file_name|</p>\n<p>if <code>file_system</code> is set (default=\"linux\"), the generated path uses specified file system path standard, the list of valid file systems include: <code>'windows'</code>, <code>'linux'</code>.</p>\n<p>:sample: size=10 :sample: depth=3 :sample: depth=5, category='video' :sample: depth=5, category='video', extension='abcdef' :sample: extension=[] :sample: extension='' :sample: extension=[\"a\", \"bc\", \"def\"] :sample: depth=5, category='video', extension='abcdef', file_system='windows'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#File%20Path"
  },
  {
    "name": "Firefox",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a Mozilla Firefox web browser user agent string.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Firefox"
  },
  {
    "name": "First Name",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#First%20Name"
  },
  {
    "name": "First Name Female",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#First%20Name%20Female"
  },
  {
    "name": "First Name Male",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#First%20Name%20Male"
  },
  {
    "name": "First Name Nonbinary",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#First%20Name%20Nonbinary"
  },
  {
    "name": "Fixed Width",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "data_columns",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "List",
              "typedoc": "list",
              "nested": [
                {
                  "name": "Union",
                  "typedoc": null,
                  "nested": [
                    {
                      "name": "Tuple",
                      "typedoc": "tuple",
                      "nested": [
                        {
                          "name": "int",
                          "typedoc": "integer",
                          "nested": [],
                          "union": false
                        },
                        {
                          "name": "str",
                          "typedoc": "string",
                          "nested": [],
                          "union": false
                        }
                      ],
                      "union": false
                    },
                    {
                      "name": "Tuple",
                      "typedoc": "tuple",
                      "nested": [
                        {
                          "name": "int",
                          "typedoc": "integer",
                          "nested": [],
                          "union": false
                        },
                        {
                          "name": "str",
                          "typedoc": "string",
                          "nested": [],
                          "union": false
                        },
                        {
                          "name": "Dict",
                          "typedoc": "dictionary",
                          "nested": [
                            {
                              "name": "str",
                              "typedoc": "string",
                              "nested": [],
                              "union": false
                            },
                            {
                              "name": "Any",
                              "typedoc": "Any",
                              "nested": [],
                              "union": false
                            }
                          ],
                          "union": false
                        }
                      ],
                      "union": false
                    }
                  ],
                  "union": true
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "data_columns: List[Tuple[int, str] | Tuple[int, str, Dict[str, Any]]] | None = None"
      },
      {
        "name": "num_rows",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "10",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "num_rows: int = 10"
      },
      {
        "name": "align",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "left",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "align: str = left"
      }
    ],
    "doc": "<p>Generate random fixed width values.</p>\n<p>Using a list of tuple records that is passed as <code>data_columns</code>, that defines the structure that will be generated. Arguments within the record are provider specific, and should be a dictionary that will be passed to the provider method.</p>\n<p>Data Column List format [('field width', 'definition', {'arguments'})]</p>\n<p>The definition can be 'provider', 'provider:argument_group', tokenized 'string {{ provider:argument_group }}' that is passed to the python provider method pystr_format() for generation, or a fixed '@word'. Using Lists, Tuples, and Dicts as a definition for structure.</p>\n<p>Argument Groups can be used to pass arguments to the provider methods, but will override the arguments supplied in the tuple record.</p>\n<p>Example: fake.set_arguments('top_half', {'min_value': 50, 'max_value': 100}) fake.fixed_width(data_columns=[(20, 'name'), (3, 'pyint:top_half')])</p>\n<p>:param data_columns: specification for the data structure :type data_columns: list :param num_rows: number of rows the generator will yield :type num_rows: int :param align: positioning of the value. (left, middle, right) :type align: str :return: Serialized Fixed Width data :rtype: str</p>\n<p>:sample: data_columns=[(20, 'name'), (3, 'pyint', {'min_value': 50, 'max_value': 100})], align='right', num_rows=2</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Fixed%20Width"
  },
  {
    "name": "Format",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "self",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "self"
      },
      {
        "name": "formatter",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "formatter: str"
      },
      {
        "name": "args",
        "type": {
          "name": "Any",
          "typedoc": "Any",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args: Any"
      },
      {
        "name": "kwargs",
        "type": {
          "name": "Any",
          "typedoc": "Any",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "VAR_NAMED",
        "required": false,
        "repr": "**kwargs: Any"
      }
    ],
    "doc": "<p>This is a secure way to make a fake from another Provider.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Format"
  },
  {
    "name": "Free Email",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Free%20Email"
  },
  {
    "name": "Free Email Domain",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Free%20Email%20Domain"
  },
  {
    "name": "Future Date",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "end_date",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "date",
              "typedoc": "date",
              "nested": [],
              "union": false
            },
            {
              "name": "datetime",
              "typedoc": "datetime",
              "nested": [],
              "union": false
            },
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "+30d",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "end_date: date | datetime | timedelta | str | int = +30d"
      }
    ],
    "doc": "<p>Get a Date object based on a random date between 1 day from now and a given date.</p>\n<p>:param end_date: A <code>DateParseType</code>. Defaults to <code>\"+30d\"</code> :param tzinfo: timezone, instance of datetime.tzinfo subclass</p>\n<p>:sample: :sample: end_date='+1y'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Future%20Date"
  },
  {
    "name": "Future Datetime",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "end_date",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "date",
              "typedoc": "date",
              "nested": [],
              "union": false
            },
            {
              "name": "datetime",
              "typedoc": "datetime",
              "nested": [],
              "union": false
            },
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "+30d",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "end_date: date | datetime | timedelta | str | int = +30d"
      },
      {
        "name": "tzinfo",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "tzinfo",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "tzinfo: tzinfo | None = None"
      }
    ],
    "doc": "<p>Get a datetime object based on a random date between 1 second form now and a given date.</p>\n<p>:param end_date: A <code>DateParseType</code>. Defaults to <code>\"+30d\"</code> :param tzinfo: timezone, instance of datetime.tzinfo subclass</p>\n<p>:sample: :sample: end_date='+1y'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Future%20Datetime"
  },
  {
    "name": "Generator Format Token",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "self",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "self"
      },
      {
        "name": "matches",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "matches"
      }
    ],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Generator%20Format%20Token"
  },
  {
    "name": "Get Arguments",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "self",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "self"
      },
      {
        "name": "group",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "group: str"
      },
      {
        "name": "argument",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "argument: str | None = None"
      }
    ],
    "doc": "<p>Get the value of an argument configured within a argument group, or the entire group as a dictionary. Used in conjunction with the set_arguments() method.</p>\n<p>generator.get_arguments('small', 'max_value') generator.get_arguments('small')</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Get%20Arguments"
  },
  {
    "name": "Get Formatter",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "self",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "self"
      },
      {
        "name": "formatter",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "formatter: str"
      }
    ],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Get%20Formatter"
  },
  {
    "name": "Get Providers",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "self",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "self"
      }
    ],
    "doc": "<p>Returns added providers.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Get%20Providers"
  },
  {
    "name": "Get Words List",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "part_of_speech",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "part_of_speech: str | None = None"
      },
      {
        "name": "ext_word_list",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Sequence",
              "typedoc": "list",
              "nested": [
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ext_word_list: Sequence[str] | None = None"
      }
    ],
    "doc": "<p>Get list of words.</p>\n<p><code>ext_word_list</code> is a parameter that allows the user to provide a list of words to be used instead of the built-in word list. If <code>ext_word_list</code> is provided, then the value of <code>part_of_speech</code> is ignored.</p>\n<p><code>part_of_speech</code> is a parameter that defines to what part of speech the returned word belongs. If <code>ext_word_list</code> is not <code>None</code>, then <code>part_of_speech</code> is ignored. If the value of <code>part_of_speech</code> does not correspond to an existent part of speech according to the set locale, then an exception is raised.</p>\n<p>:sample: part_of_speech=\"abc\", ext_word_list=['abc', 'def', 'ghi', 'jkl'] :sample: part_of_speech=\"abc\" :sample: ext_word_list=['abc', 'def', 'ghi', 'jkl']</p>\n<p>.. warning:: Depending on the length of a locale provider's built-in word list or on the length of <code>ext_word_list</code> if provided, a large <code>nb</code> can exhaust said lists if <code>unique</code> is <code>True</code>, raising an exception.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Get%20Words%20List"
  },
  {
    "name": "Hex Color",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a color formatted as a hex triplet.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Hex%20Color"
  },
  {
    "name": "Hexify",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "text",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "^^^^",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "text: str = ^^^^"
      },
      {
        "name": "upper",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "upper: bool = False"
      }
    ],
    "doc": "<p>Generate a string with each circumflex ('^') in <code>text</code> replaced with a random hexadecimal character.</p>\n<p>By default, <code>upper</code> is set to False. If set to <code>True</code>, output will be formatted using uppercase hexadecimal characters.</p>\n<p>:sample: text='MAC Address: ^^:^^:^^:^^:^^:^^' :sample: text='MAC Address: ^^:^^:^^:^^:^^:^^', upper=True</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Hexify"
  },
  {
    "name": "Hostname",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "levels",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "1",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "levels: int = 1"
      }
    ],
    "doc": "<p>Produce a hostname with specified number of subdomain levels.</p>\n<p>&gt;&gt;&gt; hostname() db-01.nichols-phillips.com &gt;&gt;&gt; hostname(0) laptop-56 &gt;&gt;&gt; hostname(2) web-12.williamson-hopkins.jackson.com</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Hostname"
  },
  {
    "name": "Http Method",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Returns random HTTP method <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods\">https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods</a></p>\n<p>:rtype: str</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Http%20Method"
  },
  {
    "name": "Http Status Code",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "include_unassigned",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "include_unassigned: bool = True"
      }
    ],
    "doc": "<p>Returns random HTTP status code <a href=\"https://www.rfc-editor.org/rfc/rfc9110#name-status-codes\">https://www.rfc-editor.org/rfc/rfc9110#name-status-codes</a> :param include_unassigned: Whether to include status codes which have not yet been assigned or are unused</p>\n<p>:return: a random three digit status code :rtype: int</p>\n<p>:example: 404</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Http%20Status%20Code"
  },
  {
    "name": "Iana Id",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Returns IANA Registrar ID <a href=\"https://www.iana.org/assignments/registrar-ids/registrar-ids.xhtml\">https://www.iana.org/assignments/registrar-ids/registrar-ids.xhtml</a></p>\n<p>:rtype: str</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Iana%20Id"
  },
  {
    "name": "Iban",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate an International Bank Account Number (IBAN).</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Iban"
  },
  {
    "name": "Image",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "size",
        "type": {
          "name": "Tuple",
          "typedoc": "tuple",
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            }
          ],
          "union": false
        },
        "defaultValue": "(256, 256)",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "size: Tuple[int, int] = (256, 256)"
      },
      {
        "name": "image_format",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "png",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "image_format: str = png"
      },
      {
        "name": "hue",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "Sequence",
              "typedoc": "list",
              "nested": [
                {
                  "name": "int",
                  "typedoc": "integer",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "hue: int | Sequence[int] | str | None = None"
      },
      {
        "name": "luminosity",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "luminosity: str | None = None"
      }
    ],
    "doc": "<p>Generate an image and draw a random polygon on it using the Python Image Library. Without it installed, this provider won't be functional. Returns the bytes representing the image in a given format.</p>\n<p>The argument <code>size</code> must be a 2-tuple containing (width, height) in pixels. Defaults to 256x256.</p>\n<p>The argument <code>image_format</code> can be any valid format to the underlying library like <code>'tiff'</code>, <code>'jpeg'</code>, <code>'pdf'</code> or <code>'png'</code> (default). Note that some formats need present system libraries prior to building the Python Image Library. Refer to <a href=\"https://pillow.readthedocs.io/en/stable/handbook/image-file-formats.html\">https://pillow.readthedocs.io/en/stable/handbook/image-file-formats.html</a> for details.</p>\n<p>The arguments <code>hue</code> and <code>luminosity</code> are the same as in the color provider and are simply forwarded to it to generate both the background and the shape colors. Therefore, you can ask for a \"dark blue\" image, etc.</p>\n<p>:sample: size=(2, 2), hue='purple', luminosity='bright', image_format='pdf' :sample: size=(16, 16), hue=[90,270], image_format='ico'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Image"
  },
  {
    "name": "Image Url",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "width",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "width: int | None = None"
      },
      {
        "name": "height",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "height: int | None = None"
      },
      {
        "name": "placeholder_url",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "placeholder_url: str | None = None"
      }
    ],
    "doc": "<p>Returns URL to placeholder image Example: <a href=\"http://placehold.it/640x480\">http://placehold.it/640x480</a></p>\n<p>:param width: Optional image width :param height: Optional image height :param placeholder_url: Optional template string of image URLs from custom placeholder service. String must contain <code>{width}</code> and <code>{height}</code> placeholders, eg: <code>https:/example.com/{width}/{height}</code>. :rtype: str</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Image%20Url"
  },
  {
    "name": "Init",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "providers",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "providers=None"
      },
      {
        "name": "seed",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "seed=None"
      }
    ],
    "doc": "<p>Initialize self.  See help(type(self)) for accurate signature.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Init"
  },
  {
    "name": "Internet Explorer",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate an IE web browser user agent string.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Internet%20Explorer"
  },
  {
    "name": "Invalid Ssn",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a random invalid United States Social Security Identification Number (SSN).</p>\n<p>Invalid SSNs have the following characteristics: Cannot begin with the number 9 Cannot begin with 666 in positions 1 - 3 Cannot begin with 000 in positions 1 - 3 Cannot contain 00 in positions 4 - 5 Cannot contain 0000 in positions 6 - 9</p>\n<p><a href=\"https://www.ssa.gov/kc/SSAFactSheet--IssuingSSNs.pdf\">https://www.ssa.gov/kc/SSAFactSheet--IssuingSSNs.pdf</a></p>\n<p>Additionally, return an invalid SSN that is NOT a valid ITIN by excluding certain ITIN related \"group\" values</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Invalid%20Ssn"
  },
  {
    "name": "Ios Platform Token",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate an iOS platform token used in user agent strings.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Ios%20Platform%20Token"
  },
  {
    "name": "Ipv 4",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "network",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "network: bool = False"
      },
      {
        "name": "address_class",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "address_class: str | None = None"
      },
      {
        "name": "private",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "private: str | None = None"
      }
    ],
    "doc": "<p>Returns a random IPv4 address or network with a valid CIDR.</p>\n<p>:param network: Network address :param address_class: IPv4 address class (a, b, or c) :param private: Public or private :returns: IPv4</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Ipv%204"
  },
  {
    "name": "Ipv 6",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "network",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "network: bool = False"
      }
    ],
    "doc": "<p>Produce a random IPv6 address or network with a valid CIDR</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Ipv%206"
  },
  {
    "name": "Ipv4 Network Class",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Returns a IPv4 network class 'a', 'b' or 'c'.</p>\n<p>:returns: IPv4 network class</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Ipv4%20Network%20Class"
  },
  {
    "name": "Ipv4 Private",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "network",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "network: bool = False"
      },
      {
        "name": "address_class",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "address_class: str | None = None"
      }
    ],
    "doc": "<p>Returns a private IPv4.</p>\n<p>:param network: Network address :param address_class: IPv4 address class (a, b, or c) :returns: Private IPv4</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Ipv4%20Private"
  },
  {
    "name": "Ipv4 Public",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "network",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "network: bool = False"
      },
      {
        "name": "address_class",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "address_class: str | None = None"
      }
    ],
    "doc": "<p>Returns a public IPv4 excluding private blocks.</p>\n<p>:param network: Network address :param address_class: IPv4 address class (a, b, or c) :returns: Public IPv4</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Ipv4%20Public"
  },
  {
    "name": "Isbn 10",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "separator",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "-",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "separator: str = -"
      }
    ],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Isbn%2010"
  },
  {
    "name": "Isbn 13",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "separator",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "-",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "separator: str = -"
      }
    ],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Isbn%2013"
  },
  {
    "name": "Iso 8601",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "tzinfo",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "tzinfo",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "tzinfo: tzinfo | None = None"
      },
      {
        "name": "end_datetime",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "date",
              "typedoc": "date",
              "nested": [],
              "union": false
            },
            {
              "name": "datetime",
              "typedoc": "datetime",
              "nested": [],
              "union": false
            },
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "end_datetime: date | datetime | timedelta | str | int | None = None"
      },
      {
        "name": "sep",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "T",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "sep: str = T"
      },
      {
        "name": "timespec",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "auto",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timespec: str = auto"
      }
    ],
    "doc": "<p>Get an ISO 8601 string for a datetime between the UNIX epoch and now.</p>\n<p>:param tzinfo: timezone, instance of datetime.tzinfo subclass :param end_datetime: A <code>DateParseType</code>. Defaults to the current date and time :param sep: separator between date and time, defaults to 'T' :param timespec: format specifier for the time part, defaults to 'auto' - see datetime.isoformat() documentation</p>\n<p>:sample:</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Iso%208601"
  },
  {
    "name": "Itin",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a random United States Individual Taxpayer Identification Number (ITIN).</p>\n<p>An United States Individual Taxpayer Identification Number (ITIN) is a tax processing number issued by the Internal Revenue Service. It is a nine-digit number that always begins with the number 9 and has a range of 70-88 in the fourth and fifth digit. Effective April 12, 2011, the range was extended to include 900-70-0000 through 999-88-9999, 900-90-0000 through 999-92-9999 and 900-94-0000 through 999-99-9999. <a href=\"https://www.irs.gov/individuals/international-taxpayers/general-itin-information\">https://www.irs.gov/individuals/international-taxpayers/general-itin-information</a></p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Itin"
  },
  {
    "name": "Job",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Job"
  },
  {
    "name": "Job Female",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Job%20Female"
  },
  {
    "name": "Job Male",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Job%20Male"
  },
  {
    "name": "Json",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "data_columns",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "List",
              "typedoc": "list",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "data_columns: List | None = None"
      },
      {
        "name": "num_rows",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "10",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "num_rows: int = 10"
      },
      {
        "name": "indent",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "indent: int | None = None"
      },
      {
        "name": "cls",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Type",
              "typedoc": null,
              "nested": [
                {
                  "name": "JSONEncoder",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "cls: Type[JSONEncoder] | None = None"
      }
    ],
    "doc": "<p>Generate random JSON structure values.</p>\n<p>Using a dictionary or list of records that is passed as <code>data_columns</code>, define the structure that is used to build JSON structures.  For complex data structures it is recommended to use the dictionary format.</p>\n<p>Data Column Dictionary format: {'key name': 'definition'}</p>\n<p>The definition can be 'provider', 'provider:argument_group', tokenized 'string {{ provider:argument_group }}' that is passed to the python provider method pystr_format() for generation, or a fixed '@word'. Using Lists, Tuples, and Dicts as a definition for structure.</p>\n<p>Example: fake.set_arguments('top_half', {'min_value': 50, 'max_value': 100}) fake.json(data_columns={'Name': 'name', 'Score': 'pyint:top_half'})</p>\n<p>Data Column List format: [('key name', 'definition', {'arguments'})]</p>\n<p>With the list format the definition can be a list of records, to create a list within the structure data.  For literal entries within the list, set the 'field_name' to None.</p>\n<p>:param data_columns: specification for the data structure :type data_columns: dict :param num_rows: number of rows the returned :type num_rows: int :param indent: number of spaces to indent the fields :type indent: int :param cls: optional json encoder to use for non-standard objects such as datetimes :type cls: json.JSONEncoder :return: Serialized JSON data :rtype: str</p>\n<p>:sample: data_columns={'Spec': '@1.0.1', 'ID': 'pyint', 'Details': {'Name': 'name', 'Address': 'address'}}, num_rows=2 :sample: data_columns={'Candidates': ['name', 'name', 'name']}, num_rows=1 :sample: data_columns=[('Name', 'name'), ('Points', 'pyint', {'min_value': 50, 'max_value': 100})], num_rows=1</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Json"
  },
  {
    "name": "Json Bytes",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "data_columns",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "List",
              "typedoc": "list",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "data_columns: List | None = None"
      },
      {
        "name": "num_rows",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "10",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "num_rows: int = 10"
      },
      {
        "name": "indent",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "indent: int | None = None"
      },
      {
        "name": "cls",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Type",
              "typedoc": null,
              "nested": [
                {
                  "name": "JSONEncoder",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "cls: Type[JSONEncoder] | None = None"
      }
    ],
    "doc": "<p>Generate random JSON structure and return as bytes.</p>\n<p>For more information on the different arguments of this method, refer to :meth:<span class=\"name\">json() &lt;faker.providers.misc.Provider.json&gt;</span> which is used under the hood.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Json%20Bytes"
  },
  {
    "name": "Language Code",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a random i18n language code (e.g. en).</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Language%20Code"
  },
  {
    "name": "Language Name",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a random i18n language name (e.g. English).</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Language%20Name"
  },
  {
    "name": "Last Name",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Last%20Name"
  },
  {
    "name": "Last Name Female",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Last%20Name%20Female"
  },
  {
    "name": "Last Name Male",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Last%20Name%20Male"
  },
  {
    "name": "Last Name Nonbinary",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Last%20Name%20Nonbinary"
  },
  {
    "name": "Latitude",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Latitude"
  },
  {
    "name": "Latlng",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Latlng"
  },
  {
    "name": "Lexify",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "text",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "????",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "text: str = ????"
      },
      {
        "name": "letters",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "letters: str = abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
      }
    ],
    "doc": "<p>Generate a string with each question mark ('?') in <code>text</code> replaced with a random character from <code>letters</code>.</p>\n<p>By default, <code>letters</code> contains all ASCII letters, uppercase and lowercase.</p>\n<p>:sample: text='Random Identifier: ??????????' :sample: text='Random Identifier: ??????????', letters='ABCDE'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Lexify"
  },
  {
    "name": "License Plate",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a license plate.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#License%20Plate"
  },
  {
    "name": "Linux Platform Token",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a Linux platform token used in user agent strings.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Linux%20Platform%20Token"
  },
  {
    "name": "Linux Processor",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a Linux processor token used in user agent strings.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Linux%20Processor"
  },
  {
    "name": "Local Latlng",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "country_code",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "US",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "country_code: str = US"
      },
      {
        "name": "coords_only",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "coords_only: bool = False"
      }
    ],
    "doc": "<p>Returns a location known to exist on land in a country specified by <span class=\"name\">country_code</span>. Defaults to 'en_US'. See the <span class=\"name\">land_coords</span> list for available locations/countries.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Local%20Latlng"
  },
  {
    "name": "Locale",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a random underscored i18n locale code (e.g. en_US).</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Locale"
  },
  {
    "name": "Localized Ean",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "length",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "13",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "length: int = 13"
      }
    ],
    "doc": "<p>Generate a localized EAN barcode of the specified <code>length</code>.</p>\n<p>The value of <code>length</code> can only be <code>8</code> or <code>13</code> (default) which will create an EAN-8 or an EAN-13 barcode respectively.</p>\n<p>This method uses the standard barcode provider's |ean| under the hood with the <code>prefixes</code> argument explicitly set to <code>local_prefixes</code> of a localized barcode provider implementation.</p>\n<p>:sample: :sample: length=13 :sample: length=8</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Localized%20Ean"
  },
  {
    "name": "Localized Ean13",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a localized EAN-13 barcode.</p>\n<p>This method uses |localized_ean| under the hood with the <code>length</code> argument explicitly set to <code>13</code>.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Localized%20Ean13"
  },
  {
    "name": "Localized Ean8",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a localized EAN-8 barcode.</p>\n<p>This method uses |localized_ean| under the hood with the <code>length</code> argument explicitly set to <code>8</code>.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Localized%20Ean8"
  },
  {
    "name": "Location On Land",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "coords_only",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "coords_only: bool = False"
      }
    ],
    "doc": "<p>Returns a random tuple specifying a coordinate set guaranteed to exist on land. Format is <span class=\"name\">(latitude, longitude, place name, two-letter country code, timezone)</span> Pass <span class=\"name\">coords_only</span> to return coordinates without metadata.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Location%20On%20Land"
  },
  {
    "name": "Longitude",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Longitude"
  },
  {
    "name": "Mac Address",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "multicast",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "multicast: bool = False"
      }
    ],
    "doc": "<p>Returns a random MAC address.</p>\n<p>:param multicast: Multicast address :returns: MAC Address</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Mac%20Address"
  },
  {
    "name": "Mac Platform Token",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a MacOS platform token used in user agent strings.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Mac%20Platform%20Token"
  },
  {
    "name": "Mac Processor",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a MacOS processor token used in user agent strings.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Mac%20Processor"
  },
  {
    "name": "Md 5",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "raw_output",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "raw_output: bool = False"
      }
    ],
    "doc": "<p>Generate a random MD5 hash.</p>\n<p>If <code>raw_output</code> is <code>False</code> (default), a hexadecimal string representation of the MD5 hash will be returned. If <code>True</code>, a <code>bytes</code> object representation will be returned instead.</p>\n<p>:sample: raw_output=False :sample: raw_output=True</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Md%205"
  },
  {
    "name": "Military Apo",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>:example: 'PSC 5394 Box 3492</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Military%20Apo"
  },
  {
    "name": "Military Dpo",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>:example: 'Unit 3333 Box 9342'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Military%20Dpo"
  },
  {
    "name": "Military Ship",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>:example: 'USS'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Military%20Ship"
  },
  {
    "name": "Military State",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>:example: 'APO'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Military%20State"
  },
  {
    "name": "Mime Type",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "category",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "category: str | None = None"
      }
    ],
    "doc": "<p>Generate a mime type under the specified <code>category</code>.</p>\n<p>If <code>category</code> is <code>None</code>, a random category will be used. The list of valid categories include <code>'application'</code>, <code>'audio'</code>, <code>'image'</code>, <code>'message'</code>, <code>'model'</code>, <code>'multipart'</code>, <code>'text'</code>, and <code>'video'</code>.</p>\n<p>:sample: :sample: category='application'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Mime%20Type"
  },
  {
    "name": "Month",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>:sample:</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Month"
  },
  {
    "name": "Month Name",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>:sample:</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Month%20Name"
  },
  {
    "name": "Msisdn",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p><a href=\"https://en.wikipedia.org/wiki/MSISDN\">https://en.wikipedia.org/wiki/MSISDN</a></p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Msisdn"
  },
  {
    "name": "Name",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>:example: 'John Doe'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Name"
  },
  {
    "name": "Name Female",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Name%20Female"
  },
  {
    "name": "Name Male",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Name%20Male"
  },
  {
    "name": "Name Nonbinary",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Name%20Nonbinary"
  },
  {
    "name": "Nic Handle",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "suffix",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "FAKE",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "suffix: str = FAKE"
      }
    ],
    "doc": "<p>Returns NIC Handle ID <a href=\"https://www.apnic.net/manage-ip/using-whois/guide/person/\">https://www.apnic.net/manage-ip/using-whois/guide/person/</a></p>\n<p>:rtype: str</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Nic%20Handle"
  },
  {
    "name": "Nic Handles",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "count",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "1",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "count: int = 1"
      },
      {
        "name": "suffix",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "????",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "suffix: str = ????"
      }
    ],
    "doc": "<p>Returns NIC Handle ID list</p>\n<p>:rtype: list[str]</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Nic%20Handles"
  },
  {
    "name": "Null Boolean",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate <code>None</code>, <code>True</code>, or <code>False</code>, each with equal probability.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Null%20Boolean"
  },
  {
    "name": "Numerify",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "text",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "###",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "text: str = ###"
      }
    ],
    "doc": "<p>Generate a string with each placeholder in <code>text</code> replaced according to the following rules:</p>\n<ul>\n<li>Number signs ('#') are replaced with a random digit (0 to 9).</li>\n<li>Percent signs ('%') are replaced with a random non-zero digit (1 to 9).</li>\n<li>Dollar signs ('$') are replaced with a random digit above two (2 to 9).</li>\n<li>Exclamation marks ('!') are replaced with a random digit or an empty string.</li>\n<li>At symbols ('@') are replaced with a random non-zero digit or an empty string.</li>\n</ul>\n<p>Under the hood, this method uses :meth:<span class=\"name\">random_digit() &lt;faker.providers.BaseProvider.random_digit&gt;</span>, :meth:<span class=\"name\">random_digit_not_null() &lt;faker.providers.BaseProvider.random_digit_not_null&gt;</span>, :meth:<span class=\"name\">random_digit_or_empty() &lt;faker.providers.BaseProvider.random_digit_or_empty&gt;</span>, and :meth:<span class=\"name\">random_digit_not_null_or_empty() &lt;faker.providers.BaseProvider.random_digit_not_null_or_empty&gt;</span> to generate the random values.</p>\n<p>:sample: text='Intel Core i%-%%##K vs AMD Ryzen % %%##X' :sample: text='!!! !!@ !@! !@@ @!! @!@ @@! @@@'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Numerify"
  },
  {
    "name": "Opera",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate an Opera web browser user agent string.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Opera"
  },
  {
    "name": "Paragraph",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "nb_sentences",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "3",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "nb_sentences: int = 3"
      },
      {
        "name": "variable_nb_sentences",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "variable_nb_sentences: bool = True"
      },
      {
        "name": "ext_word_list",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Sequence",
              "typedoc": "list",
              "nested": [
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ext_word_list: Sequence[str] | None = None"
      }
    ],
    "doc": "<p>Generate a paragraph.</p>\n<p>The <code>nb_sentences</code> argument controls how many sentences the paragraph will contain, and setting <code>variable_nb_sentences</code> to <code>False</code> will generate the exact amount, while setting it to <code>True</code> (default) will generate a random amount (+/-40%, minimum of 1) using |randomize_nb_elements|.</p>\n<p>Under the hood, |sentences| is used to generate the sentences, so the argument <code>ext_word_list</code> works in the same way here as it would in that method.</p>\n<p>:sample: nb_sentences=5 :sample: nb_sentences=5, variable_nb_sentences=False :sample: nb_sentences=5, ext_word_list=['abc', 'def', 'ghi', 'jkl'] :sample: nb_sentences=5, variable_nb_sentences=False, ext_word_list=['abc', 'def', 'ghi', 'jkl']</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Paragraph"
  },
  {
    "name": "Paragraphs",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "nb",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "3",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "nb: int = 3"
      },
      {
        "name": "ext_word_list",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Sequence",
              "typedoc": "list",
              "nested": [
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ext_word_list: Sequence[str] | None = None"
      }
    ],
    "doc": "<p>Generate a list of paragraphs.</p>\n<p>This method uses |paragraph| under the hood to generate paragraphs, and the <code>nb</code> argument controls exactly how many sentences the list will contain. The <code>ext_word_list</code> argument works in exactly the same way as well.</p>\n<p>:sample: nb=5 :sample: nb=5, ext_word_list=['abc', 'def', 'ghi', 'jkl']</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Paragraphs"
  },
  {
    "name": "Parse",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "self",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "self"
      },
      {
        "name": "text",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "text: str"
      }
    ],
    "doc": "<p>Replaces tokens like '{{ tokenName }}' or '{{tokenName}}' in a string with the result from the token method call. Arguments can be parsed by using an argument group. For more information on the use of argument groups, please refer to the set_arguments() method.</p>\n<p>Example:</p>\n<p>generator.set_arguments('red_rgb', {'hue': 'red', 'color_format': 'rgb'}) generator.set_arguments('small', 'max_value', 10)</p>\n<p>generator.parse('{{ color:red_rgb }} - {{ pyint:small }}')</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Parse"
  },
  {
    "name": "Passport Dates",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "birthday",
        "type": {
          "name": "date",
          "typedoc": "date",
          "nested": [],
          "union": false
        },
        "defaultValue": "2025-10-18",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "birthday: date = 2025-10-18"
      }
    ],
    "doc": "<p>Generates a formatted date of birth, issue, and expiration dates. issue and expiration dates are conditioned to fall within U.S. standards of 5 and 10 year expirations</p>\n<p>The <code>birthday</code> argument is a datetime.date object representing a date of birth.</p>\n<p>Sources:</p>\n<p>-https://travel.state.gov/content/travel/en/passports/passport-help/faqs.html</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Passport%20Dates"
  },
  {
    "name": "Passport Dob",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a datetime date of birth.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Passport%20Dob"
  },
  {
    "name": "Passport Full",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generates a formatted sting with US Passport information</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Passport%20Full"
  },
  {
    "name": "Passport Gender",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "seed",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "0",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "seed: int = 0"
      }
    ],
    "doc": "<p>Generates a string representing the gender displayed on a passport</p>\n<p>Sources:</p>\n<ul>\n<li><a href=\"https://williamsinstitute.law.ucla.edu/publications/x-gender-markers-passports/\">https://williamsinstitute.law.ucla.edu/publications/x-gender-markers-passports/</a></li>\n</ul>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Passport%20Gender"
  },
  {
    "name": "Passport Number",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a passport number by replacing tokens to be alphanumeric</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Passport%20Number"
  },
  {
    "name": "Passport Owner",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "gender",
        "type": {
          "name": "Literal",
          "typedoc": "Literal",
          "nested": [
            {
              "name": "'M'",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "'F'",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "'X'",
              "typedoc": null,
              "nested": [],
              "union": false
            }
          ],
          "union": false
        },
        "defaultValue": "X",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "gender: Literal['M', 'F', 'X'] = X"
      }
    ],
    "doc": "<p>Generate a given_name and surname for a passport owner The <code>gender</code> argument is the gender marker of a passport owner, which is a one character string that is either male, female, or non-binary.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Passport%20Owner"
  },
  {
    "name": "Password",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "length",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "10",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "length: int = 10"
      },
      {
        "name": "special_chars",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "special_chars: bool = True"
      },
      {
        "name": "digits",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "digits: bool = True"
      },
      {
        "name": "upper_case",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "upper_case: bool = True"
      },
      {
        "name": "lower_case",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "lower_case: bool = True"
      }
    ],
    "doc": "<p>Generate a random password of the specified <code>length</code>.</p>\n<p>The arguments <code>special_chars</code>, <code>digits</code>, <code>upper_case</code>, and <code>lower_case</code> control what category of characters will appear in the generated password. If set to <code>True</code> (default), at least one character from the corresponding category is guaranteed to appear. Special characters are characters from <code>!@#$%^&amp;*()_+</code>, digits are characters from <code>0123456789</code>, and uppercase and lowercase characters are characters from the ASCII set of letters.</p>\n<p>:sample: length=12 :sample: length=40, special_chars=False, upper_case=False</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Password"
  },
  {
    "name": "Past Date",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "start_date",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "date",
              "typedoc": "date",
              "nested": [],
              "union": false
            },
            {
              "name": "datetime",
              "typedoc": "datetime",
              "nested": [],
              "union": false
            },
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "-30d",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "start_date: date | datetime | timedelta | str | int = -30d"
      },
      {
        "name": "tzinfo",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "tzinfo",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "tzinfo: tzinfo | None = None"
      }
    ],
    "doc": "<p>Get a Date object based on a random date between a given date and 1 day ago.</p>\n<p>:param start_date: A <code>DateParseType</code>. Defaults to <code>\"-30d\"</code> :param tzinfo: timezone, instance of datetime.tzinfo subclass</p>\n<p>:sample: :sample: start_date='-1y'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Past%20Date"
  },
  {
    "name": "Past Datetime",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "start_date",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "date",
              "typedoc": "date",
              "nested": [],
              "union": false
            },
            {
              "name": "datetime",
              "typedoc": "datetime",
              "nested": [],
              "union": false
            },
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "-30d",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "start_date: date | datetime | timedelta | str | int = -30d"
      },
      {
        "name": "tzinfo",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "tzinfo",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "tzinfo: tzinfo | None = None"
      }
    ],
    "doc": "<p>Get a datetime object based on a random date between a given date and 1 second ago.</p>\n<p>:param start_date: A <code>DateParseType</code>. Defaults to <code>\"-30d\"</code> :param tzinfo: timezone, instance of datetime.tzinfo subclass :example: datetime('1999-02-02 11:42:52')</p>\n<p>:sample: :sample: end_date='+1y'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Past%20Datetime"
  },
  {
    "name": "Phone Number",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Phone%20Number"
  },
  {
    "name": "Port Number",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "is_system",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "is_system: bool = False"
      },
      {
        "name": "is_user",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "is_user: bool = False"
      },
      {
        "name": "is_dynamic",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "is_dynamic: bool = False"
      }
    ],
    "doc": "<p>Returns a network port number <a href=\"https://tools.ietf.org/html/rfc6335\">https://tools.ietf.org/html/rfc6335</a></p>\n<p>:param is_system: System or well-known ports :param is_user: User or registered ports :param is_dynamic: Dynamic / private / ephemeral ports :rtype: int</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Port%20Number"
  },
  {
    "name": "Postalcode",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Postalcode"
  },
  {
    "name": "Postalcode In State",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "state_abbr",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "state_abbr: str | None = None"
      }
    ],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Postalcode%20In%20State"
  },
  {
    "name": "Postalcode Plus4",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Postalcode%20Plus4"
  },
  {
    "name": "Postcode",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>:example: 86039-9874</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Postcode"
  },
  {
    "name": "Postcode In State",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "state_abbr",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "state_abbr: str | None = None"
      }
    ],
    "doc": "<p>:returns: A random postcode within the provided state abbreviation</p>\n<p>:param state_abbr: A state abbreviation</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Postcode%20In%20State"
  },
  {
    "name": "Prefix",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Prefix"
  },
  {
    "name": "Prefix Female",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Prefix%20Female"
  },
  {
    "name": "Prefix Male",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Prefix%20Male"
  },
  {
    "name": "Prefix Nonbinary",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Prefix%20Nonbinary"
  },
  {
    "name": "Pricetag",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Pricetag"
  },
  {
    "name": "Profile",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "fields",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "List",
              "typedoc": "list",
              "nested": [
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "fields: List[str] | None = None"
      },
      {
        "name": "sex",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Literal",
              "typedoc": "Literal",
              "nested": [
                {
                  "name": "'M'",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                },
                {
                  "name": "'F'",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                },
                {
                  "name": "'X'",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "sex: Literal['M', 'F', 'X'] | None = None"
      }
    ],
    "doc": "<p>Generates a complete profile. If \"fields\" is not empty, only the fields in the list will be returned</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Profile"
  },
  {
    "name": "Provider",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "self",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "self"
      },
      {
        "name": "name",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name: str"
      }
    ],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Provider"
  },
  {
    "name": "Psv",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "header",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Sequence",
              "typedoc": "list",
              "nested": [
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "header: Sequence[str] | None = None"
      },
      {
        "name": "data_columns",
        "type": {
          "name": "Tuple",
          "typedoc": "tuple",
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": false
        },
        "defaultValue": "('{{name}}', '{{address}}')",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "data_columns: Tuple[str, str] = ('{{name}}', '{{address}}')"
      },
      {
        "name": "num_rows",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "10",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "num_rows: int = 10"
      },
      {
        "name": "include_row_ids",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "include_row_ids: bool = False"
      }
    ],
    "doc": "<p>Generate random pipe-separated values.</p>\n<p>For more information on the different arguments of this method, please refer to :meth:<span class=\"name\">dsv() &lt;faker.providers.misc.Provider.dsv&gt;</span> which is used under the hood.</p>\n<p>:sample: data_columns=('{{name}}', '{{address}}'), num_rows=10, include_row_ids=False :sample: header=('Name', 'Address', 'Favorite Color'), data_columns=('{{name}}', '{{address}}', '{{safe_color_name}}'), num_rows=10, include_row_ids=True</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Psv"
  },
  {
    "name": "Pybool",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "truth_probability",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "50",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "truth_probability: int = 50"
      }
    ],
    "doc": "<p>Generates a random boolean, optionally biased towards <span class=\"name\">True</span> or <span class=\"name\">False</span>.</p>\n<p>:truth_probability: Probability of generating a <span class=\"name\">True</span> value. Must be between <span class=\"name\">0</span> and <span class=\"name\">100</span> inclusive'. :return: Random boolean. :raises ValueError: If invalid <span class=\"name\">truth_probability</span> is provided.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Pybool"
  },
  {
    "name": "Pydecimal",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "left_digits",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "left_digits: int | None = None"
      },
      {
        "name": "right_digits",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "right_digits: int | None = None"
      },
      {
        "name": "positive",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "positive: bool | None = None"
      },
      {
        "name": "min_value",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "float",
              "typedoc": "float",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "min_value: float | int | None = None"
      },
      {
        "name": "max_value",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "float",
              "typedoc": "float",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "max_value: float | int | None = None"
      }
    ],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Pydecimal"
  },
  {
    "name": "Pydict",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "nb_elements",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "10",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "nb_elements: int = 10"
      },
      {
        "name": "variable_nb_elements",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "variable_nb_elements: bool = True"
      },
      {
        "name": "value_types",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "List",
              "typedoc": "list",
              "nested": [
                {
                  "name": "Type",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "Tuple",
              "typedoc": "tuple",
              "nested": [
                {
                  "name": "Type",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                },
                {
                  "name": "...",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "value_types: List[Type] | Tuple[Type, ...] | None = None"
      },
      {
        "name": "allowed_types",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "List",
              "typedoc": "list",
              "nested": [
                {
                  "name": "Type",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "Tuple",
              "typedoc": "tuple",
              "nested": [
                {
                  "name": "Type",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                },
                {
                  "name": "...",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "allowed_types: List[Type] | Tuple[Type, ...] | None = None"
      }
    ],
    "doc": "<p>Returns a dictionary.</p>\n<p>:nb_elements: number of elements for dictionary :variable_nb_elements: is use variable number of elements for dictionary :value_types: type of dictionary values</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Pydict"
  },
  {
    "name": "Pyfloat",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "left_digits",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "left_digits=None"
      },
      {
        "name": "right_digits",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "right_digits=None"
      },
      {
        "name": "positive",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "positive=None"
      },
      {
        "name": "min_value",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "min_value=None"
      },
      {
        "name": "max_value",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "max_value=None"
      }
    ],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Pyfloat"
  },
  {
    "name": "Pyint",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "min_value",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "0",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "min_value: int = 0"
      },
      {
        "name": "max_value",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "9999",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "max_value: int = 9999"
      },
      {
        "name": "step",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "1",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "step: int = 1"
      }
    ],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Pyint"
  },
  {
    "name": "Pyiterable",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "nb_elements",
        "type": null,
        "defaultValue": "10",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "nb_elements=10"
      },
      {
        "name": "variable_nb_elements",
        "type": null,
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "variable_nb_elements=True"
      },
      {
        "name": "value_types",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "value_types=None"
      },
      {
        "name": "allowed_types",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "allowed_types=None"
      }
    ],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Pyiterable"
  },
  {
    "name": "Pylist",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "nb_elements",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "10",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "nb_elements: int = 10"
      },
      {
        "name": "variable_nb_elements",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "variable_nb_elements: bool = True"
      },
      {
        "name": "value_types",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "List",
              "typedoc": "list",
              "nested": [
                {
                  "name": "Type",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "Tuple",
              "typedoc": "tuple",
              "nested": [
                {
                  "name": "Type",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                },
                {
                  "name": "...",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "value_types: List[Type] | Tuple[Type, ...] | None = None"
      },
      {
        "name": "allowed_types",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "List",
              "typedoc": "list",
              "nested": [
                {
                  "name": "Type",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "Tuple",
              "typedoc": "tuple",
              "nested": [
                {
                  "name": "Type",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                },
                {
                  "name": "...",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "allowed_types: List[Type] | Tuple[Type, ...] | None = None"
      }
    ],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Pylist"
  },
  {
    "name": "Pyobject",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "object_type",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Type",
              "typedoc": null,
              "nested": [
                {
                  "name": "Union",
                  "typedoc": null,
                  "nested": [
                    {
                      "name": "bool",
                      "typedoc": "boolean",
                      "nested": [],
                      "union": false
                    },
                    {
                      "name": "str",
                      "typedoc": "string",
                      "nested": [],
                      "union": false
                    },
                    {
                      "name": "float",
                      "typedoc": "float",
                      "nested": [],
                      "union": false
                    },
                    {
                      "name": "int",
                      "typedoc": "integer",
                      "nested": [],
                      "union": false
                    },
                    {
                      "name": "tuple",
                      "typedoc": "tuple",
                      "nested": [],
                      "union": false
                    },
                    {
                      "name": "set",
                      "typedoc": "set",
                      "nested": [],
                      "union": false
                    },
                    {
                      "name": "list",
                      "typedoc": "list",
                      "nested": [],
                      "union": false
                    },
                    {
                      "name": "Iterable",
                      "typedoc": null,
                      "nested": [],
                      "union": false
                    },
                    {
                      "name": "dict",
                      "typedoc": "dictionary",
                      "nested": [],
                      "union": false
                    }
                  ],
                  "union": true
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "object_type: Type[bool | str | float | int | tuple | set | list | Iterable | dict] | None = None"
      }
    ],
    "doc": "<p>Generates a random object passing the type desired.</p>\n<p>:object_type: the type of the object to generate. :return: the random object generated. :raises ValueError: if the object type passed is not supported</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Pyobject"
  },
  {
    "name": "Pyset",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "nb_elements",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "10",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "nb_elements: int = 10"
      },
      {
        "name": "variable_nb_elements",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "variable_nb_elements: bool = True"
      },
      {
        "name": "value_types",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "List",
              "typedoc": "list",
              "nested": [
                {
                  "name": "Type",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "Tuple",
              "typedoc": "tuple",
              "nested": [
                {
                  "name": "Type",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                },
                {
                  "name": "...",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "value_types: List[Type] | Tuple[Type, ...] | None = None"
      },
      {
        "name": "allowed_types",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "List",
              "typedoc": "list",
              "nested": [
                {
                  "name": "Type",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "Tuple",
              "typedoc": "tuple",
              "nested": [
                {
                  "name": "Type",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                },
                {
                  "name": "...",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "allowed_types: List[Type] | Tuple[Type, ...] | None = None"
      }
    ],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Pyset"
  },
  {
    "name": "Pystr",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "min_chars",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "min_chars: int | None = None"
      },
      {
        "name": "max_chars",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "20",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "max_chars: int = 20"
      },
      {
        "name": "prefix",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "prefix: str = "
      },
      {
        "name": "suffix",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "suffix: str = "
      }
    ],
    "doc": "<p>Generates a random string of upper and lowercase letters.</p>\n<p>:param min_chars: minimum length of the random part. :param max_chars: maximum length of the random part. :param prefix: an optional prefix to prepend to the random string. :param suffix: an optional suffix to append to the random string. :return: Random of random length between min and max characters.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Pystr"
  },
  {
    "name": "Pystr Format",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "string_format",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "?#-###{{random_int}}{{random_letter}}",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "string_format: str = ?#-###{{random_int}}{{random_letter}}"
      },
      {
        "name": "letters",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "letters: str = abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
      }
    ],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Pystr%20Format"
  },
  {
    "name": "Pystruct",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "count",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "10",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "count: int = 10"
      },
      {
        "name": "value_types",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "List",
              "typedoc": "list",
              "nested": [
                {
                  "name": "Type",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "Tuple",
              "typedoc": "tuple",
              "nested": [
                {
                  "name": "Type",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                },
                {
                  "name": "...",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "value_types: List[Type] | Tuple[Type, ...] | None = None"
      },
      {
        "name": "allowed_types",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "List",
              "typedoc": "list",
              "nested": [
                {
                  "name": "Type",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "Tuple",
              "typedoc": "tuple",
              "nested": [
                {
                  "name": "Type",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                },
                {
                  "name": "...",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "allowed_types: List[Type] | Tuple[Type, ...] | None = None"
      }
    ],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Pystruct"
  },
  {
    "name": "Pytimezone",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "args",
        "type": {
          "name": "Any",
          "typedoc": "Any",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args: Any"
      },
      {
        "name": "kwargs",
        "type": {
          "name": "Any",
          "typedoc": "Any",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "VAR_NAMED",
        "required": false,
        "repr": "**kwargs: Any"
      }
    ],
    "doc": "<p>Generate a random timezone (see <code>faker.timezone</code> for any args) and return a Python object usable as a <code>tzinfo</code> for <code>datetime</code> or other fakers.</p>\n<p>:sample:</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Pytimezone"
  },
  {
    "name": "Pytuple",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "nb_elements",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "10",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "nb_elements: int = 10"
      },
      {
        "name": "variable_nb_elements",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "variable_nb_elements: bool = True"
      },
      {
        "name": "value_types",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "List",
              "typedoc": "list",
              "nested": [
                {
                  "name": "Type",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "Tuple",
              "typedoc": "tuple",
              "nested": [
                {
                  "name": "Type",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                },
                {
                  "name": "...",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "value_types: List[Type] | Tuple[Type, ...] | None = None"
      },
      {
        "name": "allowed_types",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "List",
              "typedoc": "list",
              "nested": [
                {
                  "name": "Type",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "Tuple",
              "typedoc": "tuple",
              "nested": [
                {
                  "name": "Type",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                },
                {
                  "name": "...",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "allowed_types: List[Type] | Tuple[Type, ...] | None = None"
      }
    ],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Pytuple"
  },
  {
    "name": "Random Choices",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "elements",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Collection",
              "typedoc": null,
              "nested": [
                {
                  "name": "~T",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "OrderedDict",
              "typedoc": "dictionary",
              "nested": [
                {
                  "name": "~T",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                },
                {
                  "name": "float",
                  "typedoc": "float",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "('a', 'b', 'c')",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "elements: Collection[~T] | OrderedDict[~T, float] = ('a', 'b', 'c')"
      },
      {
        "name": "length",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "length: int | None = None"
      }
    ],
    "doc": "<p>Generate a list of objects randomly sampled from <code>elements</code> with replacement.</p>\n<p>For information on the <code>elements</code> and <code>length</code> arguments, please refer to :meth:<span class=\"name\">random_elements() &lt;faker.providers.BaseProvider.random_elements&gt;</span> which is used under the hood with the <code>unique</code> argument explicitly set to <code>False</code>.</p>\n<p>:sample: elements=('a', 'b', 'c', 'd') :sample: elements=('a', 'b', 'c', 'd'), length=10 :sample: elements=OrderedDict([ (\"a\", 0.45), (\"b\", 0.35), (\"c\", 0.15), (\"d\", 0.05), ]) :sample: elements=OrderedDict([ (\"a\", 0.45), (\"b\", 0.35), (\"c\", 0.15), (\"d\", 0.05), ]), length=20</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Random%20Choices"
  },
  {
    "name": "Random Digit",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a random digit (0 to 9).</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Random%20Digit"
  },
  {
    "name": "Random Digit Above Two",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a random digit above value two (2 to 9).</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Random%20Digit%20Above%20Two"
  },
  {
    "name": "Random Digit Not Null",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a random non-zero digit (1 to 9).</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Random%20Digit%20Not%20Null"
  },
  {
    "name": "Random Digit Not Null Or Empty",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a random non-zero digit (1 to 9) or an empty string.</p>\n<p>This method will return an empty string 50% of the time, and each digit has a 1/18 chance of being generated.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Random%20Digit%20Not%20Null%20Or%20Empty"
  },
  {
    "name": "Random Digit Or Empty",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a random digit (0 to 9) or an empty string.</p>\n<p>This method will return an empty string 50% of the time, and each digit has a 1/20 chance of being generated.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Random%20Digit%20Or%20Empty"
  },
  {
    "name": "Random Element",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "elements",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Collection",
              "typedoc": null,
              "nested": [
                {
                  "name": "~T",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "OrderedDict",
              "typedoc": "dictionary",
              "nested": [
                {
                  "name": "~T",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                },
                {
                  "name": "float",
                  "typedoc": "float",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "('a', 'b', 'c')",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "elements: Collection[~T] | OrderedDict[~T, float] = ('a', 'b', 'c')"
      }
    ],
    "doc": "<p>Generate a randomly sampled object from <code>elements</code>.</p>\n<p>For information on the <code>elements</code> argument, please refer to :meth:<span class=\"name\">random_elements() &lt;faker.providers.BaseProvider.random_elements&gt;</span> which is used under the hood with the <code>unique</code> argument set to <code>False</code> and the <code>length</code> argument set to <code>1</code>.</p>\n<p>:sample: elements=('a', 'b', 'c', 'd') :sample size=10: elements=OrderedDict([ (\"a\", 0.45), (\"b\", 0.35), (\"c\", 0.15), (\"d\", 0.05), ])</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Random%20Element"
  },
  {
    "name": "Random Elements",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "elements",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Collection",
              "typedoc": null,
              "nested": [
                {
                  "name": "~T",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "OrderedDict",
              "typedoc": "dictionary",
              "nested": [
                {
                  "name": "~T",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                },
                {
                  "name": "float",
                  "typedoc": "float",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "('a', 'b', 'c')",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "elements: Collection[~T] | OrderedDict[~T, float] = ('a', 'b', 'c')"
      },
      {
        "name": "length",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "length: int | None = None"
      },
      {
        "name": "unique",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "unique: bool = False"
      },
      {
        "name": "use_weighting",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "use_weighting: bool | None = None"
      }
    ],
    "doc": "<p>Generate a list of randomly sampled objects from <code>elements</code>.</p>\n<p>Set <code>unique</code> to <code>False</code> for random sampling with replacement, and set <code>unique</code> to <code>True</code> for random sampling without replacement.</p>\n<p>If <code>length</code> is set to <code>None</code> or is omitted, <code>length</code> will be set to a random integer from 1 to the size of <code>elements</code>.</p>\n<p>The value of <code>length</code> cannot be greater than the number of objects in <code>elements</code> if <code>unique</code> is set to <code>True</code>.</p>\n<p>The value of <code>elements</code> can be any sequence type (<code>list</code>, <code>tuple</code>, <code>set</code>, <code>string</code>, etc) or an <code>OrderedDict</code> type. If it is the latter, the keys will be used as the objects for sampling, and the values will be used as weighted probabilities if <code>unique</code> is set to <code>False</code>. For example:</p>\n<p>.. code-block:: python</p>\n<p># Random sampling with replacement fake.random_elements( elements=OrderedDict([ (\"variable_1\", 0.5),        # Generates \"variable_1\" 50% of the time (\"variable_2\", 0.2),        # Generates \"variable_2\" 20% of the time (\"variable_3\", 0.2),        # Generates \"variable_3\" 20% of the time (\"variable_4\": 0.1),        # Generates \"variable_4\" 10% of the time ]), unique=False )</p>\n<p># Random sampling without replacement (defaults to uniform distribution) fake.random_elements( elements=OrderedDict([ (\"variable_1\", 0.5), (\"variable_2\", 0.2), (\"variable_3\", 0.2), (\"variable_4\": 0.1), ]), unique=True )</p>\n<p>:sample: elements=('a', 'b', 'c', 'd'), unique=False :sample: elements=('a', 'b', 'c', 'd'), unique=True :sample: elements=('a', 'b', 'c', 'd'), length=10, unique=False :sample: elements=('a', 'b', 'c', 'd'), length=4, unique=True :sample: elements=OrderedDict([ (\"a\", 0.45), (\"b\", 0.35), (\"c\", 0.15), (\"d\", 0.05), ]), length=20, unique=False :sample: elements=OrderedDict([ (\"a\", 0.45), (\"b\", 0.35), (\"c\", 0.15), (\"d\", 0.05), ]), unique=True</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Random%20Elements"
  },
  {
    "name": "Random Int",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "min",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "0",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "min: int = 0"
      },
      {
        "name": "max",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "9999",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "max: int = 9999"
      },
      {
        "name": "step",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "1",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "step: int = 1"
      }
    ],
    "doc": "<p>Generate a random integer between two integers <code>min</code> and <code>max</code> inclusive while observing the provided <code>step</code> value.</p>\n<p>This method is functionally equivalent to randomly sampling an integer from the sequence <code>range(min, max + 1, step)</code>.</p>\n<p>:sample: min=0, max=15 :sample: min=0, max=15, step=3</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Random%20Int"
  },
  {
    "name": "Random Letter",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a random ASCII letter (a-z and A-Z).</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Random%20Letter"
  },
  {
    "name": "Random Letters",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "length",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "16",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "length: int = 16"
      }
    ],
    "doc": "<p>Generate a list of random ASCII letters (a-z and A-Z) of the specified <code>length</code>.</p>\n<p>:sample: length=10</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Random%20Letters"
  },
  {
    "name": "Random Lowercase Letter",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a random lowercase ASCII letter (a-z).</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Random%20Lowercase%20Letter"
  },
  {
    "name": "Random Number",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "digits",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "digits: int | None = None"
      },
      {
        "name": "fix_len",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "fix_len: bool = False"
      }
    ],
    "doc": "<p>Generate a random integer according to the following rules:</p>\n<ul>\n<li>If <code>digits</code> is <code>None</code> (default), its value will be set to a random integer from 1 to 9.</li>\n<li>If <code>fix_len</code> is <code>False</code> (default), all integers that do not exceed the number of <code>digits</code> can be generated.</li>\n<li>If <code>fix_len</code> is <code>True</code>, only integers with the exact number of <code>digits</code> can be generated.</li>\n</ul>\n<p>:sample: fix_len=False :sample: fix_len=True :sample: digits=3 :sample: digits=3, fix_len=False :sample: digits=3, fix_len=True</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Random%20Number"
  },
  {
    "name": "Random Sample",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "elements",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Collection",
              "typedoc": null,
              "nested": [
                {
                  "name": "~T",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "OrderedDict",
              "typedoc": "dictionary",
              "nested": [
                {
                  "name": "~T",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                },
                {
                  "name": "float",
                  "typedoc": "float",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "('a', 'b', 'c')",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "elements: Collection[~T] | OrderedDict[~T, float] = ('a', 'b', 'c')"
      },
      {
        "name": "length",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "length: int | None = None"
      }
    ],
    "doc": "<p>Generate a list of objects randomly sampled from <code>elements</code> without replacement.</p>\n<p>For information on the <code>elements</code> and <code>length</code> arguments, please refer to :meth:<span class=\"name\">random_elements() &lt;faker.providers.BaseProvider.random_elements&gt;</span> which is used under the hood with the <code>unique</code> argument explicitly set to <code>True</code>.</p>\n<p>:sample: elements=('a', 'b', 'c', 'd', 'e', 'f') :sample: elements=('a', 'b', 'c', 'd', 'e', 'f'), length=3</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Random%20Sample"
  },
  {
    "name": "Random Uppercase Letter",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a random uppercase ASCII letter (A-Z).</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Random%20Uppercase%20Letter"
  },
  {
    "name": "Randomize Nb Elements",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "number",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "10",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "number: int = 10"
      },
      {
        "name": "le",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "le: bool = False"
      },
      {
        "name": "ge",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ge: bool = False"
      },
      {
        "name": "min",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "min: int | None = None"
      },
      {
        "name": "max",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "max: int | None = None"
      }
    ],
    "doc": "<p>Generate a random integer near <code>number</code> according to the following rules:</p>\n<ul>\n<li>If <code>le</code> is <code>False</code> (default), allow generation up to 140% of <code>number</code>. If <code>True</code>, upper bound generation is capped at 100%.</li>\n<li>If <code>ge</code> is <code>False</code> (default), allow generation down to 60% of <code>number</code>. If <code>True</code>, lower bound generation is capped at 100%.</li>\n<li>If a numerical value for <code>min</code> is provided, generated values less than <code>min</code> will be clamped at <code>min</code>.</li>\n<li>If a numerical value for <code>max</code> is provided, generated values greater than <code>max</code> will be clamped at <code>max</code>.</li>\n<li>If both <code>le</code> and <code>ge</code> are <code>True</code>, the value of <code>number</code> will automatically be returned, regardless of the values supplied for <code>min</code> and <code>max</code>.</li>\n</ul>\n<p>:sample: number=100 :sample: number=100, ge=True :sample: number=100, ge=True, min=120 :sample: number=100, le=True :sample: number=100, le=True, max=80 :sample: number=79, le=True, ge=True, min=80</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Randomize%20Nb%20Elements"
  },
  {
    "name": "Rgb Color",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a color formatted as a comma-separated RGB value.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Rgb%20Color"
  },
  {
    "name": "Rgb Css Color",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a color formatted as a CSS rgb() function.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Rgb%20Css%20Color"
  },
  {
    "name": "Ripe Id",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Returns RIPE Organization ID <a href=\"https://www.ripe.net/manage-ips-and-asns/db/support/organisation-object-in-the-ripe-database\">https://www.ripe.net/manage-ips-and-asns/db/support/organisation-object-in-the-ripe-database</a></p>\n<p>:rtype: str</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Ripe%20Id"
  },
  {
    "name": "Safari",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a Safari web browser user agent string.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Safari"
  },
  {
    "name": "Safe Color Name",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a web-safe color name.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Safe%20Color%20Name"
  },
  {
    "name": "Safe Domain Name",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Safe%20Domain%20Name"
  },
  {
    "name": "Safe Email",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Safe%20Email"
  },
  {
    "name": "Safe Hex Color",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a web-safe color formatted as a hex triplet.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Safe%20Hex%20Color"
  },
  {
    "name": "Sbn 9",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "separator",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "-",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "separator: str = -"
      }
    ],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Sbn%209"
  },
  {
    "name": "Secondary Address",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Secondary%20Address"
  },
  {
    "name": "Seed",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "seed",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "seed=None"
      }
    ],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Seed"
  },
  {
    "name": "Seed Instance",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "self",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "self"
      },
      {
        "name": "seed",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "float",
              "typedoc": "float",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "bytes",
              "typedoc": "bytes",
              "nested": [],
              "union": false
            },
            {
              "name": "bytearray",
              "typedoc": "bytearray",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "seed: int | float | str | bytes | bytearray | None = None"
      }
    ],
    "doc": "<p>Calls random.seed</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Seed%20Instance"
  },
  {
    "name": "Sentence",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "nb_words",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "6",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "nb_words: int = 6"
      },
      {
        "name": "variable_nb_words",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "variable_nb_words: bool = True"
      },
      {
        "name": "ext_word_list",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Sequence",
              "typedoc": "list",
              "nested": [
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ext_word_list: Sequence[str] | None = None"
      }
    ],
    "doc": "<p>Generate a sentence.</p>\n<p>The <code>nb_words</code> argument controls how many words the sentence will contain, and setting <code>variable_nb_words</code> to <code>False</code> will generate the exact amount, while setting it to <code>True</code> (default) will generate a random amount (+/-40%, minimum of 1) using |randomize_nb_elements|.</p>\n<p>Under the hood, |words| is used to generate the words, so the argument <code>ext_word_list</code> works in the same way here as it would in that method.</p>\n<p>:sample: nb_words=10 :sample: nb_words=10, variable_nb_words=False :sample: nb_words=10, ext_word_list=['abc', 'def', 'ghi', 'jkl'] :sample: nb_words=10, variable_nb_words=True, ext_word_list=['abc', 'def', 'ghi', 'jkl']</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Sentence"
  },
  {
    "name": "Sentences",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "nb",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "3",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "nb: int = 3"
      },
      {
        "name": "ext_word_list",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Sequence",
              "typedoc": "list",
              "nested": [
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ext_word_list: Sequence[str] | None = None"
      }
    ],
    "doc": "<p>Generate a list of sentences.</p>\n<p>This method uses |sentence| under the hood to generate sentences, and the <code>nb</code> argument controls exactly how many sentences the list will contain. The <code>ext_word_list</code> argument works in exactly the same way as well.</p>\n<p>:sample: :sample: nb=5 :sample: nb=5, ext_word_list=['abc', 'def', 'ghi', 'jkl']</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Sentences"
  },
  {
    "name": "Set Arguments",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "self",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "self"
      },
      {
        "name": "group",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "group: str"
      },
      {
        "name": "argument",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "argument: str"
      },
      {
        "name": "value",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Any",
              "typedoc": "Any",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "value: Any | None = None"
      }
    ],
    "doc": "<p>Creates an argument group, with an individual argument or a dictionary of arguments. The argument groups is used to apply arguments to tokens, when using the generator.parse() method. To further manage argument groups, use get_arguments() and del_arguments() methods.</p>\n<p>generator.set_arguments('small', 'max_value', 10) generator.set_arguments('small', {'min_value': 5, 'max_value': 10})</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Set%20Arguments"
  },
  {
    "name": "Set Formatter",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "self",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "self"
      },
      {
        "name": "name",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name: str"
      },
      {
        "name": "formatter",
        "type": {
          "name": "Callable",
          "typedoc": null,
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "formatter: Callable"
      }
    ],
    "doc": "<p>This method adds a provider method to generator. Override this method to add some decoration or logging stuff.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Set%20Formatter"
  },
  {
    "name": "Sha 1",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "raw_output",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "raw_output: bool = False"
      }
    ],
    "doc": "<p>Generate a random SHA-1 hash.</p>\n<p>If <code>raw_output</code> is <code>False</code> (default), a hexadecimal string representation of the SHA-1 hash will be returned. If <code>True</code>, a <code>bytes</code> object representation will be returned instead.</p>\n<p>:sample: raw_output=False :sample: raw_output=True</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Sha%201"
  },
  {
    "name": "Sha 256",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "raw_output",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "raw_output: bool = False"
      }
    ],
    "doc": "<p>Generate a random SHA-256 hash.</p>\n<p>If <code>raw_output</code> is <code>False</code> (default), a hexadecimal string representation of the SHA-256 hash will be returned. If <code>True</code>, a <code>bytes</code> object representation will be returned instead.</p>\n<p>:sample: raw_output=False :sample: raw_output=True</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Sha%20256"
  },
  {
    "name": "Simple Profile",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "sex",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Literal",
              "typedoc": "Literal",
              "nested": [
                {
                  "name": "'M'",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                },
                {
                  "name": "'F'",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                },
                {
                  "name": "'X'",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "sex: Literal['M', 'F', 'X'] | None = None"
      }
    ],
    "doc": "<p>Generates a basic profile with personal informations</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Simple%20Profile"
  },
  {
    "name": "Slug",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "value",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "value: str | None = None"
      }
    ],
    "doc": "<p>Django algorithm</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Slug"
  },
  {
    "name": "Ssn",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "taxpayer_identification_number_type",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "SSN",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "taxpayer_identification_number_type: str = SSN"
      }
    ],
    "doc": "<p>Generate a random United States Taxpayer Identification Number of the specified type.</p>\n<p>If no type is specified, a US SSN is returned.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Ssn"
  },
  {
    "name": "State",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#State"
  },
  {
    "name": "State Abbr",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "include_territories",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "include_territories: bool = True"
      },
      {
        "name": "include_freely_associated_states",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "include_freely_associated_states: bool = True"
      }
    ],
    "doc": "<p>:returns: A random two-letter USPS postal code</p>\n<p>By default, the resulting code may abbreviate any of the fifty states, five US territories, or three freely-associating sovereign states.</p>\n<p>:param include_territories: If True, territories will be included. If False, US territories will be excluded. :param include_freely_associated_states: If True, freely-associated states will be included. If False, sovereign states in free association with the US will be excluded.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#State%20Abbr"
  },
  {
    "name": "Street Address",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>:example: '791 Crist Parks'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Street%20Address"
  },
  {
    "name": "Street Name",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>:example: 'Crist Parks'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Street%20Name"
  },
  {
    "name": "Street Suffix",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>:example: 'Avenue'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Street%20Suffix"
  },
  {
    "name": "Suffix",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Suffix"
  },
  {
    "name": "Suffix Female",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Suffix%20Female"
  },
  {
    "name": "Suffix Male",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Suffix%20Male"
  },
  {
    "name": "Suffix Nonbinary",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Suffix%20Nonbinary"
  },
  {
    "name": "Swift",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "length",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "length: int | None = None"
      },
      {
        "name": "primary",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "primary: bool = False"
      },
      {
        "name": "use_dataset",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "use_dataset: bool = False"
      }
    ],
    "doc": "<p>Generate a SWIFT code.</p>\n<p>SWIFT codes, reading from left to right, are composed of a 4 alphabet character bank code, a 2 alphabet character country code, a 2 alphanumeric location code, and an optional 3 alphanumeric branch code. This means SWIFT codes can only have 8 or 11 characters, so the value of <code>length</code> can only be <code>None</code> or the integers <code>8</code> or <code>11</code>. If the value is <code>None</code>, then a value of <code>8</code> or <code>11</code> will randomly be assigned.</p>\n<p>Because all 8-digit SWIFT codes already refer to the primary branch or office, the <code>primary</code> argument only has an effect if the value of <code>length</code> is <code>11</code>. If <code>primary</code> is <code>True</code> and <code>length</code> is <code>11</code>, the 11-digit SWIFT codes generated will always end in <code>'XXX'</code> to denote that they belong to primary branches/offices.</p>\n<p>For extra authenticity, localized providers may opt to include SWIFT bank codes, location codes, and branch codes used in their respective locales. If <code>use_dataset</code> is <code>True</code>, this method will generate SWIFT codes based on those locale-specific codes if included. If those codes were not included, then it will behave as if <code>use_dataset</code> were <code>False</code>, and in that mode, all those codes will just be randomly generated as per the specification.</p>\n<p>:sample: :sample: length=8 :sample: length=8, use_dataset=True :sample: length=11 :sample: length=11, primary=True :sample: length=11, use_dataset=True :sample: length=11, primary=True, use_dataset=True</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Swift"
  },
  {
    "name": "Swift 11",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "primary",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "primary: bool = False"
      },
      {
        "name": "use_dataset",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "use_dataset: bool = False"
      }
    ],
    "doc": "<p>Generate an 11-digit SWIFT code.</p>\n<p>This method uses |swift| under the hood with the <code>length</code> argument set to <code>11</code>. If <code>primary</code> is set to <code>True</code>, the SWIFT code will always end with <code>'XXX'</code>. All 11-digit SWIFT codes use this convention to refer to the primary branch/office.</p>\n<p>:sample: :sample: use_dataset=True</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Swift%2011"
  },
  {
    "name": "Swift 8",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "use_dataset",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "use_dataset: bool = False"
      }
    ],
    "doc": "<p>Generate an 8-digit SWIFT code.</p>\n<p>This method uses |swift| under the hood with the <code>length</code> argument set to <code>8</code> and with the <code>primary</code> argument omitted. All 8-digit SWIFT codes already refer to the primary branch/office.</p>\n<p>:sample: :sample: use_dataset=True</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Swift%208"
  },
  {
    "name": "Tar",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "uncompressed_size",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "65536",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "uncompressed_size: int = 65536"
      },
      {
        "name": "num_files",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "1",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "num_files: int = 1"
      },
      {
        "name": "min_file_size",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "4096",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "min_file_size: int = 4096"
      },
      {
        "name": "compression",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "compression: str | None = None"
      }
    ],
    "doc": "<p>Generate a bytes object containing a random valid tar file.</p>\n<p>The number and sizes of files contained inside the resulting archive can be controlled using the following arguments:</p>\n<ul>\n<li><code>uncompressed_size</code> - the total size of files before compression, 16 KiB by default</li>\n<li><code>num_files</code> - the number of files archived in resulting zip file, 1 by default</li>\n<li><code>min_file_size</code> - the minimum size of each file before compression, 4 KiB by default</li>\n</ul>\n<p>No compression is used by default, but setting <code>compression</code> to one of the values listed below will use the corresponding compression type.</p>\n<ul>\n<li><code>'bzip2'</code> or <code>'bz2'</code> for BZIP2</li>\n<li><code>'lzma'</code> or <code>'xz'</code> for LZMA</li>\n<li><code>'gzip'</code> or <code>'gz'</code> for GZIP</li>\n</ul>\n<p>:sample: uncompressed_size=256, num_files=4, min_file_size=32 :sample: uncompressed_size=256, num_files=32, min_file_size=4, compression='bz2'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Tar"
  },
  {
    "name": "Text",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "max_nb_chars",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "200",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "max_nb_chars: int = 200"
      },
      {
        "name": "ext_word_list",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Sequence",
              "typedoc": "list",
              "nested": [
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ext_word_list: Sequence[str] | None = None"
      }
    ],
    "doc": "<p>Generate a text string.</p>\n<p>The <code>max_nb_chars</code> argument controls the approximate number of characters the text string will have, and depending on its value, this method may use either |words|, |sentences|, or |paragraphs| for text generation. The <code>ext_word_list</code> argument works in exactly the same way it would in any of those methods.</p>\n<p>:sample: max_nb_chars=20 :sample: max_nb_chars=80 :sample: max_nb_chars=160 :sample: ext_word_list=['abc', 'def', 'ghi', 'jkl']</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Text"
  },
  {
    "name": "Texts",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "nb_texts",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "3",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "nb_texts: int = 3"
      },
      {
        "name": "max_nb_chars",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "200",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "max_nb_chars: int = 200"
      },
      {
        "name": "ext_word_list",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Sequence",
              "typedoc": "list",
              "nested": [
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ext_word_list: Sequence[str] | None = None"
      }
    ],
    "doc": "<p>Generate a list of text strings.</p>\n<p>The <code>nb_texts</code> argument controls how many text strings the list will contain, and this method uses |text| under the hood for text generation, so the two remaining arguments, <code>max_nb_chars</code> and <code>ext_word_list</code> will work in exactly the same way as well.</p>\n<p>:sample: nb_texts=5 :sample: nb_texts=5, max_nb_chars=50 :sample: nb_texts=5, max_nb_chars=50, ext_word_list=['abc', 'def', 'ghi', 'jkl']</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Texts"
  },
  {
    "name": "Time",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "pattern",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "%H:%M:%S",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "pattern: str = %H:%M:%S"
      },
      {
        "name": "end_datetime",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "date",
              "typedoc": "date",
              "nested": [],
              "union": false
            },
            {
              "name": "datetime",
              "typedoc": "datetime",
              "nested": [],
              "union": false
            },
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "end_datetime: date | datetime | timedelta | str | int | None = None"
      }
    ],
    "doc": "<p>Get a time string (24h format by default)</p>\n<p>:param pattern: format :param end_datetime: A <code>DateParseType</code>. Defaults to the current date and time</p>\n<p>:sample: :sample: pattern='%I:%M %p'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Time"
  },
  {
    "name": "Time Delta",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "end_datetime",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "date",
              "typedoc": "date",
              "nested": [],
              "union": false
            },
            {
              "name": "datetime",
              "typedoc": "datetime",
              "nested": [],
              "union": false
            },
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "end_datetime: date | datetime | timedelta | str | int | None = None"
      }
    ],
    "doc": "<p>Get a random timedelta object of duration between the current date and time and <span class=\"name\">end_datetime</span></p>\n<p>:param end_datetime: A <code>DateParseType</code>. Defaults to the current date and time</p>\n<p>:sample: :sample: end_datetime='+30h'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Time%20Delta"
  },
  {
    "name": "Time Object",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "end_datetime",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "date",
              "typedoc": "date",
              "nested": [],
              "union": false
            },
            {
              "name": "datetime",
              "typedoc": "datetime",
              "nested": [],
              "union": false
            },
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "end_datetime: date | datetime | timedelta | str | int | None = None"
      }
    ],
    "doc": "<p>Get a time object</p>\n<p>:param end_datetime: A <code>DateParseType</code>. Defaults to the current date and time</p>\n<p>:sample: :sample: end_datetime='+1h'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Time%20Object"
  },
  {
    "name": "Time Series",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "start_date",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "date",
              "typedoc": "date",
              "nested": [],
              "union": false
            },
            {
              "name": "datetime",
              "typedoc": "datetime",
              "nested": [],
              "union": false
            },
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "-30d",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "start_date: date | datetime | timedelta | str | int = -30d"
      },
      {
        "name": "end_date",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "date",
              "typedoc": "date",
              "nested": [],
              "union": false
            },
            {
              "name": "datetime",
              "typedoc": "datetime",
              "nested": [],
              "union": false
            },
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "now",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "end_date: date | datetime | timedelta | str | int = now"
      },
      {
        "name": "precision",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "float",
              "typedoc": "float",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "precision: float | None = None"
      },
      {
        "name": "distrib",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Callable",
              "typedoc": null,
              "nested": [
                {
                  "name": "datetime",
                  "typedoc": "datetime",
                  "nested": [],
                  "union": false
                },
                {
                  "name": "float",
                  "typedoc": "float",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "distrib: Callable[datetime, float] | None = None"
      },
      {
        "name": "tzinfo",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "tzinfo",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "tzinfo: tzinfo | None = None"
      }
    ],
    "doc": "<p>Returns a generator yielding tuples of <code>(&lt;datetime&gt;, &lt;value&gt;)</code>.</p>\n<p>The data points will start at <code>start_date</code>, and be at every time interval specified by <code>precision</code>.</p>\n<p>:param start_date: A <code>DateParseType</code>. Defaults to <code>\"-30d\"</code> :param end_date: A <code>DateParseType</code>. Defaults to <code>\"now\"</code> :param precision: A float representing the time interval between data points. Defaults to 1/30th of the time :param distrib: A callable that accepts a datetime object and returns a value. Defaults to a uniform distribution :param tzinfo: timezone, instance of datetime.tzinfo subclass</p>\n<p>:sample:</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Time%20Series"
  },
  {
    "name": "Timezone",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>:sample:</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Timezone"
  },
  {
    "name": "Tld",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Tld"
  },
  {
    "name": "Tsv",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "header",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Sequence",
              "typedoc": "list",
              "nested": [
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "header: Sequence[str] | None = None"
      },
      {
        "name": "data_columns",
        "type": {
          "name": "Tuple",
          "typedoc": "tuple",
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": false
        },
        "defaultValue": "('{{name}}', '{{address}}')",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "data_columns: Tuple[str, str] = ('{{name}}', '{{address}}')"
      },
      {
        "name": "num_rows",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "10",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "num_rows: int = 10"
      },
      {
        "name": "include_row_ids",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "include_row_ids: bool = False"
      }
    ],
    "doc": "<p>Generate random tab-separated values.</p>\n<p>For more information on the different arguments of this method, please refer to :meth:<span class=\"name\">dsv() &lt;faker.providers.misc.Provider.dsv&gt;</span> which is used under the hood.</p>\n<p>:sample: data_columns=('{{name}}', '{{address}}'), num_rows=10, include_row_ids=False :sample: header=('Name', 'Address', 'Favorite Color'), data_columns=('{{name}}', '{{address}}', '{{safe_color_name}}'), num_rows=10, include_row_ids=True</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Tsv"
  },
  {
    "name": "Unix Device",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "prefix",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "prefix: str | None = None"
      }
    ],
    "doc": "<p>Generate a Unix device file name.</p>\n<p>If <code>prefix</code> is <code>None</code>, a random prefix will be used. The list of valid prefixes include: <code>'sd'</code>, <code>'vd'</code>, and <code>'xvd'</code>.</p>\n<p>:sample: :sample: prefix='mmcblk'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Unix%20Device"
  },
  {
    "name": "Unix Partition",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "prefix",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "prefix: str | None = None"
      }
    ],
    "doc": "<p>Generate a Unix partition name.</p>\n<p>This method uses |unix_device| under the hood to create a device file name with the specified <code>prefix</code>.</p>\n<p>:sample: :sample: prefix='mmcblk'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Unix%20Partition"
  },
  {
    "name": "Unix Time",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "end_datetime",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "date",
              "typedoc": "date",
              "nested": [],
              "union": false
            },
            {
              "name": "datetime",
              "typedoc": "datetime",
              "nested": [],
              "union": false
            },
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "end_datetime: date | datetime | timedelta | str | int | None = None"
      },
      {
        "name": "start_datetime",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "date",
              "typedoc": "date",
              "nested": [],
              "union": false
            },
            {
              "name": "datetime",
              "typedoc": "datetime",
              "nested": [],
              "union": false
            },
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "start_datetime: date | datetime | timedelta | str | int | None = None"
      }
    ],
    "doc": "<p>Get a timestamp between January 1, 1970 and now, unless passed explicit <code>start_datetime</code> or <span class=\"name\">end_datetime</span> values.</p>\n<p>On Windows, the decimal part is always 0.</p>\n<p>:param end_datetime: A <code>DateParseType</code>. Defaults to the UNIX epoch :param start_datetime: A <code>DateParseType</code>. Defaults to the current date and time</p>\n<p>:sample:</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Unix%20Time"
  },
  {
    "name": "Upc A",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "upc_ae_mode",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "upc_ae_mode: bool = False"
      },
      {
        "name": "base",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "base: str | None = None"
      },
      {
        "name": "number_system_digit",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "number_system_digit: int | None = None"
      }
    ],
    "doc": "<p>Generate a 12-digit UPC-A barcode.</p>\n<p>The value of <code>upc_ae_mode</code> controls how barcodes will be generated. If <code>False</code> (default), barcodes are not guaranteed to have a UPC-E equivalent. In this mode, the method uses |EnUsBarcodeProvider.ean13| under the hood, and the values of <code>base</code> and <code>number_system_digit</code> will be ignored.</p>\n<p>If <code>upc_ae_mode</code> is <code>True</code>, the resulting barcodes are guaranteed to have a UPC-E equivalent, and the values of <code>base</code> and <code>number_system_digit</code> will be used to control what is generated.</p>\n<p>Under this mode, <code>base</code> is expected to have a 6-digit string value. If any other value is supplied, a random 6-digit string will be used instead. As for <code>number_system_digit</code>, the expected value is a <code>0</code> or a <code>1</code>. If any other value is provided, this method will randomly choose from the two.</p>\n<p>.. important:: When <code>upc_ae_mode</code> is enabled, you might encounter instances where different values of <code>base</code> (e.g. <code>'120003'</code> and <code>'120004'</code>) produce the same UPC-A barcode. This is normal, and the reason lies within the whole conversion process. To learn more about this and what <code>base</code> and <code>number_system_digit</code> actually represent, please refer to |EnUsBarcodeProvider.upc_e|.</p>\n<p>:sample: :sample: upc_ae_mode=True, number_system_digit=0 :sample: upc_ae_mode=True, number_system_digit=1 :sample: upc_ae_mode=True, base='123456', number_system_digit=0 :sample: upc_ae_mode=True, base='120003', number_system_digit=0 :sample: upc_ae_mode=True, base='120004', number_system_digit=0</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Upc%20A"
  },
  {
    "name": "Upc E",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "base",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "base: str | None = None"
      },
      {
        "name": "number_system_digit",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "number_system_digit: int | None = None"
      },
      {
        "name": "safe_mode",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "safe_mode: bool = True"
      }
    ],
    "doc": "<p>Generate an 8-digit UPC-E barcode.</p>\n<p>UPC-E barcodes can be expressed in 6, 7, or 8-digit formats, but this method uses the 8 digit format, since it is trivial to convert to the other two formats. The first digit (starting from the left) is controlled by <code>number_system_digit</code>, and it can only be a <code>0</code> or a <code>1</code>. The last digit is the check digit that is inherited from the UPC-E barcode's UPC-A equivalent. The middle six digits are collectively referred to as the <code>base</code> (for a lack of a better term).</p>\n<p>On that note, this method uses <code>base</code> and <code>number_system_digit</code> to first generate a UPC-A barcode for the check digit, and what happens next depends on the value of <code>safe_mode</code>. The argument <code>safe_mode</code> exists, because there are some UPC-E values that share the same UPC-A equivalent. For example, any UPC-E barcode of the form <code>abc0000d</code>, <code>abc0003d</code>, and <code>abc0004d</code> share the same UPC-A value <code>abc00000000d</code>, but that UPC-A value will only convert to <code>abc0000d</code> because of (a) how UPC-E is just a zero-suppressed version of UPC-A and (b) the rules around the conversion.</p>\n<p>If <code>safe_mode</code> is <code>True</code> (default), this method performs another set of conversions to guarantee that the UPC-E barcodes generated can be converted to UPC-A, and that UPC-A barcode can be converted back to the original UPC-E barcode. Using the example above, even if the bases <code>120003</code> or <code>120004</code> are used, the resulting UPC-E barcode will always use the base <code>120000</code>.</p>\n<p>If <code>safe_mode</code> is <code>False</code>, then the <code>number_system_digit</code>, <code>base</code>, and the computed check digit will just be concatenated together to produce the UPC-E barcode, and attempting to convert the barcode to UPC-A and back again to UPC-E will exhibit the behavior described above.</p>\n<p>:sample: :sample: base='123456' :sample: base='123456', number_system_digit=0 :sample: base='123456', number_system_digit=1 :sample: base='120000', number_system_digit=0 :sample: base='120003', number_system_digit=0 :sample: base='120004', number_system_digit=0 :sample: base='120000', number_system_digit=0, safe_mode=False :sample: base='120003', number_system_digit=0, safe_mode=False :sample: base='120004', number_system_digit=0, safe_mode=False</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Upc%20E"
  },
  {
    "name": "Uri",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "schemes",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "List",
              "typedoc": "list",
              "nested": [
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "schemes: List[str] | None = None"
      },
      {
        "name": "deep",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "deep: int | None = None"
      }
    ],
    "doc": "<p>:param schemes: a list of strings to use as schemes, one will chosen randomly. If None, it will generate http and https uris. Passing an empty list will result in schemeless uri generation like \"://domain.com/index.html\". :param deep: an integer specifying how many path components the URI should have.. :return: a random url string.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Uri"
  },
  {
    "name": "Uri Extension",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Uri%20Extension"
  },
  {
    "name": "Uri Page",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Uri%20Page"
  },
  {
    "name": "Uri Path",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "deep",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "deep: int | None = None"
      }
    ],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Uri%20Path"
  },
  {
    "name": "Url",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "schemes",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "List",
              "typedoc": "list",
              "nested": [
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "schemes: List[str] | None = None"
      }
    ],
    "doc": "<p>:param schemes: a list of strings to use as schemes, one will chosen randomly. If None, it will generate http and https urls. Passing an empty list will result in schemeless url generation like \"://domain.com\". :return: a random url string.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Url"
  },
  {
    "name": "User Agent",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a random web browser user agent string.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#User%20Agent"
  },
  {
    "name": "User Name",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#User%20Name"
  },
  {
    "name": "Uuid 4",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "cast_to",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Callable",
              "typedoc": null,
              "nested": [
                {
                  "name": "UUID",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                },
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "Callable",
              "typedoc": null,
              "nested": [
                {
                  "name": "UUID",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                },
                {
                  "name": "bytes",
                  "typedoc": "bytes",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "<class 'str'>",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "cast_to: Callable[UUID, str] | Callable[UUID, bytes] | None = <class 'str'>"
      }
    ],
    "doc": "<p>Generate a random UUID4 object and cast it to another type if specified using a callable <code>cast_to</code>.</p>\n<p>By default, <code>cast_to</code> is set to <code>str</code>.</p>\n<p>May be called with <code>cast_to=None</code> to return a full-fledged <code>UUID</code>.</p>\n<p>:sample: :sample: cast_to=None</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Uuid%204"
  },
  {
    "name": "Vin",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate vin number.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Vin"
  },
  {
    "name": "Windows Platform Token",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>Generate a Windows platform token used in user agent strings.</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Windows%20Platform%20Token"
  },
  {
    "name": "Word",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "part_of_speech",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "part_of_speech: str | None = None"
      },
      {
        "name": "ext_word_list",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "Sequence",
              "typedoc": "list",
              "nested": [
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ext_word_list: Sequence[str] | None = None"
      }
    ],
    "doc": "<p>Generate a word.</p>\n<p>This method uses |words| under the hood with the <code>nb</code> argument set to <code>1</code> to generate the result.</p>\n<p>:sample: :sample: ext_word_list=['abc', 'def', 'ghi', 'jkl']</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Word"
  },
  {
    "name": "Words",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "nb",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "3",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "nb: int = 3"
      },
      {
        "name": "ext_word_list",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "List",
              "typedoc": "list",
              "nested": [
                {
                  "name": "str",
                  "typedoc": "string",
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ext_word_list: List[str] | None = None"
      },
      {
        "name": "part_of_speech",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "part_of_speech: str | None = None"
      },
      {
        "name": "unique",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "unique: bool = False"
      }
    ],
    "doc": "<p>Generate a tuple of words.</p>\n<p>The <code>nb</code> argument controls the number of words in the resulting list, and if <code>ext_word_list</code> is provided, words from that list will be used instead of those from the locale provider's built-in word list.</p>\n<p>if <code>word_list</code> is not provided, the method will use a default value of None, which will result in the method calling the <code>get_words_list</code> method to get the word list. If <code>word_list</code> is provided, the method will use the provided list.</p>\n<p>If <code>unique</code> is <code>True</code>, this method will return a list containing unique words. Under the hood, |random_sample| will be used for sampling without replacement. If <code>unique</code> is <code>False</code>, |random_choices| is used instead, and the list returned may contain duplicates.</p>\n<p>:sample: :sample: nb=5 :sample: nb=5, ext_word_list=['abc', 'def', 'ghi', 'jkl'] :sample: nb=4, ext_word_list=['abc', 'def', 'ghi', 'jkl'], unique=True</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Words"
  },
  {
    "name": "Xml",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "nb_elements",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "10",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "nb_elements: int = 10"
      },
      {
        "name": "variable_nb_elements",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "variable_nb_elements: bool = True"
      },
      {
        "name": "value_types",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "List",
              "typedoc": "list",
              "nested": [
                {
                  "name": "Type",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "Tuple",
              "typedoc": "tuple",
              "nested": [
                {
                  "name": "Type",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                },
                {
                  "name": "...",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "value_types: List[Type] | Tuple[Type, ...] | None = None"
      },
      {
        "name": "allowed_types",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "List",
              "typedoc": "list",
              "nested": [
                {
                  "name": "Type",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "Tuple",
              "typedoc": "tuple",
              "nested": [
                {
                  "name": "Type",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                },
                {
                  "name": "...",
                  "typedoc": null,
                  "nested": [],
                  "union": false
                }
              ],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "allowed_types: List[Type] | Tuple[Type, ...] | None = None"
      }
    ],
    "doc": "<p>Returns some XML.</p>\n<p>:nb_elements: number of elements for dictionary :variable_nb_elements: is use variable number of elements for dictionary :value_types: type of dictionary values</p>\n<p>Note: this provider required xmltodict library installed</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Xml"
  },
  {
    "name": "Year",
    "library": "FakerLibrary",
    "args": [],
    "doc": "<p>:sample:</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Year"
  },
  {
    "name": "Zip",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "uncompressed_size",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "65536",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "uncompressed_size: int = 65536"
      },
      {
        "name": "num_files",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "1",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "num_files: int = 1"
      },
      {
        "name": "min_file_size",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": "4096",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "min_file_size: int = 4096"
      },
      {
        "name": "compression",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "compression: str | None = None"
      }
    ],
    "doc": "<p>Generate a bytes object containing a random valid zip archive file.</p>\n<p>The number and sizes of files contained inside the resulting archive can be controlled using the following arguments:</p>\n<ul>\n<li><code>uncompressed_size</code> - the total size of files before compression, 16 KiB by default</li>\n<li><code>num_files</code> - the number of files archived in resulting zip file, 1 by default</li>\n<li><code>min_file_size</code> - the minimum size of each file before compression, 4 KiB by default</li>\n</ul>\n<p>No compression is used by default, but setting <code>compression</code> to one of the values listed below will use the corresponding compression type.</p>\n<ul>\n<li><code>'bzip2'</code> or <code>'bz2'</code> for BZIP2</li>\n<li><code>'lzma'</code> or <code>'xz'</code> for LZMA</li>\n<li><code>'deflate'</code>, <code>'gzip'</code>, or <code>'gz'</code> for GZIP</li>\n</ul>\n<p>:sample: uncompressed_size=256, num_files=4, min_file_size=32 :sample: uncompressed_size=256, num_files=32, min_file_size=4, compression='bz2'</p>",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Zip"
  },
  {
    "name": "Zipcode",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Zipcode"
  },
  {
    "name": "Zipcode In State",
    "library": "FakerLibrary",
    "args": [
      {
        "name": "state_abbr",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "state_abbr: str | None = None"
      }
    ],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Zipcode%20In%20State"
  },
  {
    "name": "Zipcode Plus4",
    "library": "FakerLibrary",
    "args": [],
    "doc": "",
    "url": "https://marketsquare.github.io/robotframework-faker/FakerLibrary.html#Zipcode%20Plus4"
  },
  {
    "name": "Append To Environment Variable",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "values",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*values"
      },
      {
        "name": "separator",
        "type": null,
        "defaultValue": ";",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "separator=;"
      }
    ],
    "doc": "<p>Appends given <code>values</code> to environment variable <code>name</code>.</p>\n<p>If the environment variable already exists, values are added after it, and otherwise a new environment variable is created.</p>\n<p>Values are, by default, joined together using the operating system path separator (<code>;</code> on Windows, <code>:</code> elsewhere). This can be changed by giving a separator after the values like <code>separator=value</code>.</p>\n<p>Examples (assuming <code>NAME</code> and <code>NAME2</code> do not exist initially):</p>\n<table border=\"1\">\n<tr>\n<td>Append To Environment Variable</td>\n<td>NAME</td>\n<td>first</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>%{NAME}</td>\n<td>first</td>\n<td></td>\n</tr>\n<tr>\n<td>Append To Environment Variable</td>\n<td>NAME</td>\n<td>second</td>\n<td>third</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>%{NAME}</td>\n<td>first${:}second${:}third</td>\n<td></td>\n</tr>\n<tr>\n<td>Append To Environment Variable</td>\n<td>NAME2</td>\n<td>first</td>\n<td>separator=-</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>%{NAME2}</td>\n<td>first</td>\n<td></td>\n</tr>\n<tr>\n<td>Append To Environment Variable</td>\n<td>NAME2</td>\n<td>second</td>\n<td>separator=-</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>%{NAME2}</td>\n<td>first-second</td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Append%20To%20Environment%20Variable"
  },
  {
    "name": "Append To File",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      },
      {
        "name": "content",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "content"
      },
      {
        "name": "encoding",
        "type": null,
        "defaultValue": "UTF-8",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "encoding=UTF-8"
      }
    ],
    "doc": "<p>Appends the given content to the specified file.</p>\n<p>If the file exists, the given text is written to its end. If the file does not exist, it is created.</p>\n<p>Other than not overwriting possible existing files, this keyword works exactly like <a href=\"#Create%20File\" class=\"name\">Create File</a>. See its documentation for more details about the usage.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Append%20To%20File"
  },
  {
    "name": "Copy Directory",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "destination",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "destination"
      }
    ],
    "doc": "<p>Copies the source directory into the destination.</p>\n<p>If the destination exists, the source is copied under it. Otherwise the destination directory and the possible missing intermediate directories are created.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Copy%20Directory"
  },
  {
    "name": "Copy File",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "destination",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "destination"
      }
    ],
    "doc": "<p>Copies the source file into the destination.</p>\n<p>Source must be a path to an existing file or a glob pattern (see <a href=\"#Glob%20patterns\" class=\"name\">Glob patterns</a>) that matches exactly one file. How the destination is interpreted is explained below.</p>\n<p>1) If the destination is an existing file, the source file is copied over it.</p>\n<p>2) If the destination is an existing directory, the source file is copied into it. A possible file with the same name as the source is overwritten.</p>\n<p>3) If the destination does not exist and it ends with a path separator (<code>/</code> or <code>\\</code>), it is considered a directory. That directory is created and a source file copied into it. Possible missing intermediate directories are also created.</p>\n<p>4) If the destination does not exist and it does not end with a path separator, it is considered a file. If the path to the file does not exist, it is created.</p>\n<p>The resulting destination path is returned.</p>\n<p>See also <a href=\"#Copy%20Files\" class=\"name\">Copy Files</a>, <a href=\"#Move%20File\" class=\"name\">Move File</a>, and <a href=\"#Move%20Files\" class=\"name\">Move Files</a>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Copy%20File"
  },
  {
    "name": "Copy Files",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "sources_and_destination",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*sources_and_destination"
      }
    ],
    "doc": "<p>Copies specified files to the target directory.</p>\n<p>Source files can be given as exact paths and as glob patterns (see <a href=\"#Glob%20patterns\" class=\"name\">Glob patterns</a>). At least one source must be given, but it is not an error if it is a pattern that does not match anything.</p>\n<p>Last argument must be the destination directory. If the destination does not exist, it will be created.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Copy Files</td>\n<td>${dir}/file1.txt</td>\n<td>${dir}/file2.txt</td>\n<td>${dir2}</td>\n</tr>\n<tr>\n<td>Copy Files</td>\n<td>${dir}/file-*.txt</td>\n<td>${dir2}</td>\n<td></td>\n</tr>\n</table>\n<p>See also <a href=\"#Copy%20File\" class=\"name\">Copy File</a>, <a href=\"#Move%20File\" class=\"name\">Move File</a>, and <a href=\"#Move%20Files\" class=\"name\">Move Files</a>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Copy%20Files"
  },
  {
    "name": "Count Directories In Directory",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      },
      {
        "name": "pattern",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "pattern=None"
      }
    ],
    "doc": "<p>Wrapper for <a href=\"#Count%20Items%20In%20Directory\" class=\"name\">Count Items In Directory</a> returning only directory count.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Count%20Directories%20In%20Directory"
  },
  {
    "name": "Count Files In Directory",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      },
      {
        "name": "pattern",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "pattern=None"
      }
    ],
    "doc": "<p>Wrapper for <a href=\"#Count%20Items%20In%20Directory\" class=\"name\">Count Items In Directory</a> returning only file count.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Count%20Files%20In%20Directory"
  },
  {
    "name": "Count Items In Directory",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      },
      {
        "name": "pattern",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "pattern=None"
      }
    ],
    "doc": "<p>Returns and logs the number of all items in the given directory.</p>\n<p>The argument <code>pattern</code> has the same semantics as with <a href=\"#List%20Directory\" class=\"name\">List Directory</a> keyword. The count is returned as an integer, so it must be checked e.g. with the built-in keyword <span class=\"name\">Should Be Equal As Integers</span>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Count%20Items%20In%20Directory"
  },
  {
    "name": "Create Binary File",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      },
      {
        "name": "content",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "content"
      }
    ],
    "doc": "<p>Creates a binary file with the given content.</p>\n<p>If content is given as a Unicode string, it is first converted to bytes character by character. All characters with ordinal below 256 can be used and are converted to bytes with same values. Using characters with higher ordinal is an error.</p>\n<p>Byte strings, and possible other types, are written to the file as is.</p>\n<p>If the directory for the file does not exist, it is created, along with missing intermediate directories.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Create Binary File</td>\n<td>${dir}/example.png</td>\n<td>${image content}</td>\n</tr>\n<tr>\n<td>Create Binary File</td>\n<td>${path}</td>\n<td>\\x01\\x00\\xe4\\x00</td>\n</tr>\n</table>\n<p>Use <a href=\"#Create%20File\" class=\"name\">Create File</a> if you want to create a text file using a certain encoding. <a href=\"#File%20Should%20Not%20Exist\" class=\"name\">File Should Not Exist</a> can be used to avoid overwriting existing files.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Create%20Binary%20File"
  },
  {
    "name": "Create Directory",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      }
    ],
    "doc": "<p>Creates the specified directory.</p>\n<p>Also possible intermediate directories are created. Passes if the directory already exists, but fails if the path exists and is not a directory.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Create%20Directory"
  },
  {
    "name": "Create File",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      },
      {
        "name": "content",
        "type": null,
        "defaultValue": "",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "content="
      },
      {
        "name": "encoding",
        "type": null,
        "defaultValue": "UTF-8",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "encoding=UTF-8"
      }
    ],
    "doc": "<p>Creates a file with the given content and encoding.</p>\n<p>If the directory where the file is created does not exist, it is automatically created along with possible missing intermediate directories. Possible existing file is overwritten.</p>\n<p>On Windows newline characters (<code>\\n</code>) in content are automatically converted to Windows native newline sequence (<code>\\r\\n</code>).</p>\n<p>See <a href=\"#Get%20File\" class=\"name\">Get File</a> for more information about possible <code>encoding</code> values, including special values <code>SYSTEM</code> and <code>CONSOLE</code>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Create File</td>\n<td>${dir}/example.txt</td>\n<td>Hello, world!</td>\n<td></td>\n</tr>\n<tr>\n<td>Create File</td>\n<td>${path}</td>\n<td>Hyv\\xe4 esimerkki</td>\n<td>Latin-1</td>\n</tr>\n<tr>\n<td>Create File</td>\n<td>/tmp/foo.txt</td>\n<td>3\\nlines\\nhere\\n</td>\n<td>SYSTEM</td>\n</tr>\n</table>\n<p>Use <a href=\"#Append%20To%20File\" class=\"name\">Append To File</a> if you want to append to an existing file and <a href=\"#Create%20Binary%20File\" class=\"name\">Create Binary File</a> if you need to write bytes without encoding. <a href=\"#File%20Should%20Not%20Exist\" class=\"name\">File Should Not Exist</a> can be used to avoid overwriting existing files.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Create%20File"
  },
  {
    "name": "Directory Should Be Empty",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      }
    ],
    "doc": "<p>Fails unless the specified directory is empty.</p>\n<p>The default error message can be overridden with the <code>msg</code> argument.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Directory%20Should%20Be%20Empty"
  },
  {
    "name": "Directory Should Exist",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      }
    ],
    "doc": "<p>Fails unless the given path points to an existing directory.</p>\n<p>The path can be given as an exact path or as a glob pattern. See the <a href=\"#Glob%20patterns\" class=\"name\">Glob patterns</a> section for details about the supported syntax.</p>\n<p>The default error message can be overridden with the <code>msg</code> argument.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Directory%20Should%20Exist"
  },
  {
    "name": "Directory Should Not Be Empty",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      }
    ],
    "doc": "<p>Fails if the specified directory is empty.</p>\n<p>The default error message can be overridden with the <code>msg</code> argument.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Directory%20Should%20Not%20Be%20Empty"
  },
  {
    "name": "Directory Should Not Exist",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      }
    ],
    "doc": "<p>Fails if the given path points to an existing file.</p>\n<p>The path can be given as an exact path or as a glob pattern. See the <a href=\"#Glob%20patterns\" class=\"name\">Glob patterns</a> section for details about the supported syntax.</p>\n<p>The default error message can be overridden with the <code>msg</code> argument.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Directory%20Should%20Not%20Exist"
  },
  {
    "name": "Empty Directory",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      }
    ],
    "doc": "<p>Deletes all the content from the given directory.</p>\n<p>Deletes both files and sub-directories, but the specified directory itself if not removed. Use <a href=\"#Remove%20Directory\" class=\"name\">Remove Directory</a> if you want to remove the whole directory.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Empty%20Directory"
  },
  {
    "name": "Environment Variable Should Be Set",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      }
    ],
    "doc": "<p>Fails if the specified environment variable is not set.</p>\n<p>The default error message can be overridden with the <code>msg</code> argument.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Environment%20Variable%20Should%20Be%20Set"
  },
  {
    "name": "Environment Variable Should Not Be Set",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      }
    ],
    "doc": "<p>Fails if the specified environment variable is set.</p>\n<p>The default error message can be overridden with the <code>msg</code> argument.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Environment%20Variable%20Should%20Not%20Be%20Set"
  },
  {
    "name": "File Should Be Empty",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      }
    ],
    "doc": "<p>Fails unless the specified file is empty.</p>\n<p>The default error message can be overridden with the <code>msg</code> argument.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#File%20Should%20Be%20Empty"
  },
  {
    "name": "File Should Exist",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      }
    ],
    "doc": "<p>Fails unless the given <code>path</code> points to an existing file.</p>\n<p>The path can be given as an exact path or as a glob pattern. See the <a href=\"#Glob%20patterns\" class=\"name\">Glob patterns</a> section for details about the supported syntax.</p>\n<p>The default error message can be overridden with the <code>msg</code> argument.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#File%20Should%20Exist"
  },
  {
    "name": "File Should Not Be Empty",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      }
    ],
    "doc": "<p>Fails if the specified file is empty.</p>\n<p>The default error message can be overridden with the <code>msg</code> argument.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#File%20Should%20Not%20Be%20Empty"
  },
  {
    "name": "File Should Not Exist",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      }
    ],
    "doc": "<p>Fails if the given path points to an existing file.</p>\n<p>The path can be given as an exact path or as a glob pattern. See the <a href=\"#Glob%20patterns\" class=\"name\">Glob patterns</a> section for details about the supported syntax.</p>\n<p>The default error message can be overridden with the <code>msg</code> argument.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#File%20Should%20Not%20Exist"
  },
  {
    "name": "Get Binary File",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      }
    ],
    "doc": "<p>Returns the contents of a specified file.</p>\n<p>This keyword reads the specified file and returns the contents as is. See also <a href=\"#Get%20File\" class=\"name\">Get File</a>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Get%20Binary%20File"
  },
  {
    "name": "Get Environment Variable",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "default",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "default=None"
      }
    ],
    "doc": "<p>Returns the value of an environment variable with the given name.</p>\n<p>If no environment variable is found, returns possible default value. If no default value is given, the keyword fails.</p>\n<p>Returned variables are automatically decoded to Unicode using the system encoding.</p>\n<p>Note that you can also access environment variables directly using the variable syntax <code>%{ENV_VAR_NAME}</code>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Get%20Environment%20Variable"
  },
  {
    "name": "Get Environment Variables",
    "library": "OperatingSystem",
    "args": [],
    "doc": "<p>Returns currently available environment variables as a dictionary.</p>\n<p>Both keys and values are decoded to Unicode using the system encoding. Altering the returned dictionary has no effect on the actual environment variables.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Get%20Environment%20Variables"
  },
  {
    "name": "Get File",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      },
      {
        "name": "encoding",
        "type": null,
        "defaultValue": "UTF-8",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "encoding=UTF-8"
      },
      {
        "name": "encoding_errors",
        "type": null,
        "defaultValue": "strict",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "encoding_errors=strict"
      }
    ],
    "doc": "<p>Returns the contents of a specified file.</p>\n<p>This keyword reads the specified file and returns the contents. Line breaks in content are converted to platform independent form. See also <a href=\"#Get%20Binary%20File\" class=\"name\">Get Binary File</a>.</p>\n<p><code>encoding</code> defines the encoding of the file. The default value is <code>UTF-8</code>, which means that UTF-8 and ASCII encoded files are read correctly. In addition to the encodings supported by the underlying Python implementation, the following special encoding values can be used:</p>\n<ul>\n<li><code>SYSTEM</code>: Use the default system encoding.</li>\n<li><code>CONSOLE</code>: Use the console encoding. Outside Windows this is same as the system encoding.</li>\n</ul>\n<p><code>encoding_errors</code> argument controls what to do if decoding some bytes fails. All values accepted by <code>decode</code> method in Python are valid, but in practice the following values are most useful:</p>\n<ul>\n<li><code>strict</code>: Fail if characters cannot be decoded (default).</li>\n<li><code>ignore</code>: Ignore characters that cannot be decoded.</li>\n<li><code>replace</code>: Replace characters that cannot be decoded with a replacement character.</li>\n</ul>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Get%20File"
  },
  {
    "name": "Get File Size",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      }
    ],
    "doc": "<p>Returns and logs file size as an integer in bytes.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Get%20File%20Size"
  },
  {
    "name": "Get Modified Time",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      },
      {
        "name": "format",
        "type": null,
        "defaultValue": "timestamp",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "format=timestamp"
      }
    ],
    "doc": "<p>Returns the last modification time of a file or directory.</p>\n<p>How time is returned is determined based on the given <code>format</code> string as follows. Note that all checks are case-insensitive. Returned time is also automatically logged.</p>\n<p>1) If <code>format</code> contains the word <code>epoch</code>, the time is returned in seconds after the UNIX epoch. The return value is always an integer.</p>\n<p>2) If <code>format</code> contains any of the words <code>year</code>, <code>month</code>, <code>day</code>, <code>hour</code>, <code>min</code> or <code>sec</code>, only the selected parts are returned. The order of the returned parts is always the one in the previous sentence and the order of the words in <code>format</code> is not significant. The parts are returned as zero-padded strings (e.g. May -&gt; <code>05</code>).</p>\n<p>3) Otherwise, and by default, the time is returned as a timestamp string in the format <code>2006-02-24 15:08:31</code>.</p>\n<p>Examples (when the modified time of <code>${CURDIR}</code> is 2006-03-29 15:06:21):</p>\n<table border=\"1\">\n<tr>\n<td>${time} =</td>\n<td>Get Modified Time</td>\n<td>${CURDIR}</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${secs} =</td>\n<td>Get Modified Time</td>\n<td>${CURDIR}</td>\n<td>epoch</td>\n<td></td>\n</tr>\n<tr>\n<td>${year} =</td>\n<td>Get Modified Time</td>\n<td>${CURDIR}</td>\n<td>return year</td>\n<td></td>\n</tr>\n<tr>\n<td>${y}</td>\n<td>${d} =</td>\n<td>Get Modified Time</td>\n<td>${CURDIR}</td>\n<td>year,day</td>\n</tr>\n<tr>\n<td>@{time} =</td>\n<td>Get Modified Time</td>\n<td>${CURDIR}</td>\n<td>year,month,day,hour,min,sec</td>\n<td></td>\n</tr>\n</table>\n<p>=&gt;</p>\n<ul>\n<li>${time} = '2006-03-29 15:06:21'</li>\n<li>${secs} = 1143637581</li>\n<li>${year} = '2006'</li>\n<li>${y} = '2006' &amp; ${d} = '29'</li>\n<li>@{time} = ['2006', '03', '29', '15', '06', '21']</li>\n</ul>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Get%20Modified%20Time"
  },
  {
    "name": "Grep File",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      },
      {
        "name": "pattern",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "pattern"
      },
      {
        "name": "encoding",
        "type": null,
        "defaultValue": "UTF-8",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "encoding=UTF-8"
      },
      {
        "name": "encoding_errors",
        "type": null,
        "defaultValue": "strict",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "encoding_errors=strict"
      },
      {
        "name": "regexp",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "regexp=False"
      }
    ],
    "doc": "<p>Returns the lines of the specified file that match the <code>pattern</code>.</p>\n<p>This keyword reads a file from the file system using the defined <code>path</code>, <code>encoding</code> and <code>encoding_errors</code> similarly as <a href=\"#Get%20File\" class=\"name\">Get File</a>. A difference is that only the lines that match the given <code>pattern</code> are returned. Lines are returned as a single string concatenated back together with newlines and the number of matched lines is automatically logged. Possible trailing newline is never returned.</p>\n<p>A line matches if it contains the <code>pattern</code> anywhere in it i.e. it does not need to match the pattern fully. There are two supported pattern types:</p>\n<ul>\n<li>By default the pattern is considered a <i>glob</i> pattern where, for example, <code>*</code> and <code>?</code> can be used as wildcards.</li>\n<li>If the <code>regexp</code> argument is given a true value, the pattern is considered to be a <i>regular expression</i>. These patterns are more powerful but also more complicated than glob patterns. They often use the backslash character and it needs to be escaped in Robot Framework date like <span class=\"name\">\\\\</span>.</li>\n</ul>\n<p>For more information about glob and regular expression syntax, see the <a href=\"#Pattern%20matching\" class=\"name\">Pattern matching</a> section. With this keyword matching is always case-sensitive.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${errors} =</td>\n<td>Grep File</td>\n<td>/var/log/myapp.log</td>\n<td>ERROR</td>\n<td></td>\n</tr>\n<tr>\n<td>${ret} =</td>\n<td>Grep File</td>\n<td>${CURDIR}/file.txt</td>\n<td>[Ww]ildc??d ex*ple</td>\n<td></td>\n</tr>\n<tr>\n<td>${ret} =</td>\n<td>Grep File</td>\n<td>${CURDIR}/file.txt</td>\n<td>[Ww]ildc\\\\w+d ex.*ple</td>\n<td>regexp=True</td>\n</tr>\n</table>\n<p>Special encoding values <code>SYSTEM</code> and <code>CONSOLE</code> that <a href=\"#Get%20File\" class=\"name\">Get File</a> supports are supported by this keyword only with Robot Framework 4.0 and newer.</p>\n<p>Support for regular expressions is new in Robot Framework 5.0.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Grep%20File"
  },
  {
    "name": "Join Path",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "base",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "base"
      },
      {
        "name": "parts",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*parts"
      }
    ],
    "doc": "<p>Joins the given path part(s) to the given base path.</p>\n<p>The path separator (<code>/</code> or <code>\\</code>) is inserted when needed and the possible absolute paths handled as expected. The resulted path is also normalized.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${path} =</td>\n<td>Join Path</td>\n<td>my</td>\n<td>path</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${p2} =</td>\n<td>Join Path</td>\n<td>my/</td>\n<td>path/</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${p3} =</td>\n<td>Join Path</td>\n<td>my</td>\n<td>path</td>\n<td>my</td>\n<td>file.txt</td>\n</tr>\n<tr>\n<td>${p4} =</td>\n<td>Join Path</td>\n<td>my</td>\n<td>/path</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${p5} =</td>\n<td>Join Path</td>\n<td>/my/path/</td>\n<td>..</td>\n<td>path2</td>\n<td></td>\n</tr>\n</table>\n<p>=&gt;</p>\n<ul>\n<li>${path} = 'my/path'</li>\n<li>${p2} = 'my/path'</li>\n<li>${p3} = 'my/path/my/file.txt'</li>\n<li>${p4} = '/path'</li>\n<li>${p5} = '/my/path2'</li>\n</ul>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Join%20Path"
  },
  {
    "name": "Join Paths",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "base",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "base"
      },
      {
        "name": "paths",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*paths"
      }
    ],
    "doc": "<p>Joins given paths with base and returns resulted paths.</p>\n<p>See <a href=\"#Join%20Path\" class=\"name\">Join Path</a> for more information.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>@{p1} =</td>\n<td>Join Paths</td>\n<td>base</td>\n<td>example</td>\n<td>other</td>\n<td></td>\n</tr>\n<tr>\n<td>@{p2} =</td>\n<td>Join Paths</td>\n<td>/my/base</td>\n<td>/example</td>\n<td>other</td>\n<td></td>\n</tr>\n<tr>\n<td>@{p3} =</td>\n<td>Join Paths</td>\n<td>my/base</td>\n<td>example/path/</td>\n<td>other</td>\n<td>one/more</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<ul>\n<li>@{p1} = ['base/example', 'base/other']</li>\n<li>@{p2} = ['/example', '/my/base/other']</li>\n<li>@{p3} = ['my/base/example/path', 'my/base/other', 'my/base/one/more']</li>\n</ul>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Join%20Paths"
  },
  {
    "name": "List Directories In Directory",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      },
      {
        "name": "pattern",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "pattern=None"
      },
      {
        "name": "absolute",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "absolute=False"
      }
    ],
    "doc": "<p>Wrapper for <a href=\"#List%20Directory\" class=\"name\">List Directory</a> that returns only directories.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#List%20Directories%20In%20Directory"
  },
  {
    "name": "List Directory",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      },
      {
        "name": "pattern",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "pattern=None"
      },
      {
        "name": "absolute",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "absolute=False"
      }
    ],
    "doc": "<p>Returns and logs items in a directory, optionally filtered with <code>pattern</code>.</p>\n<p>File and directory names are returned in case-sensitive alphabetical order, e.g. <code>['A Name', 'Second', 'a lower case name', 'one more']</code>. Implicit directories <code>.</code> and <code>..</code> are not returned. The returned items are automatically logged.</p>\n<p>File and directory names are returned relative to the given path (e.g. <code>'file.txt'</code>) by default. If you want them be returned in absolute format (e.g. <code>'/home/robot/file.txt'</code>), give the <code>absolute</code> argument a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>).</p>\n<p>If <code>pattern</code> is given, only items matching it are returned. The pattern is considered to be a <i>glob pattern</i> and the full syntax is explained in the <a href=\"#Glob%20patterns\" class=\"name\">Glob patterns</a> section. With this keyword matching is always case-sensitive.</p>\n<p>Examples (using also other <a href=\"#List%20Directory\" class=\"name\">List Directory</a> variants):</p>\n<table border=\"1\">\n<tr>\n<td>@{items} =</td>\n<td>List Directory</td>\n<td>${TEMPDIR}</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>@{files} =</td>\n<td>List Files In Directory</td>\n<td>/tmp</td>\n<td>*.txt</td>\n<td>absolute</td>\n</tr>\n<tr>\n<td>${count} =</td>\n<td>Count Files In Directory</td>\n<td>${CURDIR}</td>\n<td>???</td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#List%20Directory"
  },
  {
    "name": "List Files In Directory",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      },
      {
        "name": "pattern",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "pattern=None"
      },
      {
        "name": "absolute",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "absolute=False"
      }
    ],
    "doc": "<p>Wrapper for <a href=\"#List%20Directory\" class=\"name\">List Directory</a> that returns only files.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#List%20Files%20In%20Directory"
  },
  {
    "name": "Log Environment Variables",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "level",
        "type": null,
        "defaultValue": "INFO",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "level=INFO"
      }
    ],
    "doc": "<p>Logs all environment variables using the given log level.</p>\n<p>Environment variables are also returned the same way as with <a href=\"#Get%20Environment%20Variables\" class=\"name\">Get Environment Variables</a> keyword.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Log%20Environment%20Variables"
  },
  {
    "name": "Log File",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      },
      {
        "name": "encoding",
        "type": null,
        "defaultValue": "UTF-8",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "encoding=UTF-8"
      },
      {
        "name": "encoding_errors",
        "type": null,
        "defaultValue": "strict",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "encoding_errors=strict"
      }
    ],
    "doc": "<p>Wrapper for <a href=\"#Get%20File\" class=\"name\">Get File</a> that also logs the returned file.</p>\n<p>The file is logged with the INFO level. If you want something else, just use <a href=\"#Get%20File\" class=\"name\">Get File</a> and the built-in keyword <span class=\"name\">Log</span> with the desired level.</p>\n<p>See <a href=\"#Get%20File\" class=\"name\">Get File</a> for more information about <code>encoding</code> and <code>encoding_errors</code> arguments.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Log%20File"
  },
  {
    "name": "Move Directory",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "destination",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "destination"
      }
    ],
    "doc": "<p>Moves the source directory into a destination.</p>\n<p>Uses <a href=\"#Copy%20Directory\" class=\"name\">Copy Directory</a> keyword internally, and <code>source</code> and <code>destination</code> arguments have exactly same semantics as with that keyword.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Move%20Directory"
  },
  {
    "name": "Move File",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "destination",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "destination"
      }
    ],
    "doc": "<p>Moves the source file into the destination.</p>\n<p>Arguments have exactly same semantics as with <a href=\"#Copy%20File\" class=\"name\">Copy File</a> keyword. Destination file path is returned.</p>\n<p>If the source and destination are on the same filesystem, rename operation is used. Otherwise file is copied to the destination filesystem and then removed from the original filesystem.</p>\n<p>See also <a href=\"#Move%20Files\" class=\"name\">Move Files</a>, <a href=\"#Copy%20File\" class=\"name\">Copy File</a>, and <a href=\"#Copy%20Files\" class=\"name\">Copy Files</a>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Move%20File"
  },
  {
    "name": "Move Files",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "sources_and_destination",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*sources_and_destination"
      }
    ],
    "doc": "<p>Moves specified files to the target directory.</p>\n<p>Arguments have exactly same semantics as with <a href=\"#Copy%20Files\" class=\"name\">Copy Files</a> keyword.</p>\n<p>See also <a href=\"#Move%20File\" class=\"name\">Move File</a>, <a href=\"#Copy%20File\" class=\"name\">Copy File</a>, and <a href=\"#Copy%20Files\" class=\"name\">Copy Files</a>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Move%20Files"
  },
  {
    "name": "Normalize Path",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      },
      {
        "name": "case_normalize",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "case_normalize=False"
      }
    ],
    "doc": "<p>Normalizes the given path.</p>\n<ul>\n<li>Collapses redundant separators and up-level references.</li>\n<li>Converts <code>/</code> to <code>\\</code> on Windows.</li>\n<li>Replaces initial <code>~</code> or <code>~user</code> by that user's home directory.</li>\n<li>If <code>case_normalize</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) on Windows, converts the path to all lowercase.</li>\n<li>Converts <code>pathlib.Path</code> instances to <code>str</code>.</li>\n</ul>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${path1} =</td>\n<td>Normalize Path</td>\n<td>abc/</td>\n</tr>\n<tr>\n<td>${path2} =</td>\n<td>Normalize Path</td>\n<td>abc/../def</td>\n</tr>\n<tr>\n<td>${path3} =</td>\n<td>Normalize Path</td>\n<td>abc/./def//ghi</td>\n</tr>\n<tr>\n<td>${path4} =</td>\n<td>Normalize Path</td>\n<td>~robot/stuff</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<ul>\n<li>${path1} = 'abc'</li>\n<li>${path2} = 'def'</li>\n<li>${path3} = 'abc/def/ghi'</li>\n<li>${path4} = '/home/robot/stuff'</li>\n</ul>\n<p>On Windows result would use <code>\\</code> instead of <code>/</code> and home directory would be different.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Normalize%20Path"
  },
  {
    "name": "Remove Directory",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      },
      {
        "name": "recursive",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "recursive=False"
      }
    ],
    "doc": "<p>Removes the directory pointed to by the given <code>path</code>.</p>\n<p>If the second argument <code>recursive</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>), the directory is removed recursively. Otherwise removing fails if the directory is not empty.</p>\n<p>If the directory pointed to by the <code>path</code> does not exist, the keyword passes, but it fails, if the <code>path</code> points to a file.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Remove%20Directory"
  },
  {
    "name": "Remove Environment Variable",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "names",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*names"
      }
    ],
    "doc": "<p>Deletes the specified environment variable.</p>\n<p>Does nothing if the environment variable is not set.</p>\n<p>It is possible to remove multiple variables by passing them to this keyword as separate arguments.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Remove%20Environment%20Variable"
  },
  {
    "name": "Remove File",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      }
    ],
    "doc": "<p>Removes a file with the given path.</p>\n<p>Passes if the file does not exist, but fails if the path does not point to a regular file (e.g. it points to a directory).</p>\n<p>The path can be given as an exact path or as a glob pattern. See the <a href=\"#Glob%20patterns\" class=\"name\">Glob patterns</a> section for details about the supported syntax. If the path is a pattern, all files matching it are removed.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Remove%20File"
  },
  {
    "name": "Remove Files",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "paths",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*paths"
      }
    ],
    "doc": "<p>Uses <a href=\"#Remove%20File\" class=\"name\">Remove File</a> to remove multiple files one-by-one.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Remove Files</td>\n<td>${TEMPDIR}${/}foo.txt</td>\n<td>${TEMPDIR}${/}bar.txt</td>\n<td>${TEMPDIR}${/}zap.txt</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Remove%20Files"
  },
  {
    "name": "Run",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "command",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "command"
      }
    ],
    "doc": "<p>Runs the given command in the system and returns the output.</p>\n<p>The execution status of the command <b>is not checked</b> by this keyword, and it must be done separately based on the returned output. If the execution return code is needed, either <a href=\"#Run%20And%20Return%20Rc\" class=\"name\">Run And Return RC</a> or <a href=\"#Run%20And%20Return%20Rc%20And%20Output\" class=\"name\">Run And Return RC And Output</a> can be used.</p>\n<p>The standard error stream is automatically redirected to the standard output stream by adding <code>2&gt;&amp;1</code> after the executed command. This automatic redirection is done only when the executed command does not contain additional output redirections. You can thus freely forward the standard error somewhere else, for example, like <code>my_command 2&gt;stderr.txt</code>.</p>\n<p>The returned output contains everything written into the standard output or error streams by the command (unless either of them is redirected explicitly). Many commands add an extra newline (<code>\\n</code>) after the output to make it easier to read in the console. To ease processing the returned output, this possible trailing newline is stripped by this keyword.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${output} =</td>\n<td>Run</td>\n<td>ls -lhF /tmp</td>\n</tr>\n<tr>\n<td>Log</td>\n<td>${output}</td>\n<td></td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Run</td>\n<td>${CURDIR}${/}tester.py arg1 arg2</td>\n</tr>\n<tr>\n<td>Should Not Contain</td>\n<td>${result}</td>\n<td>FAIL</td>\n</tr>\n<tr>\n<td>${stdout} =</td>\n<td>Run</td>\n<td>/opt/script.sh 2&gt;/tmp/stderr.txt</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${stdout}</td>\n<td>TEST PASSED</td>\n</tr>\n<tr>\n<td>File Should Be Empty</td>\n<td>/tmp/stderr.txt</td>\n<td></td>\n</tr>\n</table>\n<p><b>TIP:</b> <span class=\"name\">Run Process</span> keyword provided by the <a href=\"http://robotframework.org/robotframework/latest/libraries/Process.html\">Process library</a> supports better process configuration and is generally recommended as a replacement for this keyword.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Run"
  },
  {
    "name": "Run And Return Rc",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "command",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "command"
      }
    ],
    "doc": "<p>Runs the given command in the system and returns the return code.</p>\n<p>The return code (RC) is returned as a positive integer in range from 0 to 255 as returned by the executed command. On some operating systems (notable Windows) original return codes can be something else, but this keyword always maps them to the 0-255 range. Since the RC is an integer, it must be checked e.g. with the keyword <span class=\"name\">Should Be Equal As Integers</span> instead of <span class=\"name\">Should Be Equal</span> (both are built-in keywords).</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${rc} =</td>\n<td>Run and Return RC</td>\n<td>${CURDIR}${/}script.py arg</td>\n</tr>\n<tr>\n<td>Should Be Equal As Integers</td>\n<td>${rc}</td>\n<td>0</td>\n</tr>\n<tr>\n<td>${rc} =</td>\n<td>Run and Return RC</td>\n<td>/path/to/example.rb arg1 arg2</td>\n</tr>\n<tr>\n<td>Should Be True</td>\n<td>0 &lt; ${rc} &lt; 42</td>\n<td></td>\n</tr>\n</table>\n<p>See <a href=\"#Run\" class=\"name\">Run</a> and <a href=\"#Run%20And%20Return%20Rc%20And%20Output\" class=\"name\">Run And Return RC And Output</a> if you need to get the output of the executed command.</p>\n<p><b>TIP:</b> <span class=\"name\">Run Process</span> keyword provided by the <a href=\"http://robotframework.org/robotframework/latest/libraries/Process.html\">Process library</a> supports better process configuration and is generally recommended as a replacement for this keyword.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Run%20And%20Return%20Rc"
  },
  {
    "name": "Run And Return Rc And Output",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "command",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "command"
      }
    ],
    "doc": "<p>Runs the given command in the system and returns the RC and output.</p>\n<p>The return code (RC) is returned similarly as with <a href=\"#Run%20And%20Return%20Rc\" class=\"name\">Run And Return RC</a> and the output similarly as with <a href=\"#Run\" class=\"name\">Run</a>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${rc}</td>\n<td>${output} =</td>\n<td>Run and Return RC and Output</td>\n<td>${CURDIR}${/}mytool</td>\n</tr>\n<tr>\n<td>Should Be Equal As Integers</td>\n<td>${rc}</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Not Contain</td>\n<td>${output}</td>\n<td>FAIL</td>\n<td></td>\n</tr>\n<tr>\n<td>${rc}</td>\n<td>${stdout} =</td>\n<td>Run and Return RC and Output</td>\n<td>/opt/script.sh 2&gt;/tmp/stderr.txt</td>\n</tr>\n<tr>\n<td>Should Be True</td>\n<td>${rc} &gt; 42</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${stdout}</td>\n<td>TEST PASSED</td>\n<td></td>\n</tr>\n<tr>\n<td>File Should Be Empty</td>\n<td>/tmp/stderr.txt</td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p><b>TIP:</b> <span class=\"name\">Run Process</span> keyword provided by the <a href=\"http://robotframework.org/robotframework/latest/libraries/Process.html\">Process library</a> supports better process configuration and is generally recommended as a replacement for this keyword.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Run%20And%20Return%20Rc%20And%20Output"
  },
  {
    "name": "Set Environment Variable",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "value",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "value"
      }
    ],
    "doc": "<p>Sets an environment variable to a specified value.</p>\n<p>Values are converted to strings automatically. Set variables are automatically encoded using the system encoding.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Set%20Environment%20Variable"
  },
  {
    "name": "Set Modified Time",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      },
      {
        "name": "mtime",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "mtime"
      }
    ],
    "doc": "<p>Sets the file modification and access times.</p>\n<p>Changes the modification and access times of the given file to the value determined by <code>mtime</code>. The time can be given in different formats described below. Note that all checks involving strings are case-insensitive. Modified time can only be set to regular files.</p>\n<p>1) If <code>mtime</code> is a number, or a string that can be converted to a number, it is interpreted as seconds since the UNIX epoch (1970-01-01 00:00:00 UTC). This documentation was originally written about 1177654467 seconds after the epoch.</p>\n<p>2) If <code>mtime</code> is a timestamp, that time will be used. Valid timestamp formats are <code>YYYY-MM-DD hh:mm:ss</code> and <code>YYYYMMDD hhmmss</code>.</p>\n<p>3) If <code>mtime</code> is equal to <code>NOW</code>, the current local time is used.</p>\n<p>4) If <code>mtime</code> is equal to <code>UTC</code>, the current time in <a href=\"http://en.wikipedia.org/wiki/Coordinated_Universal_Time\">UTC</a> is used.</p>\n<p>5) If <code>mtime</code> is in the format like <code>NOW - 1 day</code> or <code>UTC + 1 hour 30 min</code>, the current local/UTC time plus/minus the time specified with the time string is used. The time string format is described in an appendix of Robot Framework User Guide.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Set Modified Time</td>\n<td>/path/file</td>\n<td>1177654467</td>\n<td># Time given as epoch seconds</td>\n</tr>\n<tr>\n<td>Set Modified Time</td>\n<td>/path/file</td>\n<td>2007-04-27 9:14:27</td>\n<td># Time given as a timestamp</td>\n</tr>\n<tr>\n<td>Set Modified Time</td>\n<td>/path/file</td>\n<td>NOW</td>\n<td># The local time of execution</td>\n</tr>\n<tr>\n<td>Set Modified Time</td>\n<td>/path/file</td>\n<td>NOW - 1 day</td>\n<td># 1 day subtracted from the local time</td>\n</tr>\n<tr>\n<td>Set Modified Time</td>\n<td>/path/file</td>\n<td>UTC + 1h 2min 3s</td>\n<td># 1h 2min 3s added to the UTC time</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Set%20Modified%20Time"
  },
  {
    "name": "Should Exist",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      }
    ],
    "doc": "<p>Fails unless the given path (file or directory) exists.</p>\n<p>The path can be given as an exact path or as a glob pattern. See the <a href=\"#Glob%20patterns\" class=\"name\">Glob patterns</a> section for details about the supported syntax.</p>\n<p>The default error message can be overridden with the <code>msg</code> argument.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Should%20Exist"
  },
  {
    "name": "Should Not Exist",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      }
    ],
    "doc": "<p>Fails if the given path (file or directory) exists.</p>\n<p>The path can be given as an exact path or as a glob pattern. See the <a href=\"#Glob%20patterns\" class=\"name\">Glob patterns</a> section for details about the supported syntax.</p>\n<p>The default error message can be overridden with the <code>msg</code> argument.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Should%20Not%20Exist"
  },
  {
    "name": "Split Extension",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      }
    ],
    "doc": "<p>Splits the extension from the given path.</p>\n<p>The given path is first normalized (e.g. possible trailing path separators removed, special directories <code>..</code> and <code>.</code> removed). The base path and extension are returned as separate components so that the dot used as an extension separator is removed. If the path contains no extension, an empty string is returned for it. Possible leading and trailing dots in the file name are never considered to be extension separators.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${path}</td>\n<td>${ext} =</td>\n<td>Split Extension</td>\n<td>file.extension</td>\n</tr>\n<tr>\n<td>${p2}</td>\n<td>${e2} =</td>\n<td>Split Extension</td>\n<td>path/file.ext</td>\n</tr>\n<tr>\n<td>${p3}</td>\n<td>${e3} =</td>\n<td>Split Extension</td>\n<td>path/file</td>\n</tr>\n<tr>\n<td>${p4}</td>\n<td>${e4} =</td>\n<td>Split Extension</td>\n<td>p1/../p2/file.ext</td>\n</tr>\n<tr>\n<td>${p5}</td>\n<td>${e5} =</td>\n<td>Split Extension</td>\n<td>path/.file.ext</td>\n</tr>\n<tr>\n<td>${p6}</td>\n<td>${e6} =</td>\n<td>Split Extension</td>\n<td>path/.file</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<ul>\n<li>${path} = 'file' &amp; ${ext} = 'extension'</li>\n<li>${p2} = 'path/file' &amp; ${e2} = 'ext'</li>\n<li>${p3} = 'path/file' &amp; ${e3} = ''</li>\n<li>${p4} = 'p2/file' &amp; ${e4} = 'ext'</li>\n<li>${p5} = 'path/.file' &amp; ${e5} = 'ext'</li>\n<li>${p6} = 'path/.file' &amp; ${e6} = ''</li>\n</ul>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Split%20Extension"
  },
  {
    "name": "Split Path",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      }
    ],
    "doc": "<p>Splits the given path from the last path separator (<code>/</code> or <code>\\</code>).</p>\n<p>The given path is first normalized (e.g. a possible trailing path separator is removed, special directories <code>..</code> and <code>.</code> removed). The parts that are split are returned as separate components.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${path1}</td>\n<td>${dir} =</td>\n<td>Split Path</td>\n<td>abc/def</td>\n</tr>\n<tr>\n<td>${path2}</td>\n<td>${file} =</td>\n<td>Split Path</td>\n<td>abc/def/ghi.txt</td>\n</tr>\n<tr>\n<td>${path3}</td>\n<td>${d2}  =</td>\n<td>Split Path</td>\n<td>abc/../def/ghi/</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<ul>\n<li>${path1} = 'abc' &amp; ${dir} = 'def'</li>\n<li>${path2} = 'abc/def' &amp; ${file} = 'ghi.txt'</li>\n<li>${path3} = 'def' &amp; ${d2} = 'ghi'</li>\n</ul>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Split%20Path"
  },
  {
    "name": "Touch",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      }
    ],
    "doc": "<p>Emulates the UNIX touch command.</p>\n<p>Creates a file, if it does not exist. Otherwise changes its access and modification times to the current time.</p>\n<p>Fails if used with the directories or the parent directory of the given file does not exist.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Touch"
  },
  {
    "name": "Wait Until Created",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      },
      {
        "name": "timeout",
        "type": null,
        "defaultValue": "1 minute",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout=1 minute"
      }
    ],
    "doc": "<p>Waits until the given file or directory is created.</p>\n<p>The path can be given as an exact path or as a glob pattern. See the <a href=\"#Glob%20patterns\" class=\"name\">Glob patterns</a> section for details about the supported syntax. If the path is a pattern, the keyword returns when an item matching it is created.</p>\n<p>The optional <code>timeout</code> can be used to control the maximum time of waiting. The timeout is given as a timeout string, e.g. in a format <code>15 seconds</code>, <code>1min 10s</code> or just <code>10</code>. The time string format is described in an appendix of Robot Framework User Guide.</p>\n<p>If the timeout is negative, the keyword is never timed-out. The keyword returns immediately, if the path already exists.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Wait%20Until%20Created"
  },
  {
    "name": "Wait Until Removed",
    "library": "OperatingSystem",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      },
      {
        "name": "timeout",
        "type": null,
        "defaultValue": "1 minute",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout=1 minute"
      }
    ],
    "doc": "<p>Waits until the given file or directory is removed.</p>\n<p>The path can be given as an exact path or as a glob pattern. See the <a href=\"#Glob%20patterns\" class=\"name\">Glob patterns</a> section for details about the supported syntax. If the path is a pattern, the keyword waits until all matching items are removed.</p>\n<p>The optional <code>timeout</code> can be used to control the maximum time of waiting. The timeout is given as a timeout string, e.g. in a format <code>15 seconds</code>, <code>1min 10s</code> or just <code>10</code>. The time string format is described in an appendix of Robot Framework User Guide.</p>\n<p>If the timeout is negative, the keyword is never timed-out. The keyword returns immediately, if the path does not exist in the first place.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/OperatingSystem.html#Wait%20Until%20Removed"
  },
  {
    "name": "Get Process Id",
    "library": "Process",
    "args": [
      {
        "name": "handle",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "handle=None"
      }
    ],
    "doc": "<p>Returns the process ID (pid) of the process as an integer.</p>\n<p>If <code>handle</code> is not given, uses the current <a href=\"#Active%20process\" class=\"name\">active process</a>.</p>\n<p>Starting from Robot Framework 5.0, it is also possible to directly access the <code>pid</code> attribute of the <code>subprocess.Popen</code> object returned by <a href=\"#Start%20Process\" class=\"name\">Start Process</a> like <code>${process.pid}</code>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Process.html#Get%20Process%20Id"
  },
  {
    "name": "Get Process Object",
    "library": "Process",
    "args": [
      {
        "name": "handle",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "handle=None"
      }
    ],
    "doc": "<p>Return the underlying <code>subprocess.Popen</code> object.</p>\n<p>If <code>handle</code> is not given, uses the current <a href=\"#Active%20process\" class=\"name\">active process</a>.</p>\n<p>Starting from Robot Framework 5.0, <a href=\"#Start%20Process\" class=\"name\">Start Process</a> returns the created <code>subprocess.Popen</code> object, not a generic handle, making this keyword mostly redundant.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Process.html#Get%20Process%20Object"
  },
  {
    "name": "Get Process Result",
    "library": "Process",
    "args": [
      {
        "name": "handle",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "handle=None"
      },
      {
        "name": "rc",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "rc=False"
      },
      {
        "name": "stdout",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "stdout=False"
      },
      {
        "name": "stderr",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "stderr=False"
      },
      {
        "name": "stdout_path",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "stdout_path=False"
      },
      {
        "name": "stderr_path",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "stderr_path=False"
      }
    ],
    "doc": "<p>Returns the specified <a href=\"#Result%20object\" class=\"name\">result object</a> or some of its attributes.</p>\n<p>The given <code>handle</code> specifies the process whose results should be returned. If no <code>handle</code> is given, results of the current <a href=\"#Active%20process\" class=\"name\">active process</a> are returned. In either case, the process must have been finishes before this keyword can be used. In practice this means that processes started with <a href=\"#Start%20Process\" class=\"name\">Start Process</a> must be finished either with <a href=\"#Wait%20For%20Process\" class=\"name\">Wait For Process</a> or <a href=\"#Terminate%20Process\" class=\"name\">Terminate Process</a> before using this keyword.</p>\n<p>If no other arguments than the optional <code>handle</code> are given, a whole <a href=\"#Result%20object\" class=\"name\">result object</a> is returned. If one or more of the other arguments are given any true value, only the specified attributes of the <a href=\"#Result%20object\" class=\"name\">result object</a> are returned. These attributes are always returned in the same order as arguments are specified in the keyword signature. See <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a> section for more details about true and false values.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Run Process</td>\n<td>python</td>\n<td>-c</td>\n<td>print('Hello, world!')</td>\n<td>alias=myproc</td>\n<td></td>\n</tr>\n<tr>\n<td># Get result object</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Get Process Result</td>\n<td>myproc</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${result.rc}</td>\n<td>${0}</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${result.stdout}</td>\n<td>Hello, world!</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Empty</td>\n<td>${result.stderr}</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td># Get one attribute</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${stdout} =</td>\n<td>Get Process Result</td>\n<td>myproc</td>\n<td>stdout=true</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${stdout}</td>\n<td>Hello, world!</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td># Multiple attributes</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${stdout}</td>\n<td>${stderr} =</td>\n<td>Get Process Result</td>\n<td>myproc</td>\n<td>stdout=yes</td>\n<td>stderr=yes</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${stdout}</td>\n<td>Hello, world!</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Empty</td>\n<td>${stderr}</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>Although getting results of a previously executed process can be handy in general, the main use case for this keyword is returning results over the remote library interface. The remote interface does not support returning the whole result object, but individual attributes can be returned without problems.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Process.html#Get%20Process%20Result"
  },
  {
    "name": "Is Process Running",
    "library": "Process",
    "args": [
      {
        "name": "handle",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "handle=None"
      }
    ],
    "doc": "<p>Checks is the process running or not.</p>\n<p>If <code>handle</code> is not given, uses the current <a href=\"#Active%20process\" class=\"name\">active process</a>.</p>\n<p>Returns <code>True</code> if the process is still running and <code>False</code> otherwise.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Process.html#Is%20Process%20Running"
  },
  {
    "name": "Join Command Line",
    "library": "Process",
    "args": [
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      }
    ],
    "doc": "<p>Joins arguments into one command line string.</p>\n<p>In resulting command line string arguments are delimited with a space, arguments containing spaces are surrounded with quotes, and possible quotes are escaped with a backslash.</p>\n<p>If this keyword is given only one argument and that is a list-like object, then the values of that list are joined instead.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${cmd} =</td>\n<td>Join Command Line</td>\n<td>--option</td>\n<td>value with spaces</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${cmd}</td>\n<td>--option \"value with spaces\"</td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Process.html#Join%20Command%20Line"
  },
  {
    "name": "Process Should Be Running",
    "library": "Process",
    "args": [
      {
        "name": "handle",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "handle=None"
      },
      {
        "name": "error_message",
        "type": null,
        "defaultValue": "Process is not running.",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "error_message=Process is not running."
      }
    ],
    "doc": "<p>Verifies that the process is running.</p>\n<p>If <code>handle</code> is not given, uses the current <a href=\"#Active%20process\" class=\"name\">active process</a>.</p>\n<p>Fails if the process has stopped.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Process.html#Process%20Should%20Be%20Running"
  },
  {
    "name": "Process Should Be Stopped",
    "library": "Process",
    "args": [
      {
        "name": "handle",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "handle=None"
      },
      {
        "name": "error_message",
        "type": null,
        "defaultValue": "Process is running.",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "error_message=Process is running."
      }
    ],
    "doc": "<p>Verifies that the process is not running.</p>\n<p>If <code>handle</code> is not given, uses the current <a href=\"#Active%20process\" class=\"name\">active process</a>.</p>\n<p>Fails if the process is still running.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Process.html#Process%20Should%20Be%20Stopped"
  },
  {
    "name": "Run Process",
    "library": "Process",
    "args": [
      {
        "name": "command",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "command"
      },
      {
        "name": "arguments",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*arguments"
      },
      {
        "name": "cwd",
        "type": null,
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "cwd=None"
      },
      {
        "name": "shell",
        "type": null,
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "shell=False"
      },
      {
        "name": "stdout",
        "type": null,
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "stdout=None"
      },
      {
        "name": "stderr",
        "type": null,
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "stderr=None"
      },
      {
        "name": "stdin",
        "type": null,
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "stdin=None"
      },
      {
        "name": "output_encoding",
        "type": null,
        "defaultValue": "CONSOLE",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "output_encoding=CONSOLE"
      },
      {
        "name": "alias",
        "type": null,
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "alias=None"
      },
      {
        "name": "timeout",
        "type": null,
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "timeout=None"
      },
      {
        "name": "on_timeout",
        "type": null,
        "defaultValue": "terminate",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "on_timeout=terminate"
      },
      {
        "name": "env",
        "type": null,
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "env=None"
      },
      {
        "name": "env_extra",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_NAMED",
        "required": false,
        "repr": "**env_extra"
      }
    ],
    "doc": "<p>Runs a process and waits for it to complete.</p>\n<p><code>command</code> and <code>arguments</code> specify the command to execute and arguments passed to it. See <a href=\"#Specifying%20command%20and%20arguments\" class=\"name\">Specifying command and arguments</a> for more details.</p>\n<p>The started process can be configured using <code>cwd</code>, <code>shell</code>, <code>stdout</code>, <code>stderr</code>, <code>stdin</code>, <code>output_encoding</code>, <code>alias</code>, <code>env</code> and <code>env_extra</code> parameters that are documented in the <a href=\"#Process%20configuration\" class=\"name\">Process configuration</a> section.</p>\n<p>Configuration related to waiting for processes consists of <code>timeout</code> and <code>on_timeout</code> parameters that have same semantics than with the <a href=\"#Wait%20For%20Process\" class=\"name\">Wait For Process</a> keyword.</p>\n<p>Process outputs are, by default, written into in-memory buffers. This typically works fine, but there can be problems if the amount of output is large or unlimited. To avoid such problems, outputs can be redirected to files using the <code>stdout</code> and <code>stderr</code> configuration parameters. For more information see the <a href=\"#Standard%20output%20and%20error%20streams\" class=\"name\">Standard output and error streams</a> section.</p>\n<p>Returns a <a href=\"#Result%20object\" class=\"name\">result object</a> containing information about the execution.</p>\n<p>Note that possible equal signs in <code>command</code> and <code>arguments</code> must be escaped with a backslash (e.g. <code>name\\=value</code>).</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${result} =</td>\n<td>Run Process</td>\n<td>python</td>\n<td>-c</td>\n<td>print('Hello, world!')</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${result.stdout}</td>\n<td>Hello, world!</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Run Process</td>\n<td>${command}</td>\n<td>stdout=${CURDIR}/stdout.txt</td>\n<td>stderr=STDOUT</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Run Process</td>\n<td>${command}</td>\n<td>timeout=1min</td>\n<td>on_timeout=continue</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Run Process</td>\n<td>java -Dname\\=value Example</td>\n<td>shell=True</td>\n<td>cwd=${EXAMPLE}</td>\n</tr>\n</table>\n<p>This keyword does not change the <a href=\"#Active%20process\" class=\"name\">active process</a>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Process.html#Run%20Process"
  },
  {
    "name": "Send Signal To Process",
    "library": "Process",
    "args": [
      {
        "name": "signal",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "signal"
      },
      {
        "name": "handle",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "handle=None"
      },
      {
        "name": "group",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "group=False"
      }
    ],
    "doc": "<p>Sends the given <code>signal</code> to the specified process.</p>\n<p>If <code>handle</code> is not given, uses the current <a href=\"#Active%20process\" class=\"name\">active process</a>.</p>\n<p>Signal can be specified either as an integer as a signal name. In the latter case it is possible to give the name both with or without <code>SIG</code> prefix, but names are case-sensitive. For example, all the examples below send signal <code>INT (2)</code>:</p>\n<table border=\"1\">\n<tr>\n<td>Send Signal To Process</td>\n<td>2</td>\n<td></td>\n<td># Send to active process</td>\n</tr>\n<tr>\n<td>Send Signal To Process</td>\n<td>INT</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Send Signal To Process</td>\n<td>SIGINT</td>\n<td>myproc</td>\n<td># Send to named process</td>\n</tr>\n</table>\n<p>This keyword is only supported on Unix-like machines, not on Windows. What signals are supported depends on the system. For a list of existing signals on your system, see the Unix man pages related to signal handling (typically <code>man signal</code> or <code>man 7 signal</code>).</p>\n<p>By default sends the signal only to the parent process, not to possible child processes started by it. Notice that when <a href=\"#Running%20processes%20in%20shell\" class=\"name\">running processes in shell</a>, the shell is the parent process and it depends on the system does the shell propagate the signal to the actual started process.</p>\n<p>To send the signal to the whole process group, <code>group</code> argument can be set to any true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>).</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Process.html#Send%20Signal%20To%20Process"
  },
  {
    "name": "Split Command Line",
    "library": "Process",
    "args": [
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "args"
      },
      {
        "name": "escaping",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "escaping=False"
      }
    ],
    "doc": "<p>Splits command line string into a list of arguments.</p>\n<p>String is split from spaces, but argument surrounded in quotes may contain spaces in them.</p>\n<p>If <code>escaping</code> is given a true value, then backslash is treated as an escape character. It can escape unquoted spaces, quotes inside quotes, and so on, but it also requires using doubling backslashes in Windows paths and elsewhere.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>@{cmd} =</td>\n<td>Split Command Line</td>\n<td>--option \"value with spaces\"</td>\n</tr>\n<tr>\n<td>Should Be True</td>\n<td>$cmd == ['--option', 'value with spaces']</td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Process.html#Split%20Command%20Line"
  },
  {
    "name": "Start Process",
    "library": "Process",
    "args": [
      {
        "name": "command",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "command"
      },
      {
        "name": "arguments",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*arguments"
      },
      {
        "name": "cwd",
        "type": null,
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "cwd=None"
      },
      {
        "name": "shell",
        "type": null,
        "defaultValue": "False",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "shell=False"
      },
      {
        "name": "stdout",
        "type": null,
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "stdout=None"
      },
      {
        "name": "stderr",
        "type": null,
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "stderr=None"
      },
      {
        "name": "stdin",
        "type": null,
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "stdin=None"
      },
      {
        "name": "output_encoding",
        "type": null,
        "defaultValue": "CONSOLE",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "output_encoding=CONSOLE"
      },
      {
        "name": "alias",
        "type": null,
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "alias=None"
      },
      {
        "name": "env",
        "type": null,
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "env=None"
      },
      {
        "name": "env_extra",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_NAMED",
        "required": false,
        "repr": "**env_extra"
      }
    ],
    "doc": "<p>Starts a new process on background.</p>\n<p>See <a href=\"#Specifying%20command%20and%20arguments\" class=\"name\">Specifying command and arguments</a> and <a href=\"#Process%20configuration\" class=\"name\">Process configuration</a> sections for more information about the arguments, and <a href=\"#Run%20Process\" class=\"name\">Run Process</a> keyword for related examples. This includes information about redirecting process outputs to avoid process handing due to output buffers getting full.</p>\n<p>Makes the started process new <a href=\"#Active%20process\" class=\"name\">active process</a>. Returns the created <a href=\"https://docs.python.org/3/library/subprocess.html#popen-constructor\">subprocess.Popen</a> object which can be used later to activate this process. <code>Popen</code> attributes like <code>pid</code> can also be accessed directly.</p>\n<p>Processes are started so that they create a new process group. This allows terminating and sending signals to possible child processes.</p>\n<p>Examples:</p>\n<p>Start process and wait for it to end later using an alias:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Start%20Process\" class=\"name\">Start Process</a></td>\n<td>${command}</td>\n<td>alias=example</td>\n</tr>\n<tr>\n<td># Other keywords</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td><a href=\"#Wait%20For%20Process\" class=\"name\">Wait For Process</a></td>\n<td>example</td>\n</tr>\n</table>\n<p>Use returned <code>Popen</code> object:</p>\n<table border=\"1\">\n<tr>\n<td>${process} =</td>\n<td><a href=\"#Start%20Process\" class=\"name\">Start Process</a></td>\n<td>${command}</td>\n</tr>\n<tr>\n<td><span class=\"name\">Log</span></td>\n<td>PID: ${process.pid}</td>\n<td></td>\n</tr>\n<tr>\n<td># Other keywords</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td><a href=\"#Terminate%20Process\" class=\"name\">Terminate Process</a></td>\n<td>${process}</td>\n</tr>\n</table>\n<p>Use started process in a pipeline with another process:</p>\n<table border=\"1\">\n<tr>\n<td>${process} =</td>\n<td><a href=\"#Start%20Process\" class=\"name\">Start Process</a></td>\n<td>python</td>\n<td>-c</td>\n<td>print('Hello, world!')</td>\n<td></td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td><a href=\"#Run%20Process\" class=\"name\">Run Process</a></td>\n<td>python</td>\n<td>-c</td>\n<td>import sys; print(sys.stdin.read().upper().strip())</td>\n<td>stdin=${process.stdout}</td>\n</tr>\n<tr>\n<td><a href=\"#Wait%20For%20Process\" class=\"name\">Wait For Process</a></td>\n<td>${process}</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><span class=\"name\">Should Be Equal</span></td>\n<td>${result.stdout}</td>\n<td>HELLO, WORLD!</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>Returning a <code>subprocess.Popen</code> object is new in Robot Framework 5.0. Earlier versions returned a generic handle and getting the process object required using <a href=\"#Get%20Process%20Object\" class=\"name\">Get Process Object</a> separately.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Process.html#Start%20Process"
  },
  {
    "name": "Switch Process",
    "library": "Process",
    "args": [
      {
        "name": "handle",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "handle"
      }
    ],
    "doc": "<p>Makes the specified process the current <a href=\"#Active%20process\" class=\"name\">active process</a>.</p>\n<p>The handle can be an identifier returned by <a href=\"#Start%20Process\" class=\"name\">Start Process</a> or the <code>alias</code> given to it explicitly.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Start Process</td>\n<td>prog1</td>\n<td>alias=process1</td>\n</tr>\n<tr>\n<td>Start Process</td>\n<td>prog2</td>\n<td>alias=process2</td>\n</tr>\n<tr>\n<td># currently active process is process2</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Switch Process</td>\n<td>process1</td>\n<td></td>\n</tr>\n<tr>\n<td># now active process is process1</td>\n<td></td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Process.html#Switch%20Process"
  },
  {
    "name": "Terminate All Processes",
    "library": "Process",
    "args": [
      {
        "name": "kill",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "kill=False"
      }
    ],
    "doc": "<p>Terminates all still running processes started by this library.</p>\n<p>This keyword can be used in suite teardown or elsewhere to make sure that all processes are stopped,</p>\n<p>Tries to terminate processes gracefully by default, but can be configured to forcefully kill them immediately. See <a href=\"#Terminate%20Process\" class=\"name\">Terminate Process</a> that this keyword uses internally for more details.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Process.html#Terminate%20All%20Processes"
  },
  {
    "name": "Terminate Process",
    "library": "Process",
    "args": [
      {
        "name": "handle",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "handle=None"
      },
      {
        "name": "kill",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "kill=False"
      }
    ],
    "doc": "<p>Stops the process gracefully or forcefully.</p>\n<p>If <code>handle</code> is not given, uses the current <a href=\"#Active%20process\" class=\"name\">active process</a>.</p>\n<p>By default, first tries to stop the process gracefully. If the process does not stop in 30 seconds, or <code>kill</code> argument is given a true value, (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) kills the process forcefully. Stops also all the child processes of the originally started process.</p>\n<p>Waits for the process to stop after terminating it. Returns a <a href=\"#Result%20object\" class=\"name\">result object</a> containing information about the execution similarly as <a href=\"#Wait%20For%20Process\" class=\"name\">Wait For Process</a>.</p>\n<p>On Unix-like machines graceful termination is done using <code>TERM (15)</code> signal and killing using <code>KILL (9)</code>. Use <a href=\"#Send%20Signal%20To%20Process\" class=\"name\">Send Signal To Process</a> instead if you just want to send either of these signals without waiting for the process to stop.</p>\n<p>On Windows graceful termination is done using <code>CTRL_BREAK_EVENT</code> event and killing using Win32 API function <code>TerminateProcess()</code>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${result} =</td>\n<td>Terminate Process</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal As Integers</td>\n<td>${result.rc}</td>\n<td>-15</td>\n<td># On Unixes</td>\n</tr>\n<tr>\n<td>Terminate Process</td>\n<td>myproc</td>\n<td>kill=true</td>\n<td></td>\n</tr>\n</table>\n<p>Limitations:</p>\n<ul>\n<li>On Windows forceful kill only stops the main process, not possible child processes.</li>\n</ul>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Process.html#Terminate%20Process"
  },
  {
    "name": "Wait For Process",
    "library": "Process",
    "args": [
      {
        "name": "handle",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "handle=None"
      },
      {
        "name": "timeout",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout=None"
      },
      {
        "name": "on_timeout",
        "type": null,
        "defaultValue": "continue",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "on_timeout=continue"
      }
    ],
    "doc": "<p>Waits for the process to complete or to reach the given timeout.</p>\n<p>The process to wait for must have been started earlier with <a href=\"#Start%20Process\" class=\"name\">Start Process</a>. If <code>handle</code> is not given, uses the current <a href=\"#Active%20process\" class=\"name\">active process</a>.</p>\n<p><code>timeout</code> defines the maximum time to wait for the process. It can be given in <a href=\"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#time-format\">various time formats</a> supported by Robot Framework, for example, <code>42</code>, <code>42 s</code>, or <code>1 minute 30 seconds</code>. The timeout is ignored if it is Python <code>None</code> (default), string <code>NONE</code> (case-insensitively), zero, or negative.</p>\n<p><code>on_timeout</code> defines what to do if the timeout occurs. Possible values and corresponding actions are explained in the table below. Notice that reaching the timeout never fails the test.</p>\n<table border=\"1\">\n<tr>\n<th>Value</th>\n<th>Action</th>\n</tr>\n<tr>\n<td>continue</td>\n<td>The process is left running (default).</td>\n</tr>\n<tr>\n<td>terminate</td>\n<td>The process is gracefully terminated.</td>\n</tr>\n<tr>\n<td>kill</td>\n<td>The process is forcefully stopped.</td>\n</tr>\n</table>\n<p>See <a href=\"#Terminate%20Process\" class=\"name\">Terminate Process</a> keyword for more details how processes are terminated and killed.</p>\n<p>If the process ends before the timeout, or it is terminated or killed, this keyword returns a <a href=\"#Result%20object\" class=\"name\">result object</a> containing information about the execution. If the process is left running, Python <code>None</code> is returned instead.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td># Process ends cleanly</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Wait For Process</td>\n<td>example</td>\n<td></td>\n</tr>\n<tr>\n<td>Process Should Be Stopped</td>\n<td>example</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal As Integers</td>\n<td>${result.rc}</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td># Process does not end</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Wait For Process</td>\n<td>timeout=42 secs</td>\n<td></td>\n</tr>\n<tr>\n<td>Process Should Be Running</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${result}</td>\n<td>${NONE}</td>\n<td></td>\n</tr>\n<tr>\n<td># Kill non-ending process</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Wait For Process</td>\n<td>timeout=1min 30s</td>\n<td>on_timeout=kill</td>\n</tr>\n<tr>\n<td>Process Should Be Stopped</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal As Integers</td>\n<td>${result.rc}</td>\n<td>-9</td>\n<td></td>\n</tr>\n</table>\n<p>Note: If Robot Framework's test or keyword timeout is exceeded while this keyword is waiting for the process to end, the process is killed to avoid leaving it running on the background. This is new in Robot Framework 7.3.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Process.html#Wait%20For%20Process"
  },
  {
    "name": "Create Client Cert Session",
    "library": "RequestsLibrary",
    "args": [
      {
        "name": "alias",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "alias"
      },
      {
        "name": "url",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "url"
      },
      {
        "name": "headers",
        "type": null,
        "defaultValue": "{}",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "headers={}"
      },
      {
        "name": "cookies",
        "type": null,
        "defaultValue": "{}",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "cookies={}"
      },
      {
        "name": "client_certs",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "client_certs=None"
      },
      {
        "name": "timeout",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout=None"
      },
      {
        "name": "proxies",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "proxies=None"
      },
      {
        "name": "verify",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "verify=False"
      },
      {
        "name": "debug",
        "type": null,
        "defaultValue": "0",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "debug=0"
      },
      {
        "name": "max_retries",
        "type": null,
        "defaultValue": "3",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "max_retries=3"
      },
      {
        "name": "backoff_factor",
        "type": null,
        "defaultValue": "0.1",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "backoff_factor=0.1"
      },
      {
        "name": "disable_warnings",
        "type": null,
        "defaultValue": "0",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "disable_warnings=0"
      },
      {
        "name": "retry_status_list",
        "type": null,
        "defaultValue": "[]",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "retry_status_list=[]"
      },
      {
        "name": "retry_method_list",
        "type": null,
        "defaultValue": "['TRACE', 'GET', 'DELETE', 'HEAD', 'PUT', 'OPTIONS']",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "retry_method_list=['TRACE', 'GET', 'DELETE', 'HEAD', 'PUT', 'OPTIONS']"
      }
    ],
    "doc": "<p>Create Session: create a HTTP session to a server</p>\n<p><code>url</code> Base url of the server</p>\n<p><code>alias</code> Robot Framework alias to identify the session</p>\n<p><code>headers</code> Dictionary of default headers</p>\n<p><code>cookies</code> Dictionary of cookies</p>\n<p><code>client_certs</code> ['client certificate', 'client key'] PEM files containing the client key and certificate</p>\n<p><code>timeout</code> Connection timeout</p>\n<p><code>proxies</code> Dictionary mapping protocol or protocol and host to the URL of the proxy (e.g. {'http': 'foo.bar:3128', '<a href=\"http://host.name\">http://host.name</a>': 'foo.bar:4012'})</p>\n<p><code>verify</code> Whether the SSL cert will be verified. A CA_BUNDLE path can also be provided. Defaults to False.</p>\n<p><code>debug</code> Enable http verbosity option more information <a href=\"https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel\">https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel</a></p>\n<p><code>max_retries</code> Number of maximum retries each connection should attempt. By default it will retry 3 times in case of connection errors only. A 0 value will disable any kind of retries regardless of other retry settings. In case the number of retries is reached a retry exception is raised.</p>\n<p><code>disable_warnings</code> Disable requests warning useful when you have large number of testcases</p>\n<p><code>backoff_factor</code> Introduces a delay time between retries that is longer after each retry. eg. if backoff_factor is set to 0.1 the sleep between attemps will be: 0.0, 0.2, 0.4 More info here: <a href=\"https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html\">https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html</a></p>\n<p><code>retry_method_list</code> List of uppercased HTTP method verbs where retries are allowed. By default retries are allowed only on HTTP requests methods that are considered to be idempotent (multiple requests with the same parameters end with the same state). eg. set to ['POST', 'GET'] to retry only those kind of requests.</p>\n<p><code>retry_status_list</code> List of integer HTTP status codes that, if returned, a retry is attempted. eg. set to [502, 503] to retry requests if those status are returned. Note that max_retries must be greater than 0.</p>",
    "url": "https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html#Create%20Client%20Cert%20Session"
  },
  {
    "name": "Create Custom Session",
    "library": "RequestsLibrary",
    "args": [
      {
        "name": "alias",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "alias"
      },
      {
        "name": "url",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "url"
      },
      {
        "name": "auth",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "auth"
      },
      {
        "name": "headers",
        "type": null,
        "defaultValue": "{}",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "headers={}"
      },
      {
        "name": "cookies",
        "type": null,
        "defaultValue": "{}",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "cookies={}"
      },
      {
        "name": "timeout",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout=None"
      },
      {
        "name": "proxies",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "proxies=None"
      },
      {
        "name": "verify",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "verify=False"
      },
      {
        "name": "debug",
        "type": null,
        "defaultValue": "0",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "debug=0"
      },
      {
        "name": "max_retries",
        "type": null,
        "defaultValue": "3",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "max_retries=3"
      },
      {
        "name": "backoff_factor",
        "type": null,
        "defaultValue": "0.1",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "backoff_factor=0.1"
      },
      {
        "name": "disable_warnings",
        "type": null,
        "defaultValue": "0",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "disable_warnings=0"
      },
      {
        "name": "retry_status_list",
        "type": null,
        "defaultValue": "[]",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "retry_status_list=[]"
      },
      {
        "name": "retry_method_list",
        "type": null,
        "defaultValue": "['TRACE', 'GET', 'DELETE', 'HEAD', 'PUT', 'OPTIONS']",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "retry_method_list=['TRACE', 'GET', 'DELETE', 'HEAD', 'PUT', 'OPTIONS']"
      }
    ],
    "doc": "<p>Create Session: create a HTTP session to a server</p>\n<p><code>url</code> Base url of the server</p>\n<p><code>alias</code> Robot Framework alias to identify the session</p>\n<p><code>headers</code> Dictionary of default headers</p>\n<p><code>cookies</code> Dictionary of cookies</p>\n<p><code>auth</code> A Custom Authentication object to be passed on to the requests library. <a href=\"http://docs.python-requests.org/en/master/user/advanced/#custom-authentication\">http://docs.python-requests.org/en/master/user/advanced/#custom-authentication</a></p>\n<p><code>timeout</code> Connection timeout</p>\n<p><code>proxies</code> Dictionary mapping protocol or protocol and host to the URL of the proxy (e.g. {'http': 'foo.bar:3128', '<a href=\"http://host.name\">http://host.name</a>': 'foo.bar:4012'})</p>\n<p><code>verify</code> Whether the SSL cert will be verified. A CA_BUNDLE path can also be provided. Defaults to False.</p>\n<p><code>debug</code> Enable http verbosity option more information <a href=\"https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel\">https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel</a></p>\n<p><code>max_retries</code> Number of maximum retries each connection should attempt. By default it will retry 3 times in case of connection errors only. A 0 value will disable any kind of retries regardless of other retry settings. In case the number of retries is reached a retry exception is raised.</p>\n<p><code>disable_warnings</code> Disable requests warning useful when you have large number of testcases</p>\n<p><code>backoff_factor</code> Introduces a delay time between retries that is longer after each retry. eg. if backoff_factor is set to 0.1 the sleep between attemps will be: 0.0, 0.2, 0.4 More info here: <a href=\"https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html\">https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html</a></p>\n<p><code>retry_method_list</code> List of uppercased HTTP method verbs where retries are allowed. By default retries are allowed only on HTTP requests methods that are considered to be idempotent (multiple requests with the same parameters end with the same state). eg. set to ['POST', 'GET'] to retry only those kind of requests.</p>\n<p><code>retry_status_list</code> List of integer HTTP status codes that, if returned, a retry is attempted. eg. set to [502, 503] to retry requests if those status are returned. Note that max_retries must be greater than 0.</p>",
    "url": "https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html#Create%20Custom%20Session"
  },
  {
    "name": "Create Digest Session",
    "library": "RequestsLibrary",
    "args": [
      {
        "name": "alias",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "alias"
      },
      {
        "name": "url",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "url"
      },
      {
        "name": "auth",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "auth"
      },
      {
        "name": "headers",
        "type": null,
        "defaultValue": "{}",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "headers={}"
      },
      {
        "name": "cookies",
        "type": null,
        "defaultValue": "{}",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "cookies={}"
      },
      {
        "name": "timeout",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout=None"
      },
      {
        "name": "proxies",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "proxies=None"
      },
      {
        "name": "verify",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "verify=False"
      },
      {
        "name": "debug",
        "type": null,
        "defaultValue": "0",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "debug=0"
      },
      {
        "name": "max_retries",
        "type": null,
        "defaultValue": "3",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "max_retries=3"
      },
      {
        "name": "backoff_factor",
        "type": null,
        "defaultValue": "0.1",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "backoff_factor=0.1"
      },
      {
        "name": "disable_warnings",
        "type": null,
        "defaultValue": "0",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "disable_warnings=0"
      },
      {
        "name": "retry_status_list",
        "type": null,
        "defaultValue": "[]",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "retry_status_list=[]"
      },
      {
        "name": "retry_method_list",
        "type": null,
        "defaultValue": "['TRACE', 'GET', 'DELETE', 'HEAD', 'PUT', 'OPTIONS']",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "retry_method_list=['TRACE', 'GET', 'DELETE', 'HEAD', 'PUT', 'OPTIONS']"
      }
    ],
    "doc": "<p>Create Session: create a HTTP session to a server</p>\n<p><code>url</code> Base url of the server</p>\n<p><code>alias</code> Robot Framework alias to identify the session</p>\n<p><code>headers</code> Dictionary of default headers</p>\n<p><code>cookies</code> Dictionary of cookies</p>\n<p><code>auth</code> ['DOMAIN', 'username', 'password'] for NTLM Authentication</p>\n<p><code>timeout</code> Connection timeout</p>\n<p><code>proxies</code> Dictionary mapping protocol or protocol and host to the URL of the proxy (e.g. {'http': 'foo.bar:3128', '<a href=\"http://host.name\">http://host.name</a>': 'foo.bar:4012'})</p>\n<p><code>verify</code> Whether the SSL cert will be verified. A CA_BUNDLE path can also be provided. Defaults to False.</p>\n<p><code>debug</code> Enable http verbosity option more information <a href=\"https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel\">https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel</a></p>\n<p><code>max_retries</code> Number of maximum retries each connection should attempt. By default it will retry 3 times in case of connection errors only. A 0 value will disable any kind of retries regardless of other retry settings. In case the number of retries is reached a retry exception is raised.</p>\n<p><code>disable_warnings</code> Disable requests warning useful when you have large number of testcases</p>\n<p><code>backoff_factor</code> Introduces a delay time between retries that is longer after each retry. eg. if backoff_factor is set to 0.1 the sleep between attemps will be: 0.0, 0.2, 0.4 More info here: <a href=\"https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html\">https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html</a></p>\n<p><code>retry_method_list</code> List of uppercased HTTP method verbs where retries are allowed. By default retries are allowed only on HTTP requests methods that are considered to be idempotent (multiple requests with the same parameters end with the same state). eg. set to ['POST', 'GET'] to retry only those kind of requests.</p>\n<p><code>retry_status_list</code> List of integer HTTP status codes that, if returned, a retry is attempted. eg. set to [502, 503] to retry requests if those status are returned. Note that max_retries must be greater than 0.</p>",
    "url": "https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html#Create%20Digest%20Session"
  },
  {
    "name": "Create Ntlm Session",
    "library": "RequestsLibrary",
    "args": [
      {
        "name": "alias",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "alias"
      },
      {
        "name": "url",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "url"
      },
      {
        "name": "auth",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "auth"
      },
      {
        "name": "headers",
        "type": null,
        "defaultValue": "{}",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "headers={}"
      },
      {
        "name": "cookies",
        "type": null,
        "defaultValue": "{}",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "cookies={}"
      },
      {
        "name": "timeout",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout=None"
      },
      {
        "name": "proxies",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "proxies=None"
      },
      {
        "name": "verify",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "verify=False"
      },
      {
        "name": "debug",
        "type": null,
        "defaultValue": "0",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "debug=0"
      },
      {
        "name": "max_retries",
        "type": null,
        "defaultValue": "3",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "max_retries=3"
      },
      {
        "name": "backoff_factor",
        "type": null,
        "defaultValue": "0.1",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "backoff_factor=0.1"
      },
      {
        "name": "disable_warnings",
        "type": null,
        "defaultValue": "0",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "disable_warnings=0"
      },
      {
        "name": "retry_status_list",
        "type": null,
        "defaultValue": "[]",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "retry_status_list=[]"
      },
      {
        "name": "retry_method_list",
        "type": null,
        "defaultValue": "['TRACE', 'GET', 'DELETE', 'HEAD', 'PUT', 'OPTIONS']",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "retry_method_list=['TRACE', 'GET', 'DELETE', 'HEAD', 'PUT', 'OPTIONS']"
      }
    ],
    "doc": "<p>Create Session: create a HTTP session to a server</p>\n<p><code>url</code> Base url of the server</p>\n<p><code>alias</code> Robot Framework alias to identify the session</p>\n<p><code>headers</code> Dictionary of default headers</p>\n<p><code>cookies</code> Dictionary of cookies</p>\n<p><code>auth</code> ['DOMAIN', 'username', 'password'] for NTLM Authentication</p>\n<p><code>timeout</code> Connection timeout</p>\n<p><code>proxies</code> Dictionary mapping protocol or protocol and host to the URL of the proxy (e.g. {'http': 'foo.bar:3128', '<a href=\"http://host.name\">http://host.name</a>': 'foo.bar:4012'})</p>\n<p><code>verify</code> Whether the SSL cert will be verified. A CA_BUNDLE path can also be provided. Defaults to False.</p>\n<p><code>debug</code> Enable http verbosity option more information <a href=\"https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel\">https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel</a></p>\n<p><code>max_retries</code> Number of maximum retries each connection should attempt. By default it will retry 3 times in case of connection errors only. A 0 value will disable any kind of retries regardless of other retry settings. In case the number of retries is reached a retry exception is raised.</p>\n<p><code>disable_warnings</code> Disable requests warning useful when you have large number of testcases</p>\n<p><code>backoff_factor</code> Introduces a delay time between retries that is longer after each retry. eg. if backoff_factor is set to 0.1 the sleep between attemps will be: 0.0, 0.2, 0.4 More info here: <a href=\"https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html\">https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html</a></p>\n<p><code>retry_method_list</code> List of uppercased HTTP method verbs where retries are allowed. By default retries are allowed only on HTTP requests methods that are considered to be idempotent (multiple requests with the same parameters end with the same state). eg. set to ['POST', 'GET'] to retry only those kind of requests.</p>\n<p><code>retry_status_list</code> List of integer HTTP status codes that, if returned, a retry is attempted. eg. set to [502, 503] to retry requests if those status are returned. Note that max_retries must be greater than 0.</p>",
    "url": "https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html#Create%20Ntlm%20Session"
  },
  {
    "name": "Create Session",
    "library": "RequestsLibrary",
    "args": [
      {
        "name": "alias",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "alias"
      },
      {
        "name": "url",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "url"
      },
      {
        "name": "headers",
        "type": null,
        "defaultValue": "{}",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "headers={}"
      },
      {
        "name": "cookies",
        "type": null,
        "defaultValue": "{}",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "cookies={}"
      },
      {
        "name": "auth",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "auth=None"
      },
      {
        "name": "timeout",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout=None"
      },
      {
        "name": "proxies",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "proxies=None"
      },
      {
        "name": "verify",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "verify=False"
      },
      {
        "name": "debug",
        "type": null,
        "defaultValue": "0",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "debug=0"
      },
      {
        "name": "max_retries",
        "type": null,
        "defaultValue": "3",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "max_retries=3"
      },
      {
        "name": "backoff_factor",
        "type": null,
        "defaultValue": "0.1",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "backoff_factor=0.1"
      },
      {
        "name": "disable_warnings",
        "type": null,
        "defaultValue": "0",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "disable_warnings=0"
      },
      {
        "name": "retry_status_list",
        "type": null,
        "defaultValue": "[]",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "retry_status_list=[]"
      },
      {
        "name": "retry_method_list",
        "type": null,
        "defaultValue": "['TRACE', 'GET', 'DELETE', 'HEAD', 'PUT', 'OPTIONS']",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "retry_method_list=['TRACE', 'GET', 'DELETE', 'HEAD', 'PUT', 'OPTIONS']"
      }
    ],
    "doc": "<p>Create Session: create a HTTP session to a server</p>\n<p><code>alias</code> Robot Framework alias to identify the session</p>\n<p><code>url</code> Base url of the server</p>\n<p><code>headers</code> Dictionary of default headers</p>\n<p><code>cookies</code> Dictionary of cookies</p>\n<p><code>auth</code> List of username &amp; password for HTTP Basic Auth</p>\n<p><code>timeout</code> Connection timeout</p>\n<p><code>proxies</code> Dictionary mapping protocol or protocol and host to the URL of the proxy (e.g. {'http': 'foo.bar:3128', '<a href=\"http://host.name\">http://host.name</a>': 'foo.bar:4012'})</p>\n<p><code>verify</code> Whether the SSL cert will be verified. A CA_BUNDLE path can also be provided.</p>\n<p><code>debug</code> Enable http verbosity option more information <a href=\"https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel\">https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel</a></p>\n<p><code>max_retries</code> Number of maximum retries each connection should attempt. By default it will retry 3 times in case of connection errors only. A 0 value will disable any kind of retries regardless of other retry settings. In case the number of retries is reached a retry exception is raised.</p>\n<p><code>disable_warnings</code> Disable requests warning useful when you have large number of testcases</p>\n<p><code>backoff_factor</code> Introduces a delay time between retries that is longer after each retry. eg. if backoff_factor is set to 0.1 the sleep between attemps will be: 0.0, 0.2, 0.4 More info here: <a href=\"https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html\">https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html</a></p>\n<p><code>retry_method_list</code> List of uppercased HTTP method verbs where retries are allowed. By default retries are allowed only on HTTP requests methods that are considered to be idempotent (multiple requests with the same parameters end with the same state). eg. set to ['POST', 'GET'] to retry only those kind of requests.</p>\n<p><code>retry_status_list</code> List of integer HTTP status codes that, if returned, a retry is attempted. eg. set to [502, 503] to retry requests if those status are returned. Note that max_retries must be greater than 0.</p>",
    "url": "https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html#Create%20Session"
  },
  {
    "name": "DELETE",
    "library": "RequestsLibrary",
    "args": [
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      },
      {
        "name": "kwargs",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_NAMED",
        "required": false,
        "repr": "**kwargs"
      }
    ],
    "doc": "<p>Sends a DELETE request.</p>\n<p>The endpoint used to send the request is the <code>url</code> parameter.</p>\n<p>By default this keyword fails if a status code with error values is returned in the response, this behavior can be modified using the <code>expected_status</code> and <code>msg</code> parameters, read more about it in <a href=\"#Status%20Should%20Be\" class=\"name\">Status Should Be</a> keyword documentation. In order to disable this implicit assert mechanism you can pass as <code>expected_status</code> the values <code>any</code> or <code>anything</code>.</p>\n<p>Other optional requests arguments can be passed using <code>**kwargs</code> see the <a href=\"#GET\" class=\"name\">GET</a> keyword for the complete list.</p>",
    "url": "https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html#DELETE"
  },
  {
    "name": "Delete All Sessions",
    "library": "RequestsLibrary",
    "args": [],
    "doc": "<p>Removes all the session objects</p>",
    "url": "https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html#Delete%20All%20Sessions"
  },
  {
    "name": "DELETE On Session",
    "library": "RequestsLibrary",
    "args": [
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      },
      {
        "name": "kwargs",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_NAMED",
        "required": false,
        "repr": "**kwargs"
      }
    ],
    "doc": "<p>Sends a DELETE request on a previously created HTTP Session.</p>\n<p>Session will be identified using the <code>alias</code> name. The endpoint used to send the request is the <code>url</code> parameter.</p>\n<p>By default this keyword fails if a status code with error values is returned in the response, this behavior can be modified using the <code>expected_status</code> and <code>msg</code> parameters, read more about it in <a href=\"#Status%20Should%20Be\" class=\"name\">Status Should Be</a> keyword documentation. In order to disable this implicit assert mechanism you can pass as <code>expected_status</code> the values <code>any</code> or <code>anything</code>.</p>\n<p>Other optional requests arguments can be passed using <code>**kwargs</code> see the <a href=\"#GET\" class=\"name\">GET</a> keyword for the complete list.</p>",
    "url": "https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html#DELETE%20On%20Session"
  },
  {
    "name": "Delete Request",
    "library": "RequestsLibrary",
    "args": [
      {
        "name": "alias",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "alias"
      },
      {
        "name": "uri",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "uri"
      },
      {
        "name": "data",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "data=None"
      },
      {
        "name": "json",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "json=None"
      },
      {
        "name": "params",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "params=None"
      },
      {
        "name": "headers",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "headers=None"
      },
      {
        "name": "allow_redirects",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "allow_redirects=None"
      },
      {
        "name": "timeout",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout=None"
      }
    ],
    "doc": "<p><b>DEPRECATED</b> Please use <a href=\"#DELETE%20On%20Session\" class=\"name\">DELETE On Session</a> instead.</p>\n<p>Send a DELETE request on the session object found using the given <span class=\"name\">alias</span></p>\n<p><code>alias</code> that will be used to identify the Session object in the cache</p>\n<p><code>uri</code> to send the DELETE request to</p>\n<p><code>json</code> a value that will be json encoded and sent as request data if data is not specified</p>\n<p><code>headers</code> a dictionary of headers to use with the request</p>\n<p><code>allow_redirects</code> Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.</p>\n<p><code>timeout</code> connection timeout</p>",
    "url": "https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html#Delete%20Request"
  },
  {
    "name": "GET",
    "library": "RequestsLibrary",
    "args": [
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      },
      {
        "name": "kwargs",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_NAMED",
        "required": false,
        "repr": "**kwargs"
      }
    ],
    "doc": "<p>Sends a GET request.</p>\n<p>The endpoint used to retrieve the resource is the <code>url</code>, while query string parameters can be passed as string, dictionary (or list of tuples or bytes) through the <code>params</code>.</p>\n<p>By default this keyword fails if a status code with error values is returned in the response, this behavior can be modified using the <code>expected_status</code> and <code>msg</code> parameters, read more about it in <a href=\"#Status%20Should%20Be\" class=\"name\">Status Should Be</a> keyword documentation. In order to disable this implicit assert mechanism you can pass as <code>expected_status</code> the values <code>any</code> or <code>anything</code>.</p>\n<p>Other optional requests arguments can be passed using <code>**kwargs</code> here is a list:</p>\n<table border=\"1\">\n<tr>\n<td><code>data</code></td>\n<td>Dictionary, list of tuples, bytes, or file-like object to send in the body of the request.</td>\n</tr>\n<tr>\n<td><code>json</code></td>\n<td>A JSON serializable Python object to send in the body of the request.</td>\n</tr>\n<tr>\n<td><code>headers</code></td>\n<td>Dictionary of HTTP Headers to send with the request.</td>\n</tr>\n<tr>\n<td><code>cookies</code></td>\n<td>Dict or CookieJar object to send with the request.</td>\n</tr>\n<tr>\n<td><code>files</code></td>\n<td>Dictionary of file-like-objects (or <code>{'name': file-tuple}</code>) for multipart encoding upload.</td>\n</tr>\n<tr>\n<td><code>file-tuple</code></td>\n<td>can be a 2-tuple <code>('filename', fileobj)</code>, 3-tuple <code>('filename', fileobj, 'content_type')</code> or a 4-tuple <code>('filename', fileobj, 'content_type', custom_headers)</code>, where <code>'content-type'</code> is a string defining the content type of the given file and <code>custom_headers</code> a dict-like object containing additional headers to add for the file.</td>\n</tr>\n<tr>\n<td><code>auth</code></td>\n<td>Auth tuple to enable Basic/Digest/Custom HTTP Auth.</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td>How many seconds to wait for the server to send data before giving up, as a float, or a <code>(connect timeout, read timeout)</code> tuple.</td>\n</tr>\n<tr>\n<td><code>allow_redirects</code></td>\n<td>Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to <code>${True}</code>.</td>\n</tr>\n<tr>\n<td><code>proxies</code></td>\n<td>Dictionary mapping protocol or protocol and host to the URL of the proxy (e.g. {'http': 'foo.bar:3128', '<a href=\"http://host.name\">http://host.name</a>': 'foo.bar:4012'})</td>\n</tr>\n<tr>\n<td><code>verify</code></td>\n<td>Either a boolean, in which case it controls whether we verify the server's TLS certificate, or a string, in which case it must be a path to a CA bundle to use. Defaults to <code>${True}</code>. Warning: if a session has been created with <code>verify=${False}</code> any other requests will not verify the SSL certificate.</td>\n</tr>\n<tr>\n<td><code>stream</code></td>\n<td>if <code>${False}</code>, the response content will be immediately downloaded.</td>\n</tr>\n<tr>\n<td><code>cert</code></td>\n<td>if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.</td>\n</tr>\n</table>\n<p>For more updated and complete information verify the official Requests api documentation: <a href=\"https://requests.readthedocs.io/en/latest/api/\">https://requests.readthedocs.io/en/latest/api/</a></p>",
    "url": "https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html#GET"
  },
  {
    "name": "Get File For Streaming Upload",
    "library": "RequestsLibrary",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      }
    ],
    "doc": "<p>Opens and returns a file descriptor of a specified file to be passed as <code>data</code> parameter to other requests keywords.</p>\n<p>This allows streaming upload of large files without reading them into memory.</p>\n<p>File descriptor is binary mode and read only. Requests keywords will automatically close the file, if used outside this library it's up to the caller to close it.</p>",
    "url": "https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html#Get%20File%20For%20Streaming%20Upload"
  },
  {
    "name": "GET On Session",
    "library": "RequestsLibrary",
    "args": [
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      },
      {
        "name": "kwargs",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_NAMED",
        "required": false,
        "repr": "**kwargs"
      }
    ],
    "doc": "<p>Sends a GET request on a previously created HTTP Session.</p>\n<p>Session will be identified using the <code>alias</code> name. The endpoint used to retrieve the resource is the <code>url</code>, while query string parameters can be passed as string, dictionary (or list of tuples or bytes) through the <code>params</code>.</p>\n<p>By default this keyword fails if a status code with error values is returned in the response, this behavior can be modified using the <code>expected_status</code> and <code>msg</code> parameters, read more about it in <a href=\"#Status%20Should%20Be\" class=\"name\">Status Should Be</a> keyword documentation. In order to disable this implicit assert mechanism you can pass as <code>expected_status</code> the values <code>any</code> or <code>anything</code>.</p>\n<p>Other optional requests arguments can be passed using <code>**kwargs</code> see the <a href=\"#GET\" class=\"name\">GET</a> keyword for the complete list.</p>",
    "url": "https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html#GET%20On%20Session"
  },
  {
    "name": "Get Request",
    "library": "RequestsLibrary",
    "args": [
      {
        "name": "alias",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "alias"
      },
      {
        "name": "uri",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "uri"
      },
      {
        "name": "headers",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "headers=None"
      },
      {
        "name": "data",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "data=None"
      },
      {
        "name": "json",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "json=None"
      },
      {
        "name": "params",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "params=None"
      },
      {
        "name": "allow_redirects",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "allow_redirects=None"
      },
      {
        "name": "timeout",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout=None"
      }
    ],
    "doc": "<p><b>DEPRECATED</b> Please use <a href=\"#GET%20On%20Session\" class=\"name\">GET On Session</a> instead.</p>\n<p>Send a GET request on the session object found using the given <span class=\"name\">alias</span></p>\n<p><code>alias</code> that will be used to identify the Session object in the cache</p>\n<p><code>uri</code> to send the GET request to</p>\n<p><code>params</code> url parameters to append to the uri</p>\n<p><code>headers</code> a dictionary of headers to use with the request</p>\n<p><code>data</code> a dictionary of key-value pairs that will be urlencoded and sent as GET data or binary data that is sent as the raw body content</p>\n<p><code>json</code> a value that will be json encoded and sent as GET data if data is not specified</p>\n<p><code>allow_redirects</code> Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.</p>\n<p><code>timeout</code> connection timeout</p>",
    "url": "https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html#Get%20Request"
  },
  {
    "name": "HEAD",
    "library": "RequestsLibrary",
    "args": [
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      },
      {
        "name": "kwargs",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_NAMED",
        "required": false,
        "repr": "**kwargs"
      }
    ],
    "doc": "<p>Sends a HEAD request.</p>\n<p>The endpoint used to retrieve the HTTP headers is the <code>url</code>.</p>\n<p><code>allow_redirects</code> parameter is not provided, it will be set to <span class=\"name\">False</span> (as opposed to the default behavior).</p>\n<p>By default this keyword fails if a status code with error values is returned in the response, this behavior can be modified using the <code>expected_status</code> and <code>msg</code> parameters, read more about it in <a href=\"#Status%20Should%20Be\" class=\"name\">Status Should Be</a> keyword documentation. In order to disable this implicit assert mechanism you can pass as <code>expected_status</code> the values <code>any</code> or <code>anything</code>.</p>\n<p>Other optional requests arguments can be passed using <code>**kwargs</code> see the <a href=\"#GET\" class=\"name\">GET</a> keyword for the complete list.</p>",
    "url": "https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html#HEAD"
  },
  {
    "name": "HEAD On Session",
    "library": "RequestsLibrary",
    "args": [
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      },
      {
        "name": "kwargs",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_NAMED",
        "required": false,
        "repr": "**kwargs"
      }
    ],
    "doc": "<p>Sends a HEAD request on a previously created HTTP Session.</p>\n<p>Session will be identified using the <code>alias</code> name. The endpoint used to retrieve the HTTP headers is the <code>url</code>.</p>\n<p><code>allow_redirects</code> parameter is not provided, it will be set to <span class=\"name\">False</span> (as opposed to the default behavior).</p>\n<p>By default this keyword fails if a status code with error values is returned in the response, this behavior can be modified using the <code>expected_status</code> and <code>msg</code> parameters, read more about it in <a href=\"#Status%20Should%20Be\" class=\"name\">Status Should Be</a> keyword documentation. In order to disable this implicit assert mechanism you can pass as <code>expected_status</code> the values <code>any</code> or <code>anything</code>.</p>\n<p>Other optional requests arguments can be passed using <code>**kwargs</code> see the <a href=\"#GET\" class=\"name\">GET</a> keyword for the complete list.</p>",
    "url": "https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html#HEAD%20On%20Session"
  },
  {
    "name": "Head Request",
    "library": "RequestsLibrary",
    "args": [
      {
        "name": "alias",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "alias"
      },
      {
        "name": "uri",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "uri"
      },
      {
        "name": "headers",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "headers=None"
      },
      {
        "name": "allow_redirects",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "allow_redirects=None"
      },
      {
        "name": "timeout",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout=None"
      }
    ],
    "doc": "<p><b>DEPRECATED</b> Please use <a href=\"#HEAD%20On%20Session\" class=\"name\">HEAD On Session</a> instead.</p>\n<p>Send a HEAD request on the session object found using the given <span class=\"name\">alias</span></p>\n<p><code>alias</code> that will be used to identify the Session object in the cache</p>\n<p><code>uri</code> to send the HEAD request to</p>\n<p><code>allow_redirects</code> Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.</p>\n<p><code>headers</code> a dictionary of headers to use with the request</p>\n<p><code>timeout</code> connection timeout</p>",
    "url": "https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html#Head%20Request"
  },
  {
    "name": "OPTIONS",
    "library": "RequestsLibrary",
    "args": [
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      },
      {
        "name": "kwargs",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_NAMED",
        "required": false,
        "repr": "**kwargs"
      }
    ],
    "doc": "<p>Sends a OPTIONS request.</p>\n<p>The endpoint used to retrieve the resource is the <code>url</code>.</p>\n<p>By default this keyword fails if a status code with error values is returned in the response, this behavior can be modified using the <code>expected_status</code> and <code>msg</code> parameters, read more about it in <a href=\"#Status%20Should%20Be\" class=\"name\">Status Should Be</a> keyword documentation. In order to disable this implicit assert mechanism you can pass as <code>expected_status</code> the values <code>any</code> or <code>anything</code>.</p>\n<p>Other optional requests arguments can be passed using <code>**kwargs</code> see the <a href=\"#GET\" class=\"name\">GET</a> keyword for the complete list.</p>",
    "url": "https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html#OPTIONS"
  },
  {
    "name": "OPTIONS On Session",
    "library": "RequestsLibrary",
    "args": [
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      },
      {
        "name": "kwargs",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_NAMED",
        "required": false,
        "repr": "**kwargs"
      }
    ],
    "doc": "<p>Sends a OPTIONS request on a previously created HTTP Session.</p>\n<p>Session will be identified using the <code>alias</code> name. The endpoint used to retrieve the resource is the <code>url</code>.</p>\n<p>By default this keyword fails if a status code with error values is returned in the response, this behavior can be modified using the <code>expected_status</code> and <code>msg</code> parameters, read more about it in <a href=\"#Status%20Should%20Be\" class=\"name\">Status Should Be</a> keyword documentation. In order to disable this implicit assert mechanism you can pass as <code>expected_status</code> the values <code>any</code> or <code>anything</code>.</p>\n<p>Other optional requests arguments can be passed using <code>**kwargs</code> see the <a href=\"#GET\" class=\"name\">GET</a> keyword for the complete list.</p>",
    "url": "https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html#OPTIONS%20On%20Session"
  },
  {
    "name": "Options Request",
    "library": "RequestsLibrary",
    "args": [
      {
        "name": "alias",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "alias"
      },
      {
        "name": "uri",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "uri"
      },
      {
        "name": "headers",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "headers=None"
      },
      {
        "name": "allow_redirects",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "allow_redirects=None"
      },
      {
        "name": "timeout",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout=None"
      }
    ],
    "doc": "<p><b>DEPRECATED</b> Please use <a href=\"#OPTIONS%20On%20Session\" class=\"name\">OPTIONS On Session</a> instead.</p>\n<p>Send an OPTIONS request on the session object found using the given <span class=\"name\">alias</span></p>\n<p><code>alias</code> that will be used to identify the Session object in the cache</p>\n<p><code>uri</code> to send the OPTIONS request to</p>\n<p><code>allow_redirects</code> Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.</p>\n<p><code>headers</code> a dictionary of headers to use with the request</p>\n<p><code>timeout</code> connection timeout</p>",
    "url": "https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html#Options%20Request"
  },
  {
    "name": "PATCH",
    "library": "RequestsLibrary",
    "args": [
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      },
      {
        "name": "kwargs",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_NAMED",
        "required": false,
        "repr": "**kwargs"
      }
    ],
    "doc": "<p>Sends a PUT request.</p>\n<p>The endpoint used to send the request is the <code>url</code> parameter, while its body can be passed using <code>data</code> or <code>json</code> parameters.</p>\n<p><code>data</code> can be a dictionary, list of tuples, bytes, or file-like object. If you want to pass a json body pass a dictionary as <code>json</code> parameter.</p>\n<p>By default this keyword fails if a status code with error values is returned in the response, this behavior can be modified using the <code>expected_status</code> and <code>msg</code> parameters, read more about it in <a href=\"#Status%20Should%20Be\" class=\"name\">Status Should Be</a> keyword documentation. In order to disable this implicit assert mechanism you can pass as <code>expected_status</code> the values <code>any</code> or <code>anything</code>.</p>\n<p>Other optional requests arguments can be passed using <code>**kwargs</code> see the <a href=\"#GET\" class=\"name\">GET</a> keyword for the complete list.</p>",
    "url": "https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html#PATCH"
  },
  {
    "name": "PATCH On Session",
    "library": "RequestsLibrary",
    "args": [
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      },
      {
        "name": "kwargs",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_NAMED",
        "required": false,
        "repr": "**kwargs"
      }
    ],
    "doc": "<p>Sends a PATCH request on a previously created HTTP Session.</p>\n<p>Session will be identified using the <code>alias</code> name. The endpoint used to send the request is the <code>url</code> parameter, while its body can be passed using <code>data</code> or <code>json</code> parameters.</p>\n<p><code>data</code> can be a dictionary, list of tuples, bytes, or file-like object. If you want to pass a json body pass a dictionary as <code>json</code> parameter.</p>\n<p>By default this keyword fails if a status code with error values is returned in the response, this behavior can be modified using the <code>expected_status</code> and <code>msg</code> parameters, read more about it in <a href=\"#Status%20Should%20Be\" class=\"name\">Status Should Be</a> keyword documentation. In order to disable this implicit assert mechanism you can pass as <code>expected_status</code> the values <code>any</code> or <code>anything</code>.</p>\n<p>Other optional requests arguments can be passed using <code>**kwargs</code> see the <a href=\"#GET\" class=\"name\">GET</a> keyword for the complete list.</p>",
    "url": "https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html#PATCH%20On%20Session"
  },
  {
    "name": "Patch Request",
    "library": "RequestsLibrary",
    "args": [
      {
        "name": "alias",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "alias"
      },
      {
        "name": "uri",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "uri"
      },
      {
        "name": "data",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "data=None"
      },
      {
        "name": "json",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "json=None"
      },
      {
        "name": "params",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "params=None"
      },
      {
        "name": "headers",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "headers=None"
      },
      {
        "name": "files",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "files=None"
      },
      {
        "name": "allow_redirects",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "allow_redirects=None"
      },
      {
        "name": "timeout",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout=None"
      }
    ],
    "doc": "<p><b>DEPRECATED</b> Please use <a href=\"#PATCH%20On%20Session\" class=\"name\">PATCH On Session</a> instead.</p>\n<p>Send a PATCH request on the session object found using the given <span class=\"name\">alias</span></p>\n<p><code>alias</code> that will be used to identify the Session object in the cache</p>\n<p><code>uri</code> to send the PATCH request to</p>\n<p><code>data</code> a dictionary of key-value pairs that will be urlencoded and sent as PATCH data or binary data that is sent as the raw body content or file descriptor retrieved by Get File For Streaming Upload</p>\n<p><code>json</code> a value that will be json encoded and sent as PATCH data if data is not specified</p>\n<p><code>headers</code> a dictionary of headers to use with the request</p>\n<p><code>files</code> a dictionary of file names containing file data to PATCH to the server</p>\n<p><code>allow_redirects</code> Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.</p>\n<p><code>params</code> url parameters to append to the uri</p>\n<p><code>timeout</code> connection timeout</p>",
    "url": "https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html#Patch%20Request"
  },
  {
    "name": "POST",
    "library": "RequestsLibrary",
    "args": [
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      },
      {
        "name": "kwargs",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_NAMED",
        "required": false,
        "repr": "**kwargs"
      }
    ],
    "doc": "<p>Sends a POST request.</p>\n<p>The endpoint used to send the request is the <code>url</code> parameter, while its body can be passed using <code>data</code> or <code>json</code> parameters.</p>\n<p><code>data</code> can be a dictionary, list of tuples, bytes, or file-like object. If you want to pass a json body pass a dictionary as <code>json</code> parameter.</p>\n<p>By default this keyword fails if a status code with error values is returned in the response, this behavior can be modified using the <code>expected_status</code> and <code>msg</code> parameters, read more about it in <a href=\"#Status%20Should%20Be\" class=\"name\">Status Should Be</a> keyword documentation. In order to disable this implicit assert mechanism you can pass as <code>expected_status</code> the values <code>any</code> or <code>anything</code>.</p>\n<p>Other optional requests arguments can be passed using <code>**kwargs</code> see the <a href=\"#GET\" class=\"name\">GET</a> keyword for the complete list.</p>",
    "url": "https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html#POST"
  },
  {
    "name": "POST On Session",
    "library": "RequestsLibrary",
    "args": [
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      },
      {
        "name": "kwargs",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_NAMED",
        "required": false,
        "repr": "**kwargs"
      }
    ],
    "doc": "<p>Sends a POST request on a previously created HTTP Session.</p>\n<p>Session will be identified using the <code>alias</code> name. The endpoint used to send the request is the <code>url</code> parameter, while its body can be passed using <code>data</code> or <code>json</code> parameters.</p>\n<p><code>data</code> can be a dictionary, list of tuples, bytes, or file-like object. If you want to pass a json body pass a dictionary as <code>json</code> parameter.</p>\n<p>By default this keyword fails if a status code with error values is returned in the response, this behavior can be modified using the <code>expected_status</code> and <code>msg</code> parameters, read more about it in <a href=\"#Status%20Should%20Be\" class=\"name\">Status Should Be</a> keyword documentation. In order to disable this implicit assert mechanism you can pass as <code>expected_status</code> the values <code>any</code> or <code>anything</code>.</p>\n<p>Other optional requests arguments can be passed using <code>**kwargs</code> see the <a href=\"#GET\" class=\"name\">GET</a> keyword for the complete list.</p>",
    "url": "https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html#POST%20On%20Session"
  },
  {
    "name": "Post Request",
    "library": "RequestsLibrary",
    "args": [
      {
        "name": "alias",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "alias"
      },
      {
        "name": "uri",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "uri"
      },
      {
        "name": "data",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "data=None"
      },
      {
        "name": "json",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "json=None"
      },
      {
        "name": "params",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "params=None"
      },
      {
        "name": "headers",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "headers=None"
      },
      {
        "name": "files",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "files=None"
      },
      {
        "name": "allow_redirects",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "allow_redirects=None"
      },
      {
        "name": "timeout",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout=None"
      }
    ],
    "doc": "<p><b>DEPRECATED</b> Please use <a href=\"#POST%20On%20Session\" class=\"name\">POST On Session</a> instead.</p>\n<p>Send a POST request on the session object found using the given <span class=\"name\">alias</span></p>\n<p><code>alias</code> that will be used to identify the Session object in the cache</p>\n<p><code>uri</code> to send the POST request to</p>\n<p><code>data</code> a dictionary of key-value pairs that will be urlencoded and sent as POST data or binary data that is sent as the raw body content or passed as such for multipart form data if <code>files</code> is also defined or file descriptor retrieved by Get File For Streaming Upload</p>\n<p><code>json</code> a value that will be json encoded and sent as POST data if files or data is not specified</p>\n<p><code>params</code> url parameters to append to the uri</p>\n<p><code>headers</code> a dictionary of headers to use with the request</p>\n<p><code>files</code> a dictionary of file names containing file data to POST to the server</p>\n<p><code>allow_redirects</code> Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.</p>\n<p><code>timeout</code> connection timeout</p>",
    "url": "https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html#Post%20Request"
  },
  {
    "name": "PUT",
    "library": "RequestsLibrary",
    "args": [
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      },
      {
        "name": "kwargs",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_NAMED",
        "required": false,
        "repr": "**kwargs"
      }
    ],
    "doc": "<p>Sends a PUT request.</p>\n<p>The endpoint used to send the request is the <code>url</code> parameter, while its body can be passed using <code>data</code> or <code>json</code> parameters.</p>\n<p><code>data</code> can be a dictionary, list of tuples, bytes, or file-like object. If you want to pass a json body pass a dictionary as <code>json</code> parameter.</p>\n<p>By default this keyword fails if a status code with error values is returned in the response, this behavior can be modified using the <code>expected_status</code> and <code>msg</code> parameters, read more about it in <a href=\"#Status%20Should%20Be\" class=\"name\">Status Should Be</a> keyword documentation. In order to disable this implicit assert mechanism you can pass as <code>expected_status</code> the values <code>any</code> or <code>anything</code>.</p>\n<p>Other optional requests arguments can be passed using <code>**kwargs</code> see the <a href=\"#GET\" class=\"name\">GET</a> keyword for the complete list.</p>",
    "url": "https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html#PUT"
  },
  {
    "name": "PUT On Session",
    "library": "RequestsLibrary",
    "args": [
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      },
      {
        "name": "kwargs",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_NAMED",
        "required": false,
        "repr": "**kwargs"
      }
    ],
    "doc": "<p>Sends a PUT request on a previously created HTTP Session.</p>\n<p>Session will be identified using the <code>alias</code> name. The endpoint used to send the request is the <code>url</code> parameter, while its body can be passed using <code>data</code> or <code>json</code> parameters.</p>\n<p><code>data</code> can be a dictionary, list of tuples, bytes, or file-like object. If you want to pass a json body pass a dictionary as <code>json</code> parameter.</p>\n<p>By default this keyword fails if a status code with error values is returned in the response, this behavior can be modified using the <code>expected_status</code> and <code>msg</code> parameters, read more about it in <a href=\"#Status%20Should%20Be\" class=\"name\">Status Should Be</a> keyword documentation. In order to disable this implicit assert mechanism you can pass as <code>expected_status</code> the values <code>any</code> or <code>anything</code>.</p>\n<p>Other optional requests arguments can be passed using <code>**kwargs</code> see the <a href=\"#GET\" class=\"name\">GET</a> keyword for the complete list.</p>",
    "url": "https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html#PUT%20On%20Session"
  },
  {
    "name": "Put Request",
    "library": "RequestsLibrary",
    "args": [
      {
        "name": "alias",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "alias"
      },
      {
        "name": "uri",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "uri"
      },
      {
        "name": "data",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "data=None"
      },
      {
        "name": "json",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "json=None"
      },
      {
        "name": "params",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "params=None"
      },
      {
        "name": "files",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "files=None"
      },
      {
        "name": "headers",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "headers=None"
      },
      {
        "name": "allow_redirects",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "allow_redirects=None"
      },
      {
        "name": "timeout",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout=None"
      }
    ],
    "doc": "<p><b>DEPRECATED</b> Please use <a href=\"#PUT%20On%20Session\" class=\"name\">PUT On Session</a> instead.</p>\n<p>Send a PUT request on the session object found using the given <span class=\"name\">alias</span></p>\n<p><code>alias</code> that will be used to identify the Session object in the cache</p>\n<p><code>uri</code> to send the PUT request to</p>\n<p><code>data</code> a dictionary of key-value pairs that will be urlencoded and sent as PUT data or binary data that is sent as the raw body content or file descriptor retrieved by Get File For Streaming Upload</p>\n<p><code>json</code> a value that will be json encoded and sent as PUT data if data is not specified</p>\n<p><code>headers</code> a dictionary of headers to use with the request</p>\n<p><code>allow_redirects</code> Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.</p>\n<p><code>params</code> url parameters to append to the uri</p>\n<p><code>timeout</code> connection timeout</p>",
    "url": "https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html#Put%20Request"
  },
  {
    "name": "Request Should Be Successful",
    "library": "RequestsLibrary",
    "args": [
      {
        "name": "response",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "response=None"
      }
    ],
    "doc": "<p>Fails if response status code is a client or server error (4xx, 5xx).</p>\n<p><code>response</code> is the output of other requests keywords like <a href=\"#GET%20On%20Session\" class=\"name\">GET On Session</a>. If omitted the last response will be used.</p>\n<p>In case of failure an HTTPError will be automatically raised.</p>\n<p>For a more versatile assert keyword see <a href=\"#Status%20Should%20Be\" class=\"name\">Status Should Be</a>.</p>",
    "url": "https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html#Request%20Should%20Be%20Successful"
  },
  {
    "name": "Session Exists",
    "library": "RequestsLibrary",
    "args": [
      {
        "name": "alias",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "alias"
      }
    ],
    "doc": "<p>Return True if the session has been already created</p>\n<p><code>alias</code> that has been used to identify the Session object in the cache</p>",
    "url": "https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html#Session%20Exists"
  },
  {
    "name": "Status Should Be",
    "library": "RequestsLibrary",
    "args": [
      {
        "name": "expected_status",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "expected_status"
      },
      {
        "name": "response",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "response=None"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      }
    ],
    "doc": "<p>Fails if response status code is different than the expected.</p>\n<p><code>expected_status</code> could be the code number as an integer or as string. But it could also be a named status code like 'ok', 'created', 'accepted' or 'bad request', 'not found' etc.</p>\n<p><code>response</code> is the output of other requests keywords like <a href=\"#GET\" class=\"name\">GET</a> or <a href=\"#GET%20On%20Session\" class=\"name\">GET On Session</a>. If omitted the last response will be used.</p>\n<p>In case of failure an HTTPError will be automatically raised. A custom failure message <code>msg</code> can be added like in built-in keywords.</p>\n<p>New requests keywords like <a href=\"#GET\" class=\"name\">GET</a> or <a href=\"#GET%20On%20Session\" class=\"name\">GET On Session</a> (starting from 0.8 version) already have an implicit assert mechanism that, by default, verifies the response status code. <a href=\"#Status%20Should%20Be\" class=\"name\">Status Should Be</a> keyword can be useful when you disable implicit assert using <code>expected_status=anything</code>.</p>\n<p>For example when you have a nested keyword that is used for both OK and ERROR responses:</p>\n<pre>\n  <b>*</b> Test Cases <b>*</b>\n\n  Test Get Request And Make Sure Is A 404 Response\n      ${resp}=            GET Custom Keyword That Returns OK or ERROR Response  case=notfound\n      Status Should Be    404    ${resp}\n      Should Be Equal As Strings  NOT FOUND  ${resp.reason}\n\n  Test Get Request And Make Sure Is OK\n      ${resp}=            GET Custom Keyword That Returns OK or ERROR Response  case=pass\n      Status Should Be    200    ${resp}\n      Should Be Equal As Strings  OK  ${resp.reason}\n\n  <b>*</b> Keywords <b>*</b>\n\n  GET Custom Keyword That Returns OK or ERROR Response\n  [Arguments]  $case\n       [...]\n      IF $case == notfound\n          $resp=     GET [...] expected_status=Anything\n          [Return]   $resp\n      ELSE\n       [...]\n</pre>",
    "url": "https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html#Status%20Should%20Be"
  },
  {
    "name": "To Json",
    "library": "RequestsLibrary",
    "args": [
      {
        "name": "content",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "content"
      },
      {
        "name": "pretty_print",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "pretty_print=False"
      }
    ],
    "doc": "<p><b>DEPRECATED</b> Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</p>\n<p>Convert a string to a JSON object</p>\n<p><code>content</code> String content to convert into JSON</p>\n<p><code>pretty_print</code> If defined, will output JSON is pretty print format</p>",
    "url": "https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html#To%20Json"
  },
  {
    "name": "Update Session",
    "library": "RequestsLibrary",
    "args": [
      {
        "name": "alias",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "alias"
      },
      {
        "name": "headers",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "headers=None"
      },
      {
        "name": "cookies",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "cookies=None"
      }
    ],
    "doc": "<p>Updates HTTP Session Headers and Cookies.</p>\n<p>Session will be identified using the <code>alias</code> name. Dictionary of <code>headers</code> and <code>cookies</code> to be updated and merged into session data.</p>",
    "url": "https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html#Update%20Session"
  },
  {
    "name": "Set Screenshot Directory",
    "library": "Screenshot",
    "args": [
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      }
    ],
    "doc": "<p>Sets the directory where screenshots are saved.</p>\n<p>It is possible to use <code>/</code> as a path separator in all operating systems. Path to the old directory is returned.</p>\n<p>The directory can also be set in <a href=\"#Importing\" class=\"name\">importing</a>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Screenshot.html#Set%20Screenshot%20Directory"
  },
  {
    "name": "Take Screenshot",
    "library": "Screenshot",
    "args": [
      {
        "name": "name",
        "type": null,
        "defaultValue": "screenshot",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "name=screenshot"
      },
      {
        "name": "width",
        "type": null,
        "defaultValue": "800px",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "width=800px"
      }
    ],
    "doc": "<p>Takes a screenshot in JPEG format and embeds it into the log file.</p>\n<p>Name of the file where the screenshot is stored is derived from the given <code>name</code>. If the <code>name</code> ends with extension <code>.jpg</code> or <code>.jpeg</code>, the screenshot will be stored with that exact name. Otherwise a unique name is created by adding an underscore, a running index and an extension to the <code>name</code>.</p>\n<p>The name will be interpreted to be relative to the directory where the log file is written. It is also possible to use absolute paths. Using <code>/</code> as a path separator works in all operating systems.</p>\n<p><code>width</code> specifies the size of the screenshot in the log file.</p>\n<p>Examples: (LOGDIR is determined automatically by the library)</p>\n<table border=\"1\">\n<tr>\n<td>Take Screenshot</td>\n<td></td>\n<td></td>\n<td># LOGDIR/screenshot_1.jpg (index automatically incremented)</td>\n</tr>\n<tr>\n<td>Take Screenshot</td>\n<td>mypic</td>\n<td></td>\n<td># LOGDIR/mypic_1.jpg (index automatically incremented)</td>\n</tr>\n<tr>\n<td>Take Screenshot</td>\n<td>${TEMPDIR}/mypic</td>\n<td></td>\n<td># /tmp/mypic_1.jpg (index automatically incremented)</td>\n</tr>\n<tr>\n<td>Take Screenshot</td>\n<td>pic.jpg</td>\n<td></td>\n<td># LOGDIR/pic.jpg (always uses this file)</td>\n</tr>\n<tr>\n<td>Take Screenshot</td>\n<td>images/login.jpg</td>\n<td>80%</td>\n<td># Specify both name and width.</td>\n</tr>\n<tr>\n<td>Take Screenshot</td>\n<td>width=550px</td>\n<td></td>\n<td># Specify only width.</td>\n</tr>\n</table>\n<p>The path where the screenshot is saved is returned.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Screenshot.html#Take%20Screenshot"
  },
  {
    "name": "Take Screenshot Without Embedding",
    "library": "Screenshot",
    "args": [
      {
        "name": "name",
        "type": null,
        "defaultValue": "screenshot",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "name=screenshot"
      }
    ],
    "doc": "<p>Takes a screenshot and links it from the log file.</p>\n<p>This keyword is otherwise identical to <a href=\"#Take%20Screenshot\" class=\"name\">Take Screenshot</a> but the saved screenshot is not embedded into the log file. The screenshot is linked so it is nevertheless easily available.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/Screenshot.html#Take%20Screenshot%20Without%20Embedding"
  },
  {
    "name": "Add Cookie",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "name",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name: str"
      },
      {
        "name": "value",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "value: str"
      },
      {
        "name": "path",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "path: str | None = None"
      },
      {
        "name": "domain",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "domain: str | None = None"
      },
      {
        "name": "secure",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "secure: bool | None = None"
      },
      {
        "name": "expiry",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "expiry: str | None = None"
      }
    ],
    "doc": "<p>Adds a cookie to your current session.</p>\n<p><code>name</code> and <code>value</code> are required, <code>path</code>, <code>domain</code>, <code>secure</code> and <code>expiry</code> are optional.  Expiry supports the same formats as the <a href=\"http://robotframework.org/robotframework/latest/libraries/DateTime.html\">DateTime</a> library or an epoch timestamp.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Add%20Cookie\" class=\"name\">Add Cookie</a></td>\n<td>foo</td>\n<td>bar</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Add%20Cookie\" class=\"name\">Add Cookie</a></td>\n<td>foo</td>\n<td>bar</td>\n<td>domain=example.com</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Add%20Cookie\" class=\"name\">Add Cookie</a></td>\n<td>foo</td>\n<td>bar</td>\n<td>expiry=2027-09-28 16:21:35</td>\n<td># Expiry as timestamp.</td>\n</tr>\n<tr>\n<td><a href=\"#Add%20Cookie\" class=\"name\">Add Cookie</a></td>\n<td>foo</td>\n<td>bar</td>\n<td>expiry=1822137695</td>\n<td># Expiry as epoch seconds.</td>\n</tr>\n</table>\n<p>Prior to SeleniumLibrary 3.0 setting expiry did not work.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Add%20Cookie"
  },
  {
    "name": "Add Location Strategy",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "strategy_name",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "strategy_name: str"
      },
      {
        "name": "strategy_keyword",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "strategy_keyword: str"
      },
      {
        "name": "persist",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "persist: bool = False"
      }
    ],
    "doc": "<p>Adds a custom location strategy.</p>\n<p>See <a href=\"#Custom%20locators\" class=\"name\">Custom locators</a> for information on how to create and use custom strategies. <a href=\"#Remove%20Location%20Strategy\" class=\"name\">Remove Location Strategy</a> can be used to remove a registered strategy.</p>\n<p>Location strategies are automatically removed after leaving the current scope by default. Setting <code>persist</code> to a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) will cause the location strategy to stay registered throughout the life of the test.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Add%20Location%20Strategy"
  },
  {
    "name": "Alert Should Be Present",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "text",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "text: str = "
      },
      {
        "name": "action",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "ACCEPT",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "action: str = ACCEPT"
      },
      {
        "name": "timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout: timedelta | None = None"
      }
    ],
    "doc": "<p>Verifies that an alert is present and by default, accepts it.</p>\n<p>Fails if no alert is present. If <code>text</code> is a non-empty string, then it is used to verify alert's message. The alert is accepted by default, but that behavior can be controlled by using the <code>action</code> argument same way as with <a href=\"#Handle%20Alert\" class=\"name\">Handle Alert</a>.</p>\n<p><code>timeout</code> specifies how long to wait for the alert to appear. If it is not given, the global default <a href=\"#Timeout\" class=\"name\">timeout</a> is used instead.</p>\n<p><code>action</code> and <code>timeout</code> arguments are new in SeleniumLibrary 3.0. In earlier versions, the alert was always accepted and a timeout was hardcoded to one second.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Alert%20Should%20Be%20Present"
  },
  {
    "name": "Alert Should Not Be Present",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "action",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "ACCEPT",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "action: str = ACCEPT"
      },
      {
        "name": "timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout: timedelta | None = None"
      }
    ],
    "doc": "<p>Verifies that no alert is present.</p>\n<p>If the alert actually exists, the <code>action</code> argument determines how it should be handled. By default, the alert is accepted, but it can be also dismissed or left open the same way as with the <a href=\"#Handle%20Alert\" class=\"name\">Handle Alert</a> keyword.</p>\n<p><code>timeout</code> specifies how long to wait for the alert to appear. By default, is not waited for the alert at all, but a custom time can be given if alert may be delayed. See the <a href=\"#Time%20format\" class=\"name\">time format</a> section for information about the syntax.</p>\n<p>New in SeleniumLibrary 3.0.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Alert%20Should%20Not%20Be%20Present"
  },
  {
    "name": "Assign Id To Element",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "id",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "id: str"
      }
    ],
    "doc": "<p>Assigns a temporary <code>id</code> to the element specified by <code>locator</code>.</p>\n<p>This is mainly useful if the locator is complicated and/or slow XPath expression and it is needed multiple times. Identifier expires when the page is reloaded.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Assign%20Id%20To%20Element\" class=\"name\">Assign ID to Element</a></td>\n<td>//ul[@class='example' and ./li[contains(., 'Stuff')]]</td>\n<td>my id</td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a></td>\n<td>my id</td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Assign%20Id%20To%20Element"
  },
  {
    "name": "Capture Element Screenshot",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "filename",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "selenium-element-screenshot-{index}.png",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "filename: str = selenium-element-screenshot-{index}.png"
      }
    ],
    "doc": "<p>Captures a screenshot from the element identified by <code>locator</code> and embeds it into log file.</p>\n<p>See <a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a> for details about <code>filename</code> argument. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>An absolute path to the created element screenshot is returned. If the <code>filename</code> equals to BASE64 (case insensitive), then the base64 string is returned in addition to the screenshot embedded to the log. See <code>Capture Page Screenshot</code> for more information.</p>\n<p>Support for capturing the screenshot from an element has limited support among browser vendors. Please check the browser vendor driver documentation does the browser support capturing a screenshot from an element.</p>\n<p>New in SeleniumLibrary 3.3. Support for EMBED is new in SeleniumLibrary 4.2. Support for BASE64 is new in SeleniumLibrary 6.8.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Capture%20Element%20Screenshot\" class=\"name\">Capture Element Screenshot</a></td>\n<td>id:image_id</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Capture%20Element%20Screenshot\" class=\"name\">Capture Element Screenshot</a></td>\n<td>id:image_id</td>\n<td>${OUTPUTDIR}/id_image_id-1.png</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Capture%20Element%20Screenshot\" class=\"name\">Capture Element Screenshot</a></td>\n<td>id:image_id</td>\n<td>EMBED</td>\n<td></td>\n</tr>\n<tr>\n<td>${ess}=</td>\n<td><a href=\"#Capture%20Element%20Screenshot\" class=\"name\">Capture Element Screenshot</a></td>\n<td>id:image_id</td>\n<td>BASE64</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Capture%20Element%20Screenshot"
  },
  {
    "name": "Capture Page Screenshot",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "filename",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "selenium-screenshot-{index}.png",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "filename: str = selenium-screenshot-{index}.png"
      }
    ],
    "doc": "<p>Takes a screenshot of the current page and embeds it into a log file.</p>\n<p><code>filename</code> argument specifies the name of the file to write the screenshot into. The directory where screenshots are saved can be set when <a href=\"#Importing\" class=\"name\">importing</a> the library or by using the <a href=\"#Set%20Screenshot%20Directory\" class=\"name\">Set Screenshot Directory</a> keyword. If the directory is not configured, screenshots are saved to the same directory where Robot Framework's log file is written.</p>\n<p>If <code>filename</code> equals to EMBED (case insensitive), then screenshot is embedded as Base64 image to the log.html. In this case file is not created in the filesystem. If <code>filename</code> equals to BASE64 (case insensitive), then the base64 string is returned and the screenshot is embedded to the log. This allows one to reuse the image elsewhere in the report.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${ss}=</td>\n<td><a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a></td>\n<td>BASE64</td>\n</tr>\n<tr>\n<td>Set Test Message</td>\n<td>*HTML*Test Success&lt;p&gt;&lt;img src=\"data:image/png;base64,${ss}\" width=\"256px\"&gt;</td>\n<td></td>\n</tr>\n</table>\n<p>Starting from SeleniumLibrary 1.8, if <code>filename</code> contains marker <code>{index}</code>, it will be automatically replaced with an unique running index, preventing files to be overwritten. Indices start from 1, and how they are represented can be customized using Python's <a href=\"https://docs.python.org/3/library/string.html#format-string-syntax\">format string syntax</a>.</p>\n<p>An absolute path to the created screenshot file is returned or if <code>filename</code>  equals to EMBED, word <span class=\"name\">EMBED</span> is returned. If <code>filename</code> equals to BASE64, the base64 string containing the screenshot is returned.</p>\n<p>Support for BASE64 is new in SeleniumLibrary 6.8</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a></td>\n<td></td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Exist</span></td>\n<td>${OUTPUTDIR}/selenium-screenshot-1.png</td>\n</tr>\n<tr>\n<td>${path} =</td>\n<td><a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a></td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Exist</span></td>\n<td>${OUTPUTDIR}/selenium-screenshot-2.png</td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Exist</span></td>\n<td>${path}</td>\n</tr>\n<tr>\n<td><a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a></td>\n<td>custom_name.png</td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Exist</span></td>\n<td>${OUTPUTDIR}/custom_name.png</td>\n</tr>\n<tr>\n<td><a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a></td>\n<td>custom_with_index_{index}.png</td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Exist</span></td>\n<td>${OUTPUTDIR}/custom_with_index_1.png</td>\n</tr>\n<tr>\n<td><a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a></td>\n<td>formatted_index_{index:03}.png</td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Exist</span></td>\n<td>${OUTPUTDIR}/formatted_index_001.png</td>\n</tr>\n<tr>\n<td><a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a></td>\n<td>EMBED</td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Not Exist</span></td>\n<td>EMBED</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Capture%20Page%20Screenshot"
  },
  {
    "name": "Checkbox Should Be Selected",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Verifies checkbox <code>locator</code> is selected/checked.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Checkbox%20Should%20Be%20Selected"
  },
  {
    "name": "Checkbox Should Not Be Selected",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Verifies checkbox <code>locator</code> is not selected/checked.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Checkbox%20Should%20Not%20Be%20Selected"
  },
  {
    "name": "Choose File",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "file_path",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "file_path: str"
      }
    ],
    "doc": "<p>Inputs the <code>file_path</code> into the file input field <code>locator</code>.</p>\n<p>This keyword is most often used to input files into upload forms. The keyword does not check <code>file_path</code> is the file or folder available on the machine where tests are executed. If the <code>file_path</code> points at a file and when using Selenium Grid, Selenium will <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.command.html?highlight=upload#selenium.webdriver.remote.command.Command.UPLOAD_FILE\">magically</a>, transfer the file from the machine where the tests are executed to the Selenium Grid node where the browser is running. Then Selenium will send the file path, from the nodes file system, to the browser.</p>\n<p>That <code>file_path</code> is not checked, is new in SeleniumLibrary 4.0.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Choose%20File\" class=\"name\">Choose File</a></td>\n<td>my_upload_field</td>\n<td>${CURDIR}/trades.csv</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Choose%20File"
  },
  {
    "name": "Clear Element Text",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Clears the value of the text-input-element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Clear%20Element%20Text"
  },
  {
    "name": "Click Button",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "modifier",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "modifier: bool | str = False"
      }
    ],
    "doc": "<p>Clicks the button identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, buttons are searched using <code>id</code>, <code>name</code>, and <code>value</code>.</p>\n<p>See the <a href=\"#Click%20Element\" class=\"name\">Click Element</a> keyword for details about the <code>modifier</code> argument.</p>\n<p>The <code>modifier</code> argument is new in SeleniumLibrary 3.3</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Click%20Button"
  },
  {
    "name": "Click Element",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "modifier",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "modifier: bool | str = False"
      },
      {
        "name": "action_chain",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "action_chain: bool = False"
      }
    ],
    "doc": "<p>Click the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>modifier</code> argument can be used to pass <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys\">Selenium Keys</a> when clicking the element. The <span class=\"name\">+</span> can be used as a separator for different Selenium Keys. The <span class=\"name\">CTRL</span> is internally translated to the <span class=\"name\">CONTROL</span> key. The <code>modifier</code> is space and case insensitive, example \"alt\" and \" aLt \" are supported formats to <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.ALT\">ALT key</a> . If <code>modifier</code> does not match to Selenium Keys, keyword fails.</p>\n<p>If <code>action_chain</code> argument is true, see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a> for more details on how to set boolean argument, then keyword uses ActionChain based click instead of the &lt;web_element&gt;.click() function. If both <code>action_chain</code> and <code>modifier</code> are defined, the click will be performed using <code>modifier</code> and <code>action_chain</code> will be ignored.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Click Element</td>\n<td>id:button</td>\n<td></td>\n<td># Would click element without any modifiers.</td>\n</tr>\n<tr>\n<td>Click Element</td>\n<td>id:button</td>\n<td>CTRL</td>\n<td># Would click element with CTLR key pressed down.</td>\n</tr>\n<tr>\n<td>Click Element</td>\n<td>id:button</td>\n<td>CTRL+ALT</td>\n<td># Would click element with CTLR and ALT keys pressed down.</td>\n</tr>\n<tr>\n<td>Click Element</td>\n<td>id:button</td>\n<td>action_chain=True</td>\n<td># Clicks the button using an Selenium  ActionChains</td>\n</tr>\n</table>\n<p>The <code>modifier</code> argument is new in SeleniumLibrary 3.2 The <code>action_chain</code> argument is new in SeleniumLibrary 4.1</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Click%20Element"
  },
  {
    "name": "Click Element At Coordinates",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "xoffset",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "xoffset: int"
      },
      {
        "name": "yoffset",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "yoffset: int"
      }
    ],
    "doc": "<p>Click the element <code>locator</code> at <code>xoffset/yoffset</code>.</p>\n<p>The Cursor is moved and the center of the element and x/y coordinates are calculated from that point.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Click%20Element%20At%20Coordinates"
  },
  {
    "name": "Click Image",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "modifier",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "modifier: bool | str = False"
      }
    ],
    "doc": "<p>Clicks an image identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, images are searched using <code>id</code>, <code>name</code>, <code>src</code> and <code>alt</code>.</p>\n<p>See the <a href=\"#Click%20Element\" class=\"name\">Click Element</a> keyword for details about the <code>modifier</code> argument.</p>\n<p>The <code>modifier</code> argument is new in SeleniumLibrary 3.3</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Click%20Image"
  },
  {
    "name": "Click Link",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "modifier",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "modifier: bool | str = False"
      }
    ],
    "doc": "<p>Clicks a link identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, links are searched using <code>id</code>, <code>name</code>, <code>href</code> and the link text.</p>\n<p>See the <a href=\"#Click%20Element\" class=\"name\">Click Element</a> keyword for details about the <code>modifier</code> argument.</p>\n<p>The <code>modifier</code> argument is new in SeleniumLibrary 3.3</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Click%20Link"
  },
  {
    "name": "Close All Browsers",
    "library": "SeleniumLibrary",
    "args": [],
    "doc": "<p>Closes all open browsers and resets the browser cache.</p>\n<p>After this keyword, new indexes returned from <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a> keyword are reset to 1.</p>\n<p>This keyword should be used in test or suite teardown to make sure all browsers are closed.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Close%20All%20Browsers"
  },
  {
    "name": "Close Browser",
    "library": "SeleniumLibrary",
    "args": [],
    "doc": "<p>Closes the current browser.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Close%20Browser"
  },
  {
    "name": "Close Window",
    "library": "SeleniumLibrary",
    "args": [],
    "doc": "<p>Closes currently opened and selected browser window/tab.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Close%20Window"
  },
  {
    "name": "Cover Element",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Will cover elements identified by <code>locator</code> with a blue div without breaking page layout.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>New in SeleniumLibrary 3.3.0</p>\n<p>Example: |<a href=\"#Cover%20Element\" class=\"name\">Cover Element</a> | css:div#container |</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Cover%20Element"
  },
  {
    "name": "Create Webdriver",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "driver_name",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "driver_name: str"
      },
      {
        "name": "alias",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "alias: str | None = None"
      },
      {
        "name": "kwargs",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "dict",
              "typedoc": "dictionary",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "kwargs: dict | None = None"
      },
      {
        "name": "init_kwargs",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_NAMED",
        "required": false,
        "repr": "**init_kwargs"
      }
    ],
    "doc": "<p>Creates an instance of Selenium WebDriver.</p>\n<p>Like <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a>, but allows passing arguments to the created WebDriver instance directly. This keyword should only be used if the functionality provided by <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a> is not adequate.</p>\n<p><code>driver_name</code> must be a WebDriver implementation name like Firefox, Chrome, Ie, Edge, Safari, or Remote.</p>\n<p>The initialized WebDriver can be configured either with a Python dictionary <code>kwargs</code> or by using keyword arguments <code>**init_kwargs</code>. These arguments are passed directly to WebDriver without any processing. See <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/api.html\">Selenium API documentation</a> for details about the supported arguments.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td># Use proxy with Firefox</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${proxy}=</td>\n<td><span class=\"name\">Evaluate</span></td>\n<td>selenium.webdriver.Proxy()</td>\n<td>modules=selenium, selenium.webdriver</td>\n</tr>\n<tr>\n<td>${proxy.http_proxy}=</td>\n<td><span class=\"name\">Set Variable</span></td>\n<td>localhost:8888</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Create%20Webdriver\" class=\"name\">Create Webdriver</a></td>\n<td>Firefox</td>\n<td>proxy=${proxy}</td>\n<td></td>\n</tr>\n</table>\n<p>Returns the index of this browser instance which can be used later to switch back to it. Index starts from 1 and is reset back to it when <a href=\"#Close%20All%20Browsers\" class=\"name\">Close All Browsers</a> keyword is used. See <a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a> for an example.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Create%20Webdriver"
  },
  {
    "name": "Current Frame Should Contain",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "text",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "text: str"
      },
      {
        "name": "loglevel",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "TRACE",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "loglevel: str = TRACE"
      }
    ],
    "doc": "<p>Verifies that the current frame contains <code>text</code>.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about the <code>loglevel</code> argument.</p>\n<p>Prior to SeleniumLibrary 3.0 this keyword was named <span class=\"name\">Current Frame Contains</span>.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Current%20Frame%20Should%20Contain"
  },
  {
    "name": "Current Frame Should Not Contain",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "text",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "text: str"
      },
      {
        "name": "loglevel",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "TRACE",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "loglevel: str = TRACE"
      }
    ],
    "doc": "<p>Verifies that the current frame does not contain <code>text</code>.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about the <code>loglevel</code> argument.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Current%20Frame%20Should%20Not%20Contain"
  },
  {
    "name": "Delete All Cookies",
    "library": "SeleniumLibrary",
    "args": [],
    "doc": "<p>Deletes all cookies.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Delete%20All%20Cookies"
  },
  {
    "name": "Delete Cookie",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      }
    ],
    "doc": "<p>Deletes the cookie matching <code>name</code>.</p>\n<p>If the cookie is not found, nothing happens.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Delete%20Cookie"
  },
  {
    "name": "Double Click Element",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Double clicks the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Double%20Click%20Element"
  },
  {
    "name": "Drag And Drop",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "target",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "target: WebElement | str"
      }
    ],
    "doc": "<p>Drags the element identified by <code>locator</code> into the <code>target</code> element.</p>\n<p>The <code>locator</code> argument is the locator of the dragged element and the <code>target</code> is the locator of the target. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Drag%20And%20Drop\" class=\"name\">Drag And Drop</a></td>\n<td>css:div#element</td>\n<td>css:div.target</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Drag%20And%20Drop"
  },
  {
    "name": "Drag And Drop By Offset",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "xoffset",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "xoffset: int"
      },
      {
        "name": "yoffset",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "yoffset: int"
      }
    ],
    "doc": "<p>Drags the element identified with <code>locator</code> by <code>xoffset/yoffset</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The element will be moved by <code>xoffset</code> and <code>yoffset</code>, each of which is a negative or positive number specifying the offset.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Drag%20And%20Drop%20By%20Offset\" class=\"name\">Drag And Drop By Offset</a></td>\n<td>myElem</td>\n<td>50</td>\n<td>-35</td>\n<td># Move myElem 50px right and 35px down</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Drag%20And%20Drop%20By%20Offset"
  },
  {
    "name": "Element Attribute Value Should Be",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "attribute",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "attribute: str"
      },
      {
        "name": "expected",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "expected: None | str"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Verifies element identified by <code>locator</code> contains expected attribute value.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Example: <a href=\"#Element%20Attribute%20Value%20Should%20Be\" class=\"name\">Element Attribute Value Should Be</a> | css:img | href | value</p>\n<p>New in SeleniumLibrary 3.2.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Element%20Attribute%20Value%20Should%20Be"
  },
  {
    "name": "Element Should Be Disabled",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Verifies that element identified by <code>locator</code> is disabled.</p>\n<p>This keyword considers also elements that are read-only to be disabled.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Element%20Should%20Be%20Disabled"
  },
  {
    "name": "Element Should Be Enabled",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Verifies that element identified by <code>locator</code> is enabled.</p>\n<p>This keyword considers also elements that are read-only to be disabled.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Element%20Should%20Be%20Enabled"
  },
  {
    "name": "Element Should Be Focused",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Verifies that element identified by <code>locator</code> is focused.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>New in SeleniumLibrary 3.0.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Element%20Should%20Be%20Focused"
  },
  {
    "name": "Element Should Be Visible",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Verifies that the element identified by <code>locator</code> is visible.</p>\n<p>Herein, visible means that the element is logically visible, not optically visible in the current browser viewport. For example, an element that carries <code>display:none</code> is not logically visible, so using this keyword on that element would fail.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Element%20Should%20Be%20Visible"
  },
  {
    "name": "Element Should Contain",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "expected",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "expected: None | str"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      },
      {
        "name": "ignore_case",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case: bool = False"
      }
    ],
    "doc": "<p>Verifies that element <code>locator</code> contains text <code>expected</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be set to True to compare case insensitive, default is False. New in SeleniumLibrary 3.1.</p>\n<p><code>ignore_case</code> argument is new in SeleniumLibrary 3.1.</p>\n<p>Use <a href=\"#Element%20Text%20Should%20Be\" class=\"name\">Element Text Should Be</a> if you want to match the exact text, not a substring.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Element%20Should%20Contain"
  },
  {
    "name": "Element Should Not Be Visible",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Verifies that the element identified by <code>locator</code> is NOT visible.</p>\n<p>Passes if the element does not exists. See <a href=\"#Element%20Should%20Be%20Visible\" class=\"name\">Element Should Be Visible</a> for more information about visibility and supported arguments.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Element%20Should%20Not%20Be%20Visible"
  },
  {
    "name": "Element Should Not Contain",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "expected",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "expected: None | str"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      },
      {
        "name": "ignore_case",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case: bool = False"
      }
    ],
    "doc": "<p>Verifies that element <code>locator</code> does not contain text <code>expected</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be set to True to compare case insensitive, default is False.</p>\n<p><code>ignore_case</code> argument new in SeleniumLibrary 3.1.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Element%20Should%20Not%20Contain"
  },
  {
    "name": "Element Text Should Be",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "expected",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "expected: None | str"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      },
      {
        "name": "ignore_case",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case: bool = False"
      }
    ],
    "doc": "<p>Verifies that element <code>locator</code> contains exact the text <code>expected</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be set to True to compare case insensitive, default is False.</p>\n<p><code>ignore_case</code> argument is new in SeleniumLibrary 3.1.</p>\n<p>Use <a href=\"#Element%20Should%20Contain\" class=\"name\">Element Should Contain</a> if a substring match is desired.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Element%20Text%20Should%20Be"
  },
  {
    "name": "Element Text Should Not Be",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "not_expected",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "not_expected: None | str"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      },
      {
        "name": "ignore_case",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case: bool = False"
      }
    ],
    "doc": "<p>Verifies that element <code>locator</code> does not contain exact the text <code>not_expected</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be set to True to compare case insensitive, default is False.</p>\n<p>New in SeleniumLibrary 3.1.1</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Element%20Text%20Should%20Not%20Be"
  },
  {
    "name": "Execute Async Javascript",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "code",
        "type": {
          "name": "Any",
          "typedoc": "Any",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*code: Any"
      }
    ],
    "doc": "<p>Executes asynchronous JavaScript code with possible arguments.</p>\n<p>Similar to <a href=\"#Execute%20Javascript\" class=\"name\">Execute Javascript</a> except that scripts executed with this keyword must explicitly signal they are finished by invoking the provided callback. This callback is always injected into the executed function as the last argument.</p>\n<p>Scripts must complete within the script timeout or this keyword will fail. See the <a href=\"#Timeout\" class=\"name\">Timeout</a> section for more information.</p>\n<p>Starting from SeleniumLibrary 3.2 it is possible to provide JavaScript <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#selenium.webdriver.remote.webdriver.WebDriver.execute_async_script\">arguments</a> as part of <code>code</code> argument. See <a href=\"#Execute%20Javascript\" class=\"name\">Execute Javascript</a> for more details.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Execute%20Async%20Javascript\" class=\"name\">Execute Async JavaScript</a></td>\n<td>var callback = arguments[arguments.length - 1]; window.setTimeout(callback, 2000);</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Execute%20Async%20Javascript\" class=\"name\">Execute Async JavaScript</a></td>\n<td>${CURDIR}/async_js_to_execute.js</td>\n<td></td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td><a href=\"#Execute%20Async%20Javascript\" class=\"name\">Execute Async JavaScript</a></td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>var callback = arguments[arguments.length - 1];</td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>function answer(){callback(\"text\");};</td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>window.setTimeout(answer, 2000);</td>\n<td></td>\n</tr>\n<tr>\n<td><span class=\"name\">Should Be Equal</span></td>\n<td>${result}</td>\n<td>text</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Execute%20Async%20Javascript"
  },
  {
    "name": "Execute Javascript",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "code",
        "type": {
          "name": "Any",
          "typedoc": "Any",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*code: Any"
      }
    ],
    "doc": "<p>Executes the given JavaScript code with possible arguments.</p>\n<p><code>code</code> may be divided into multiple cells in the test data and <code>code</code> may contain multiple lines of code and arguments. In that case, the JavaScript code parts are concatenated together without adding spaces and optional arguments are separated from <code>code</code>.</p>\n<p>If <code>code</code> is a path to an existing file, the JavaScript to execute will be read from that file. Forward slashes work as a path separator on all operating systems.</p>\n<p>The JavaScript executes in the context of the currently selected frame or window as the body of an anonymous function. Use <code>window</code> to refer to the window of your application and <code>document</code> to refer to the document object of the current frame or window, e.g. <code>document.getElementById('example')</code>.</p>\n<p>This keyword returns whatever the executed JavaScript code returns. Return values are converted to the appropriate Python types.</p>\n<p>Starting from SeleniumLibrary 3.2 it is possible to provide JavaScript <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#selenium.webdriver.remote.webdriver.WebDriver.execute_script\">arguments</a> as part of <code>code</code> argument. The JavaScript code and arguments must be separated with <span class=\"name\">JAVASCRIPT</span> and <span class=\"name\">ARGUMENTS</span> markers and must be used exactly with this format. If the Javascript code is first, then the <span class=\"name\">JAVASCRIPT</span> marker is optional. The order of <span class=\"name\">JAVASCRIPT</span> and <span class=\"name\">ARGUMENTS</span> markers can be swapped, but if <span class=\"name\">ARGUMENTS</span> is the first marker, then <span class=\"name\">JAVASCRIPT</span> marker is mandatory. It is only allowed to use <span class=\"name\">JAVASCRIPT</span> and <span class=\"name\">ARGUMENTS</span> markers only one time in the <code>code</code> argument.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Execute%20Javascript\" class=\"name\">Execute JavaScript</a></td>\n<td>window.myFunc('arg1', 'arg2')</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Execute%20Javascript\" class=\"name\">Execute JavaScript</a></td>\n<td>${CURDIR}/js_to_execute.js</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Execute%20Javascript\" class=\"name\">Execute JavaScript</a></td>\n<td>alert(arguments[0]);</td>\n<td>ARGUMENTS</td>\n<td>123</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Execute%20Javascript\" class=\"name\">Execute JavaScript</a></td>\n<td>ARGUMENTS</td>\n<td>123</td>\n<td>JAVASCRIPT</td>\n<td>alert(arguments[0]);</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Execute%20Javascript"
  },
  {
    "name": "Frame Should Contain",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "text",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "text: str"
      },
      {
        "name": "loglevel",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "TRACE",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "loglevel: str = TRACE"
      }
    ],
    "doc": "<p>Verifies that frame identified by <code>locator</code> contains <code>text</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about the <code>loglevel</code> argument.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Frame%20Should%20Contain"
  },
  {
    "name": "Get Action Chain Delay",
    "library": "SeleniumLibrary",
    "args": [],
    "doc": "<p>Gets the currently stored value for chain_delay_value in timestr format.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Action%20Chain%20Delay"
  },
  {
    "name": "Get All Links",
    "library": "SeleniumLibrary",
    "args": [],
    "doc": "<p>Returns a list containing ids of all links found in current page.</p>\n<p>If a link has no id, an empty string will be in the list instead.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20All%20Links"
  },
  {
    "name": "Get Browser Aliases",
    "library": "SeleniumLibrary",
    "args": [],
    "doc": "<p>Returns aliases of all active browser that has an alias as NormalizedDict. The dictionary contains the aliases as keys and the index as value. This can be accessed as dictionary <code>${aliases.key}</code> or as list <code>@{aliases}[0]</code>.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"https://example.com\">https://example.com</a></td>\n<td>alias=BrowserA</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"https://example.com\">https://example.com</a></td>\n<td>alias=BrowserB</td>\n<td></td>\n</tr>\n<tr>\n<td>&amp;{aliases}</td>\n<td><a href=\"#Get%20Browser%20Aliases\" class=\"name\">Get Browser Aliases</a></td>\n<td></td>\n<td># &amp;{aliases} = { BrowserA=1|BrowserB=2 }</td>\n</tr>\n<tr>\n<td><span class=\"name\">Log</span></td>\n<td>${aliases.BrowserA}</td>\n<td></td>\n<td># logs <code>1</code></td>\n</tr>\n<tr>\n<td>FOR</td>\n<td>${alias}</td>\n<td>IN</td>\n<td>@{aliases}</td>\n</tr>\n<tr>\n<td></td>\n<td><span class=\"name\">Log</span></td>\n<td>${alias}</td>\n<td># logs <code>BrowserA</code> and <code>BrowserB</code></td>\n</tr>\n<tr>\n<td>END</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>See <a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a> for more information and examples.</p>\n<p>New in SeleniumLibrary 4.0</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Browser%20Aliases"
  },
  {
    "name": "Get Browser Ids",
    "library": "SeleniumLibrary",
    "args": [],
    "doc": "<p>Returns index of all active browser as list.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>@{browser_ids}=</td>\n<td>Get Browser Ids</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>FOR</td>\n<td>${id}</td>\n<td>IN</td>\n<td>@{browser_ids}</td>\n</tr>\n<tr>\n<td></td>\n<td>@{window_titles}=</td>\n<td>Get Window Titles</td>\n<td>browser=${id}</td>\n</tr>\n<tr>\n<td></td>\n<td>Log</td>\n<td>Browser ${id} has these windows: ${window_titles}</td>\n<td></td>\n</tr>\n<tr>\n<td>END</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>See <a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a> for more information and examples.</p>\n<p>New in SeleniumLibrary 4.0</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Browser%20Ids"
  },
  {
    "name": "Get Cookie",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "name",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name: str"
      }
    ],
    "doc": "<p>Returns information of cookie with <code>name</code> as an object.</p>\n<p>If no cookie is found with <code>name</code>, keyword fails. The cookie object contains details about the cookie. Attributes available in the object are documented in the table below.</p>\n<table border=\"1\">\n<tr>\n<th>Attribute</th>\n<th>Explanation</th>\n</tr>\n<tr>\n<td>name</td>\n<td>The name of a cookie.</td>\n</tr>\n<tr>\n<td>value</td>\n<td>Value of the cookie.</td>\n</tr>\n<tr>\n<td>path</td>\n<td>Indicates a URL path, for example <code>/</code>.</td>\n</tr>\n<tr>\n<td>domain</td>\n<td>The domain, the cookie is visible to.</td>\n</tr>\n<tr>\n<td>secure</td>\n<td>When true, the cookie is only used with HTTPS connections.</td>\n</tr>\n<tr>\n<td>httpOnly</td>\n<td>When true, the cookie is not accessible via JavaScript.</td>\n</tr>\n<tr>\n<td>expiry</td>\n<td>Python datetime object indicating when the cookie expires.</td>\n</tr>\n<tr>\n<td>extra</td>\n<td>Possible attributes outside of the WebDriver specification</td>\n</tr>\n</table>\n<p>See the <a href=\"https://w3c.github.io/webdriver/#cookies\">WebDriver specification</a> for details about the cookie information. Notice that <code>expiry</code> is specified as a <a href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime\">datetime object</a>, not as seconds since Unix Epoch like WebDriver natively does.</p>\n<p>In some cases, example when running a browser in the cloud, it is possible that the cookie contains other attributes than is defined in the <a href=\"https://w3c.github.io/webdriver/#cookies\">WebDriver specification</a>. These other attributes are available in an <code>extra</code> attribute in the cookie object and it contains a dictionary of the other attributes. The <code>extra</code> attribute is new in SeleniumLibrary 4.0.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Add%20Cookie\" class=\"name\">Add Cookie</a></td>\n<td>foo</td>\n<td>bar</td>\n</tr>\n<tr>\n<td>${cookie} =</td>\n<td><a href=\"#Get%20Cookie\" class=\"name\">Get Cookie</a></td>\n<td>foo</td>\n</tr>\n<tr>\n<td><span class=\"name\">Should Be Equal</span></td>\n<td>${cookie.name}</td>\n<td>foo</td>\n</tr>\n<tr>\n<td><span class=\"name\">Should Be Equal</span></td>\n<td>${cookie.value}</td>\n<td>bar</td>\n</tr>\n<tr>\n<td><span class=\"name\">Should Be True</span></td>\n<td>${cookie.expiry.year} &gt; 2017</td>\n<td></td>\n</tr>\n</table>\n<p>New in SeleniumLibrary 3.0.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Cookie"
  },
  {
    "name": "Get Cookies",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "as_dict",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "as_dict: bool = False"
      }
    ],
    "doc": "<p>Returns all cookies of the current page.</p>\n<p>If <code>as_dict</code> argument evaluates as false, see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a> for more details, then cookie information is returned as a single string in format <code>name1=value1; name2=value2; name3=value3</code>. When <code>as_dict</code> argument evaluates as true, cookie information is returned as Robot Framework dictionary format. The string format can be used, for example, for logging purposes or in headers when sending HTTP requests. The dictionary format is helpful when the result can be passed to requests library's Create Session keyword's optional cookies parameter.</p>\n<p>The <span class=\"name\">` as_dict</span>` argument is new in SeleniumLibrary 3.3</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Cookies"
  },
  {
    "name": "Get Dom Attribute",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "attribute",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "attribute: str"
      }
    ],
    "doc": "<p>Returns the value of <code>attribute</code> from the element <code>locator</code>. <a href=\"#Get%20Dom%20Attribute\" class=\"name\">Get DOM Attribute</a> keyword only returns attributes declared within the element's HTML markup.  If the requested attribute is not there, the keyword returns ${None}.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${id}=</td>\n<td><a href=\"#Get%20Dom%20Attribute\" class=\"name\">Get DOM Attribute</a></td>\n<td>css:h1</td>\n<td>id</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Dom%20Attribute"
  },
  {
    "name": "Get Element Attribute",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "attribute",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "attribute: str"
      }
    ],
    "doc": "<p>Returns the value of <code>attribute</code> from the element <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${id}=</td>\n<td><a href=\"#Get%20Element%20Attribute\" class=\"name\">Get Element Attribute</a></td>\n<td>css:h1</td>\n<td>id</td>\n</tr>\n</table>\n<p>Passing attribute name as part of the <code>locator</code> was removed in SeleniumLibrary 3.2. The explicit <code>attribute</code> argument should be used instead.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Element%20Attribute"
  },
  {
    "name": "Get Element Count",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Returns the number of elements matching <code>locator</code>.</p>\n<p>If you wish to assert the number of matching elements, use <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> with <code>limit</code> argument. Keyword will always return an integer.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${count} =</td>\n<td><a href=\"#Get%20Element%20Count\" class=\"name\">Get Element Count</a></td>\n<td>name:div_name</td>\n</tr>\n<tr>\n<td><span class=\"name\">Should Be True</span></td>\n<td>${count} &gt; 2</td>\n<td></td>\n</tr>\n</table>\n<p>New in SeleniumLibrary 3.0.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Element%20Count"
  },
  {
    "name": "Get Element Size",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Returns width and height of the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Both width and height are returned as integers.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${width}</td>\n<td>${height} =</td>\n<td><a href=\"#Get%20Element%20Size\" class=\"name\">Get Element Size</a></td>\n<td>css:div#container</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Element%20Size"
  },
  {
    "name": "Get Horizontal Position",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Returns the horizontal position of the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The position is returned in pixels off the left side of the page, as an integer.</p>\n<p>See also <a href=\"#Get%20Vertical%20Position\" class=\"name\">Get Vertical Position</a>.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Horizontal%20Position"
  },
  {
    "name": "Get List Items",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "values",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "values: bool = False"
      }
    ],
    "doc": "<p>Returns all labels or values of selection list <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Returns visible labels by default, but values can be returned by setting the <code>values</code> argument to a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>).</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${labels} =</td>\n<td><a href=\"#Get%20List%20Items\" class=\"name\">Get List Items</a></td>\n<td>mylist</td>\n<td></td>\n</tr>\n<tr>\n<td>${values} =</td>\n<td><a href=\"#Get%20List%20Items\" class=\"name\">Get List Items</a></td>\n<td>css:#example select</td>\n<td>values=True</td>\n</tr>\n</table>\n<p>Support to return values is new in SeleniumLibrary 3.0.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20List%20Items"
  },
  {
    "name": "Get Location",
    "library": "SeleniumLibrary",
    "args": [],
    "doc": "<p>Returns the current browser window URL.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Location"
  },
  {
    "name": "Get Locations",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "browser",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "CURRENT",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "browser: str = CURRENT"
      }
    ],
    "doc": "<p>Returns and logs URLs of all windows of the selected browser.</p>\n<p><b>Browser Scope:</b></p>\n<p>The <code>browser</code> argument specifies the browser that shall return its windows information.</p>\n<ul>\n<li><code>browser</code> can be <code>index_or_alias</code> like in <a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a>.</li>\n</ul>\n<ul>\n<li>If <code>browser</code> is <code>CURRENT</code> (default, case-insensitive) the currently active browser is selected.</li>\n</ul>\n<ul>\n<li>If <code>browser</code> is <code>ALL</code> (case-insensitive) the window information of all windows of all opened browsers are returned.</li>\n</ul>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Locations"
  },
  {
    "name": "Get Property",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "property",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "property: str"
      }
    ],
    "doc": "<p>Returns the value of <code>property</code> from the element <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${text_length}=</td>\n<td><a href=\"#Get%20Property\" class=\"name\">Get Property</a></td>\n<td>css:h1</td>\n<td>text_length</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Property"
  },
  {
    "name": "Get Selected List Label",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Returns the label of selected option from selection list <code>locator</code>.</p>\n<p>If there are multiple selected options, the label of the first option is returned.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Selected%20List%20Label"
  },
  {
    "name": "Get Selected List Labels",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Returns labels of selected options from selection list <code>locator</code>.</p>\n<p>Starting from SeleniumLibrary 3.0, returns an empty list if there are no selections. In earlier versions, this caused an error.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Selected%20List%20Labels"
  },
  {
    "name": "Get Selected List Value",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Returns the value of selected option from selection list <code>locator</code>.</p>\n<p>If there are multiple selected options, the value of the first option is returned.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Selected%20List%20Value"
  },
  {
    "name": "Get Selected List Values",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Returns values of selected options from selection list <code>locator</code>.</p>\n<p>Starting from SeleniumLibrary 3.0, returns an empty list if there are no selections. In earlier versions, this caused an error.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Selected%20List%20Values"
  },
  {
    "name": "Get Selenium Implicit Wait",
    "library": "SeleniumLibrary",
    "args": [],
    "doc": "<p>Gets the implicit wait value used by Selenium.</p>\n<p>The value is returned as a human-readable string like <code>1 second</code>.</p>\n<p>See the <a href=\"#Implicit%20wait\" class=\"name\">Implicit wait</a> section above for more information.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Selenium%20Implicit%20Wait"
  },
  {
    "name": "Get Selenium Page Load Timeout",
    "library": "SeleniumLibrary",
    "args": [],
    "doc": "<p>Gets the time to wait for a page load to complete before raising a timeout exception.</p>\n<p>The value is returned as a human-readable string like <code>1 second</code>.</p>\n<p>See the <a href=\"#Page%20load\" class=\"name\">Page load</a> section above for more information.</p>\n<p>New in SeleniumLibrary 6.1</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Selenium%20Page%20Load%20Timeout"
  },
  {
    "name": "Get Selenium Speed",
    "library": "SeleniumLibrary",
    "args": [],
    "doc": "<p>Gets the delay that is waited after each Selenium command.</p>\n<p>The value is returned as a human-readable string like <code>1 second</code>.</p>\n<p>See the <a href=\"#Selenium%20speed\" class=\"name\">Selenium Speed</a> section above for more information.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Selenium%20Speed"
  },
  {
    "name": "Get Selenium Timeout",
    "library": "SeleniumLibrary",
    "args": [],
    "doc": "<p>Gets the timeout that is used by various keywords.</p>\n<p>The value is returned as a human-readable string like <code>1 second</code>.</p>\n<p>See the <a href=\"#Timeout\" class=\"name\">Timeout</a> section above for more information.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Selenium%20Timeout"
  },
  {
    "name": "Get Session Id",
    "library": "SeleniumLibrary",
    "args": [],
    "doc": "<p>Returns the currently active browser session id.</p>\n<p>New in SeleniumLibrary 3.2</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Session%20Id"
  },
  {
    "name": "Get Source",
    "library": "SeleniumLibrary",
    "args": [],
    "doc": "<p>Returns the entire HTML source of the current page or frame.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Source"
  },
  {
    "name": "Get Table Cell",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "row",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "row: int"
      },
      {
        "name": "column",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "column: int"
      },
      {
        "name": "loglevel",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "TRACE",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "loglevel: str = TRACE"
      }
    ],
    "doc": "<p>Returns contents of a table cell.</p>\n<p>The table is located using the <code>locator</code> argument and its cell found using <code>row</code> and <code>column</code>. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Both row and column indexes start from 1, and header and footer rows are included in the count. It is possible to refer to rows and columns from the end by using negative indexes so that -1 is the last row/column, -2 is the second last, and so on.</p>\n<p>All <code>&lt;th&gt;</code> and <code>&lt;td&gt;</code> elements anywhere in the table are considered to be cells.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about the <code>loglevel</code> argument.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Table%20Cell"
  },
  {
    "name": "Get Text",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Returns the text value of the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Text"
  },
  {
    "name": "Get Title",
    "library": "SeleniumLibrary",
    "args": [],
    "doc": "<p>Returns the title of the current page.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Title"
  },
  {
    "name": "Get Value",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Returns the value attribute of the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Value"
  },
  {
    "name": "Get Vertical Position",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Returns the vertical position of the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The position is returned in pixels off the top of the page, as an integer.</p>\n<p>See also <a href=\"#Get%20Horizontal%20Position\" class=\"name\">Get Horizontal Position</a>.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Vertical%20Position"
  },
  {
    "name": "Get WebElement",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Returns the first WebElement matching the given <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20WebElement"
  },
  {
    "name": "Get WebElements",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Returns a list of WebElement objects matching the <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Starting from SeleniumLibrary 3.0, the keyword returns an empty list if there are no matching elements. In previous releases, the keyword failed in this case.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20WebElements"
  },
  {
    "name": "Get Window Handles",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "browser",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "CURRENT",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "browser: str = CURRENT"
      }
    ],
    "doc": "<p>Returns all child window handles of the selected browser as a list.</p>\n<p>Can be used as a list of windows to exclude with <span class=\"name\">Select Window</span>.</p>\n<p>How to select the <code>browser</code> scope of this keyword, see <a href=\"#Get%20Locations\" class=\"name\">Get Locations</a>.</p>\n<p>Prior to SeleniumLibrary 3.0, this keyword was named <span class=\"name\">List Windows</span>.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Window%20Handles"
  },
  {
    "name": "Get Window Identifiers",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "browser",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "CURRENT",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "browser: str = CURRENT"
      }
    ],
    "doc": "<p>Returns and logs id attributes of all windows of the selected browser.</p>\n<p>How to select the <code>browser</code> scope of this keyword, see <a href=\"#Get%20Locations\" class=\"name\">Get Locations</a>.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Window%20Identifiers"
  },
  {
    "name": "Get Window Names",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "browser",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "CURRENT",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "browser: str = CURRENT"
      }
    ],
    "doc": "<p>Returns and logs names of all windows of the selected browser.</p>\n<p>How to select the <code>browser</code> scope of this keyword, see <a href=\"#Get%20Locations\" class=\"name\">Get Locations</a>.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Window%20Names"
  },
  {
    "name": "Get Window Position",
    "library": "SeleniumLibrary",
    "args": [],
    "doc": "<p>Returns current window position.</p>\n<p>The position is relative to the top left corner of the screen. Returned values are integers. See also <a href=\"#Set%20Window%20Position\" class=\"name\">Set Window Position</a>.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${x}</td>\n<td>${y}=</td>\n<td><a href=\"#Get%20Window%20Position\" class=\"name\">Get Window Position</a></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Window%20Position"
  },
  {
    "name": "Get Window Size",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "inner",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "inner: bool = False"
      }
    ],
    "doc": "<p>Returns current window width and height as integers.</p>\n<p>See also <a href=\"#Set%20Window%20Size\" class=\"name\">Set Window Size</a>.</p>\n<p>If <code>inner</code> parameter is set to True, keyword returns HTML DOM window.innerWidth and window.innerHeight properties. See <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a> for more details on how to set boolean arguments. The <code>inner</code> is new in SeleniumLibrary 4.0.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${width}</td>\n<td>${height}=</td>\n<td><a href=\"#Get%20Window%20Size\" class=\"name\">Get Window Size</a></td>\n<td></td>\n</tr>\n<tr>\n<td>${width}</td>\n<td>${height}=</td>\n<td><a href=\"#Get%20Window%20Size\" class=\"name\">Get Window Size</a></td>\n<td>True</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Window%20Size"
  },
  {
    "name": "Get Window Titles",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "browser",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "CURRENT",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "browser: str = CURRENT"
      }
    ],
    "doc": "<p>Returns and logs titles of all windows of the selected browser.</p>\n<p>How to select the <code>browser</code> scope of this keyword, see <a href=\"#Get%20Locations\" class=\"name\">Get Locations</a>.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Get%20Window%20Titles"
  },
  {
    "name": "Go Back",
    "library": "SeleniumLibrary",
    "args": [],
    "doc": "<p>Simulates the user clicking the back button on their browser.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Go%20Back"
  },
  {
    "name": "Go To",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "url",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "url"
      }
    ],
    "doc": "<p>Navigates the current browser window to the provided <code>url</code>.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Go%20To"
  },
  {
    "name": "Handle Alert",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "action",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "ACCEPT",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "action: str = ACCEPT"
      },
      {
        "name": "timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout: timedelta | None = None"
      }
    ],
    "doc": "<p>Handles the current alert and returns its message.</p>\n<p>By default, the alert is accepted, but this can be controlled with the <code>action</code> argument that supports the following case-insensitive values:</p>\n<ul>\n<li><code>ACCEPT</code>: Accept the alert i.e. press <code>Ok</code>. Default.</li>\n<li><code>DISMISS</code>: Dismiss the alert i.e. press <code>Cancel</code>.</li>\n<li><code>LEAVE</code>: Leave the alert open.</li>\n</ul>\n<p>The <code>timeout</code> argument specifies how long to wait for the alert to appear. If it is not given, the global default <a href=\"#Timeout\" class=\"name\">timeout</a> is used instead.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Handle Alert</td>\n<td></td>\n<td></td>\n<td># Accept alert.</td>\n</tr>\n<tr>\n<td>Handle Alert</td>\n<td>action=DISMISS</td>\n<td></td>\n<td># Dismiss alert.</td>\n</tr>\n<tr>\n<td>Handle Alert</td>\n<td>timeout=10 s</td>\n<td></td>\n<td># Use custom timeout and accept alert.</td>\n</tr>\n<tr>\n<td>Handle Alert</td>\n<td>DISMISS</td>\n<td>1 min</td>\n<td># Use custom timeout and dismiss alert.</td>\n</tr>\n<tr>\n<td>${message} =</td>\n<td>Handle Alert</td>\n<td></td>\n<td># Accept alert and get its message.</td>\n</tr>\n<tr>\n<td>${message} =</td>\n<td>Handle Alert</td>\n<td>LEAVE</td>\n<td># Leave alert open and get its message.</td>\n</tr>\n</table>\n<p>New in SeleniumLibrary 3.0.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Handle%20Alert"
  },
  {
    "name": "Input Password",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "password",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "password: str"
      },
      {
        "name": "clear",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "clear: bool = True"
      }
    ],
    "doc": "<p>Types the given password into the text field identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. See <a href=\"#Input%20Text\" class=\"name\">Input Text</a> for <code>clear</code> argument details.</p>\n<p>Difference compared to <a href=\"#Input%20Text\" class=\"name\">Input Text</a> is that this keyword does not log the given password on the INFO level. Notice that if you use the keyword like</p>\n<table border=\"1\">\n<tr>\n<td>Input Password</td>\n<td>password_field</td>\n<td>password</td>\n</tr>\n</table>\n<p>the password is shown as a normal keyword argument. A way to avoid that is using variables like</p>\n<table border=\"1\">\n<tr>\n<td>Input Password</td>\n<td>password_field</td>\n<td>${PASSWORD}</td>\n</tr>\n</table>\n<p>Please notice that Robot Framework logs all arguments using the TRACE level and tests must not be executed using level below DEBUG if the password should not be logged in any format.</p>\n<p>The <span class=\"name\">clear</span> argument is new in SeleniumLibrary 4.0. Hiding password logging from Selenium logs is new in SeleniumLibrary 4.2.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Input%20Password"
  },
  {
    "name": "Input Text",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "text",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "text: str"
      },
      {
        "name": "clear",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "True",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "clear: bool = True"
      }
    ],
    "doc": "<p>Types the given <code>text</code> into the text field identified by <code>locator</code>.</p>\n<p>When <code>clear</code> is true, the input element is cleared before the text is typed into the element. When false, the previous text is not cleared from the element. Use <a href=\"#Input%20Password\" class=\"name\">Input Password</a> if you do not want the given <code>text</code> to be logged.</p>\n<p>If <a href=\"https://github.com/SeleniumHQ/selenium/wiki/Grid2\">Selenium Grid</a> is used and the <code>text</code> argument points to a file in the file system, then this keyword prevents the Selenium to transfer the file to the Selenium Grid hub. Instead, this keyword will send the <code>text</code> string as is to the element. If a file should be transferred to the hub and upload should be performed, please use <a href=\"#Choose%20File\" class=\"name\">Choose File</a> keyword.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. See the <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a> section how Boolean values are handled.</p>\n<p>Disabling the file upload the Selenium Grid node and the <span class=\"name\">clear</span> argument are new in SeleniumLibrary 4.0</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Input%20Text"
  },
  {
    "name": "Input Text Into Alert",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "text",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "text: str"
      },
      {
        "name": "action",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "ACCEPT",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "action: str = ACCEPT"
      },
      {
        "name": "timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout: timedelta | None = None"
      }
    ],
    "doc": "<p>Types the given <code>text</code> into an input field in an alert.</p>\n<p>The alert is accepted by default, but that behavior can be controlled by using the <code>action</code> argument same way as with <a href=\"#Handle%20Alert\" class=\"name\">Handle Alert</a>.</p>\n<p><code>timeout</code> specifies how long to wait for the alert to appear. If it is not given, the global default <a href=\"#Timeout\" class=\"name\">timeout</a> is used instead.</p>\n<p>New in SeleniumLibrary 3.0.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Input%20Text%20Into%20Alert"
  },
  {
    "name": "List Selection Should Be",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "expected",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*expected: str"
      }
    ],
    "doc": "<p>Verifies selection list <code>locator</code> has <code>expected</code> options selected.</p>\n<p>It is possible to give expected options both as visible labels and as values. Starting from SeleniumLibrary 3.0, mixing labels and values is not possible. Order of the selected options is not validated.</p>\n<p>If no expected options are given, validates that the list has no selections. A more explicit alternative is using <a href=\"#List%20Should%20Have%20No%20Selections\" class=\"name\">List Should Have No Selections</a>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#List%20Selection%20Should%20Be\" class=\"name\">List Selection Should Be</a></td>\n<td>gender</td>\n<td>Female</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#List%20Selection%20Should%20Be\" class=\"name\">List Selection Should Be</a></td>\n<td>interests</td>\n<td>Test Automation</td>\n<td>Python</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#List%20Selection%20Should%20Be"
  },
  {
    "name": "List Should Have No Selections",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Verifies selection list <code>locator</code> has no options selected.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#List%20Should%20Have%20No%20Selections"
  },
  {
    "name": "Location Should Be",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "url",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "url: str"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Verifies that the current URL is exactly <code>url</code>.</p>\n<p>The <code>url</code> argument contains the exact url that should exist in browser.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p><code>message</code> argument is new in SeleniumLibrary 3.2.0.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Location%20Should%20Be"
  },
  {
    "name": "Location Should Contain",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "expected",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "expected: str"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Verifies that the current URL contains <code>expected</code>.</p>\n<p>The <code>expected</code> argument contains the expected value in url.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p><code>message</code> argument is new in SeleniumLibrary 3.2.0.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Location%20Should%20Contain"
  },
  {
    "name": "Log Location",
    "library": "SeleniumLibrary",
    "args": [],
    "doc": "<p>Logs and returns the current browser window URL.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Log%20Location"
  },
  {
    "name": "Log Source",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "loglevel",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "INFO",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "loglevel: str = INFO"
      }
    ],
    "doc": "<p>Logs and returns the HTML source of the current page or frame.</p>\n<p>The <code>loglevel</code> argument defines the used log level. Valid log levels are <code>WARN</code>, <code>INFO</code> (default), <code>DEBUG</code>, <code>TRACE</code> and <code>NONE</code> (no logging).</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Log%20Source"
  },
  {
    "name": "Log Title",
    "library": "SeleniumLibrary",
    "args": [],
    "doc": "<p>Logs and returns the title of the current page.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Log%20Title"
  },
  {
    "name": "Maximize Browser Window",
    "library": "SeleniumLibrary",
    "args": [],
    "doc": "<p>Maximizes current browser window.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Maximize%20Browser%20Window"
  },
  {
    "name": "Minimize Browser Window",
    "library": "SeleniumLibrary",
    "args": [],
    "doc": "<p>Minimizes current browser window.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Minimize%20Browser%20Window"
  },
  {
    "name": "Mouse Down",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Simulates pressing the left mouse button on the element <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The element is pressed without releasing the mouse button.</p>\n<p>See also the more specific keywords <a href=\"#Mouse%20Down%20On%20Image\" class=\"name\">Mouse Down On Image</a> and <a href=\"#Mouse%20Down%20On%20Link\" class=\"name\">Mouse Down On Link</a>.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Mouse%20Down"
  },
  {
    "name": "Mouse Down On Image",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Simulates a mouse down event on an image identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, images are searched using <code>id</code>, <code>name</code>, <code>src</code> and <code>alt</code>.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Mouse%20Down%20On%20Image"
  },
  {
    "name": "Mouse Down On Link",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Simulates a mouse down event on a link identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, links are searched using <code>id</code>, <code>name</code>, <code>href</code> and the link text.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Mouse%20Down%20On%20Link"
  },
  {
    "name": "Mouse Out",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Simulates moving the mouse away from the element <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Mouse%20Out"
  },
  {
    "name": "Mouse Over",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Simulates hovering the mouse over the element <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Mouse%20Over"
  },
  {
    "name": "Mouse Up",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Simulates releasing the left mouse button on the element <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Mouse%20Up"
  },
  {
    "name": "Open Browser",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "url",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "url: str | None = None"
      },
      {
        "name": "browser",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "firefox",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "browser: str = firefox"
      },
      {
        "name": "alias",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "alias: str | None = None"
      },
      {
        "name": "remote_url",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "remote_url: bool | str = False"
      },
      {
        "name": "desired_capabilities",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "dict",
              "typedoc": "dictionary",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "desired_capabilities: dict | None | str = None"
      },
      {
        "name": "ff_profile_dir",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "FirefoxProfile",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ff_profile_dir: FirefoxProfile | str | None = None"
      },
      {
        "name": "options",
        "type": {
          "name": "Any",
          "typedoc": "Any",
          "nested": [],
          "union": false
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "options: Any = None"
      },
      {
        "name": "service_log_path",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "service_log_path: str | None = None"
      },
      {
        "name": "executable_path",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "executable_path: str | None = None"
      },
      {
        "name": "service",
        "type": {
          "name": "Any",
          "typedoc": "Any",
          "nested": [],
          "union": false
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "service: Any = None"
      }
    ],
    "doc": "<p>Opens a new browser instance to the optional <code>url</code>.</p>\n<p>The <code>browser</code> argument specifies which browser to use. The supported browsers are listed in the table below. The browser names are case-insensitive and some browsers have multiple supported names.</p>\n<table border=\"1\">\n<tr>\n<th>Browser</th>\n<th>Name(s)</th>\n</tr>\n<tr>\n<td>Firefox</td>\n<td>firefox, ff</td>\n</tr>\n<tr>\n<td>Google Chrome</td>\n<td>googlechrome, chrome, gc</td>\n</tr>\n<tr>\n<td>Headless Firefox</td>\n<td>headlessfirefox</td>\n</tr>\n<tr>\n<td>Headless Chrome</td>\n<td>headlesschrome</td>\n</tr>\n<tr>\n<td>Internet Explorer</td>\n<td>internetexplorer, ie</td>\n</tr>\n<tr>\n<td>Edge</td>\n<td>edge</td>\n</tr>\n<tr>\n<td>Safari</td>\n<td>safari</td>\n</tr>\n</table>\n<p>To be able to actually use one of these browsers, you need to have a matching Selenium browser driver available. See the <a href=\"https://github.com/robotframework/SeleniumLibrary#browser-drivers\">project documentation</a> for more details.</p>\n<p>After opening the browser, it is possible to use optional <code>url</code> to navigate the browser to the desired address.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Chrome</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Firefox</td>\n<td>alias=Firefox</td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Edge</td>\n<td>remote_url=http://127.0.0.1:4444/wd/hub</td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td>about:blank</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td>browser=Chrome</td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>Optional <code>alias</code> is an alias given for this browser instance and it can be used for switching between browsers. When same <code>alias</code> is given with two <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a> keywords, the first keyword will open a new browser, but the second one will switch to the already opened browser and will not open a new browser. The <code>alias</code> definition overrules <code>browser</code> definition. When same <code>alias</code> is used but a different <code>browser</code> is defined, then switch to a browser with same alias is done and new browser is not opened. An alternative approach for switching is using an index returned by this keyword. These indices start from 1, are incremented when new browsers are opened, and reset back to 1 when <a href=\"#Close%20All%20Browsers\" class=\"name\">Close All Browsers</a> is called. See <a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a> for more information and examples.</p>\n<p>Alias examples:</p>\n<table border=\"1\">\n<tr>\n<td>${1_index} =</td>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Chrome</td>\n<td>alias=Chrome</td>\n<td># Opens new browser because alias is new.</td>\n</tr>\n<tr>\n<td>${2_index} =</td>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Firefox</td>\n<td></td>\n<td># Opens new browser because alias is not defined.</td>\n</tr>\n<tr>\n<td>${3_index} =</td>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Chrome</td>\n<td>alias=Chrome</td>\n<td># Switches to the browser with Chrome alias.</td>\n</tr>\n<tr>\n<td>${4_index} =</td>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Chrome</td>\n<td>alias=${1_index}</td>\n<td># Switches to the browser with Chrome alias.</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${1_index}</td>\n<td>${3_index}</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${1_index}</td>\n<td>${4_index}</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${2_index}</td>\n<td>${2}</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>Optional <code>remote_url</code> is the URL for a <a href=\"https://github.com/SeleniumHQ/selenium/wiki/Grid2\">Selenium Grid</a>.</p>\n<p>Optional <code>desired_capabilities</code> is deprecated and will be removed in the next release. Capabilities of each individual browser is now done through options or services. Please refer to those arguments for configuring specific browsers.</p>\n<p>Optional <code>ff_profile_dir</code> is the path to the Firefox profile directory if you wish to overwrite the default profile Selenium uses. The <code>ff_profile_dir</code> can also be an instance of the <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_firefox/selenium.webdriver.firefox.firefox_profile.html\">selenium.webdriver.FirefoxProfile</a> . As a third option, it is possible to use <span class=\"name\">FirefoxProfile</span> methods and attributes to define the profile using methods and attributes in the same way as with <code>options</code> argument. Example: It is possible to use FirefoxProfile <span class=\"name\">set_preference</span> to define different profile settings. See <code>options</code> argument documentation in below how to handle backslash escaping.</p>\n<p>Example for FirefoxProfile</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Firefox</td>\n<td>ff_profile_dir=/path/to/profile</td>\n<td># Using profile from disk.</td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Firefox</td>\n<td>ff_profile_dir=${FirefoxProfile_instance}</td>\n<td># Using instance of FirefoxProfile.</td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Firefox</td>\n<td>ff_profile_dir=set_preference(\"key\", \"value\");set_preference(\"other\", \"setting\")</td>\n<td># Defining profile using FirefoxProfile mehtods.</td>\n</tr>\n</table>\n<p>Optional <code>options</code> argument allows defining browser specific Selenium options. Example for Chrome, the <code>options</code> argument allows defining the following <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_chrome/selenium.webdriver.chrome.options.html#selenium.webdriver.chrome.options.Options\">methods and attributes</a> and for Firefox these <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_firefox/selenium.webdriver.firefox.options.html?highlight=firefox#selenium.webdriver.firefox.options.Options\">methods and attributes</a> are available. Selenium options are also supported, when <code>remote_url</code> argument is used.</p>\n<p>The SeleniumLibrary <code>options</code> argument accepts Selenium options in two different formats: as a string and as Python object which is an instance of the Selenium options class.</p>\n<p>The string format uses a Python like syntax to define Selenium options methods or attributes.</p>\n<p>Example when using <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_chrome/selenium.webdriver.chrome.options.html#selenium.webdriver.chrome.options.Options\">Chrome options</a> method:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Chrome</td>\n<td>options=add_argument(\"--disable-popup-blocking\"); add_argument(\"--ignore-certificate-errors\")</td>\n<td># Sting format.</td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td>None</td>\n<td>Chrome</td>\n<td>options=binary_location=\"/path/to/binary\";add_argument(\"remote-debugging-port=port\")</td>\n<td># Start Chomium-based application.</td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td>None</td>\n<td>Chrome</td>\n<td>options=binary_location=r\"C:\\\\path\\\\to\\\\binary\"</td>\n<td># Windows OS path escaping.</td>\n</tr>\n</table>\n<p><code>options</code> argument also supports receiving the Selenium options as Python class instance.</p>\n<p>See the <span class=\"name\">Browser and Driver options</span> section for more details on how to use the either the string format or Python object syntax with the <code>options</code> argument.</p>\n<p>Optional <code>service_log_path</code> will be deprecated in the next release. Please use the browser specific <code>service</code> attribute instead. The <code>service_log_path</code> argument defines the name of the file where to write the browser driver logs. If the <code>service_log_path</code>  argument contains a marker <code>{index}</code>, it will be automatically replaced with unique running index preventing files to be overwritten. Indices start's from 1, and how they are represented can be customized using Python's <a href=\"https://docs.python.org/3/library/string.html#format-string-syntax\">format string syntax</a>.</p>\n<p>Optional <code>executable_path</code>  will be deprecated in the next release. Please use the <span class=\"name\">executable_path</span> and, if needed, <span class=\"name\">port</span> attribute on the <code>service</code> argument instead. The <code>executable_path</code> argument defines the path to the driver executable, example to a chromedriver or a geckodriver. If not defined it is assumed the executable is in the <a href=\"https://en.wikipedia.org/wiki/PATH_(variable)\">$PATH</a>.</p>\n<p>Optional <code>service</code> argument allows for managing the local drivers as well as setting some browser specific settings like logging. Service classes are not supported when <code>remote_url</code> argument is used. See the <span class=\"name\">Browser and Driver options</span> section for more details on how to use the <code>service</code> argument.</p>\n<p>If the provided configuration options are not enough, it is possible to use <a href=\"#Create%20Webdriver\" class=\"name\">Create Webdriver</a> to customize browser initialization even more.</p>\n<p>The <code>service</code> argument is new in SeleniumLibrary 6.4.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Open%20Browser"
  },
  {
    "name": "Open Context Menu",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Opens the context menu on the element identified by <code>locator</code>.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Open%20Context%20Menu"
  },
  {
    "name": "Page Should Contain",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "text",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "text: str"
      },
      {
        "name": "loglevel",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "TRACE",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "loglevel: str = TRACE"
      }
    ],
    "doc": "<p>Verifies that current page contains <code>text</code>.</p>\n<p>If this keyword fails, it automatically logs the page source using the log level specified with the optional <code>loglevel</code> argument. Valid log levels are <code>TRACE</code> (default), <code>DEBUG</code>, <code>INFO</code>, <code>WARN</code>, and <code>NONE</code>. If the log level is <code>NONE</code> or below the current active log level the source will not be logged.</p>\n<p>!! WARNING !! If you have an iframe selected, <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> will reset the frame reference back to the main frame. This is due to the fact that is searches for the <code>text</code> in all frames. To locate an element in an iframe after calling <span class=\"name\">Page Should Contian</span> one needs to (re)select the frame.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Page%20Should%20Contain"
  },
  {
    "name": "Page Should Contain Button",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      },
      {
        "name": "loglevel",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "TRACE",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "loglevel: str = TRACE"
      }
    ],
    "doc": "<p>Verifies button <code>locator</code> is found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, buttons are searched using <code>id</code>, <code>name</code>, and <code>value</code>.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Page%20Should%20Contain%20Button"
  },
  {
    "name": "Page Should Contain Checkbox",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      },
      {
        "name": "loglevel",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "TRACE",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "loglevel: str = TRACE"
      }
    ],
    "doc": "<p>Verifies checkbox <code>locator</code> is found from the current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Page%20Should%20Contain%20Checkbox"
  },
  {
    "name": "Page Should Contain Element",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "List",
              "typedoc": "list",
              "nested": [
                {
                  "name": "Union",
                  "typedoc": null,
                  "nested": [
                    {
                      "name": "WebElement",
                      "typedoc": null,
                      "nested": [],
                      "union": false
                    },
                    {
                      "name": "str",
                      "typedoc": "string",
                      "nested": [],
                      "union": false
                    }
                  ],
                  "union": true
                }
              ],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str | List[WebElement | str]"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      },
      {
        "name": "loglevel",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "TRACE",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "loglevel: str = TRACE"
      },
      {
        "name": "limit",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "limit: int | None = None"
      }
    ],
    "doc": "<p>Verifies that element <code>locator</code> is found on the current page.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>The <code>limit</code> argument can used to define how many elements the page should contain. When <code>limit</code> is <code>None</code> (default) page can contain one or more elements. When limit is a number, page must contain same number of elements.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about the <code>loglevel</code> argument.</p>\n<p>Examples assumes that locator matches to two elements.</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a></td>\n<td>div_name</td>\n<td>limit=1</td>\n<td># Keyword fails.</td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a></td>\n<td>div_name</td>\n<td>limit=2</td>\n<td># Keyword passes.</td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a></td>\n<td>div_name</td>\n<td>limit=none</td>\n<td># None is considered one or more.</td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a></td>\n<td>div_name</td>\n<td></td>\n<td># Same as above.</td>\n</tr>\n</table>\n<p>The <code>limit</code> argument is new in SeleniumLibrary 3.0.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Page%20Should%20Contain%20Element"
  },
  {
    "name": "Page Should Contain Image",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      },
      {
        "name": "loglevel",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "TRACE",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "loglevel: str = TRACE"
      }
    ],
    "doc": "<p>Verifies image identified by <code>locator</code> is found from current page.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, images are searched using <code>id</code>, <code>name</code>, <code>src</code> and <code>alt</code>.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Page%20Should%20Contain%20Image"
  },
  {
    "name": "Page Should Contain Link",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      },
      {
        "name": "loglevel",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "TRACE",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "loglevel: str = TRACE"
      }
    ],
    "doc": "<p>Verifies link identified by <code>locator</code> is found from current page.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, links are searched using <code>id</code>, <code>name</code>, <code>href</code> and the link text.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Page%20Should%20Contain%20Link"
  },
  {
    "name": "Page Should Contain List",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      },
      {
        "name": "loglevel",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "TRACE",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "loglevel: str = TRACE"
      }
    ],
    "doc": "<p>Verifies selection list <code>locator</code> is found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Page%20Should%20Contain%20List"
  },
  {
    "name": "Page Should Contain Radio Button",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      },
      {
        "name": "loglevel",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "TRACE",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "loglevel: str = TRACE"
      }
    ],
    "doc": "<p>Verifies radio button <code>locator</code> is found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, radio buttons are searched using <code>id</code>, <code>name</code> and <code>value</code>.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Page%20Should%20Contain%20Radio%20Button"
  },
  {
    "name": "Page Should Contain Textfield",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      },
      {
        "name": "loglevel",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "TRACE",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "loglevel: str = TRACE"
      }
    ],
    "doc": "<p>Verifies text field <code>locator</code> is found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Page%20Should%20Contain%20Textfield"
  },
  {
    "name": "Page Should Not Contain",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "text",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "text: str"
      },
      {
        "name": "loglevel",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "TRACE",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "loglevel: str = TRACE"
      }
    ],
    "doc": "<p>Verifies the current page does not contain <code>text</code>.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about the <code>loglevel</code> argument.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Page%20Should%20Not%20Contain"
  },
  {
    "name": "Page Should Not Contain Button",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      },
      {
        "name": "loglevel",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "TRACE",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "loglevel: str = TRACE"
      }
    ],
    "doc": "<p>Verifies button <code>locator</code> is not found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, buttons are searched using <code>id</code>, <code>name</code>, and <code>value</code>.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Page%20Should%20Not%20Contain%20Button"
  },
  {
    "name": "Page Should Not Contain Checkbox",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      },
      {
        "name": "loglevel",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "TRACE",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "loglevel: str = TRACE"
      }
    ],
    "doc": "<p>Verifies checkbox <code>locator</code> is not found from the current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Page%20Should%20Not%20Contain%20Checkbox"
  },
  {
    "name": "Page Should Not Contain Element",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      },
      {
        "name": "loglevel",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "TRACE",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "loglevel: str = TRACE"
      }
    ],
    "doc": "<p>Verifies that element <code>locator</code> is not found on the current page.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Page%20Should%20Not%20Contain%20Element"
  },
  {
    "name": "Page Should Not Contain Image",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      },
      {
        "name": "loglevel",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "TRACE",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "loglevel: str = TRACE"
      }
    ],
    "doc": "<p>Verifies image identified by <code>locator</code> is not found from current page.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, images are searched using <code>id</code>, <code>name</code>, <code>src</code> and <code>alt</code>.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Page%20Should%20Not%20Contain%20Image"
  },
  {
    "name": "Page Should Not Contain Link",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      },
      {
        "name": "loglevel",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "TRACE",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "loglevel: str = TRACE"
      }
    ],
    "doc": "<p>Verifies link identified by <code>locator</code> is not found from current page.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, links are searched using <code>id</code>, <code>name</code>, <code>href</code> and the link text.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Page%20Should%20Not%20Contain%20Link"
  },
  {
    "name": "Page Should Not Contain List",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      },
      {
        "name": "loglevel",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "TRACE",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "loglevel: str = TRACE"
      }
    ],
    "doc": "<p>Verifies selection list <code>locator</code> is not found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Page%20Should%20Not%20Contain%20List"
  },
  {
    "name": "Page Should Not Contain Radio Button",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      },
      {
        "name": "loglevel",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "TRACE",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "loglevel: str = TRACE"
      }
    ],
    "doc": "<p>Verifies radio button <code>locator</code> is not found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, radio buttons are searched using <code>id</code>, <code>name</code> and <code>value</code>.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Page%20Should%20Not%20Contain%20Radio%20Button"
  },
  {
    "name": "Page Should Not Contain Textfield",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      },
      {
        "name": "loglevel",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "TRACE",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "loglevel: str = TRACE"
      }
    ],
    "doc": "<p>Verifies text field <code>locator</code> is not found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Page%20Should%20Not%20Contain%20Textfield"
  },
  {
    "name": "Press Key",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "key",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "key: str"
      }
    ],
    "doc": "<p>Simulates user pressing key on element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>key</code> is either a single character, a string, or a numerical ASCII code of the key lead by '\\'.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Press%20Key\" class=\"name\">Press Key</a></td>\n<td>text_field</td>\n<td>q</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Key\" class=\"name\">Press Key</a></td>\n<td>text_field</td>\n<td>abcde</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Key\" class=\"name\">Press Key</a></td>\n<td>login_button</td>\n<td>\\13</td>\n<td># ASCII code for enter key</td>\n</tr>\n</table>\n<p><a href=\"#Press%20Key\" class=\"name\">Press Key</a> and <a href=\"#Press%20Keys\" class=\"name\">Press Keys</a> differ in the methods to simulate key presses. <a href=\"#Press%20Key\" class=\"name\">Press Key</a> uses the WebDriver <span class=\"name\">SEND_KEYS_TO_ELEMENT</span> command using the selenium send_keys method. Although one is not recommended over the other if <a href=\"#Press%20Key\" class=\"name\">Press Key</a> does not work we recommend trying <a href=\"#Press%20Keys\" class=\"name\">Press Keys</a>.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Press%20Key"
  },
  {
    "name": "Press Keys",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "locator: WebElement | None | str = None"
      },
      {
        "name": "keys",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*keys: str"
      }
    ],
    "doc": "<p>Simulates the user pressing key(s) to an element or on the active browser.</p>\n<p>If <code>locator</code> evaluates as false, see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a> for more details, then the <code>keys</code> are sent to the currently active browser. Otherwise element is searched and <code>keys</code> are send to the element identified by the <code>locator</code>. In later case, keyword fails if element is not found. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>keys</code> arguments can contain one or many strings, but it can not be empty. <code>keys</code> can also be a combination of <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html\">Selenium Keys</a> and strings or a single Selenium Key. If Selenium Key is combined with strings, Selenium key and strings must be separated by the <span class=\"name\">+</span> character, like in <span class=\"name\">CONTROL+c</span>. Selenium Keys are space and case sensitive and Selenium Keys are not parsed inside of the string. Example AALTO, would send string <span class=\"name\">AALTO</span> and <span class=\"name\">ALT</span> not parsed inside of the string. But <span class=\"name\">A+ALT+O</span> would found Selenium ALT key from the <code>keys</code> argument. It also possible to press many Selenium Keys down at the same time, example 'ALT+ARROW_DOWN`.</p>\n<p>If Selenium Keys are detected in the <code>keys</code> argument, keyword will press the Selenium Key down, send the strings and then release the Selenium Key. If keyword needs to send a Selenium Key as a string, then each character must be separated with <span class=\"name\">+</span> character, example <span class=\"name\">E+N+D</span>.</p>\n<p><span class=\"name\">CTRL</span> is alias for <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.CONTROL\">Selenium CONTROL</a> and ESC is alias for <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.ESCAPE\">Selenium ESCAPE</a></p>\n<p>New in SeleniumLibrary 3.3</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>AAAAA</td>\n<td></td>\n<td># Sends string \"AAAAA\" to element.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>None</td>\n<td>BBBBB</td>\n<td></td>\n<td># Sends string \"BBBBB\" to currently active browser.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>E+N+D</td>\n<td></td>\n<td># Sends string \"END\" to element.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>XXX</td>\n<td>YY</td>\n<td># Sends strings \"XXX\" and \"YY\" to element.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>XXX+YY</td>\n<td></td>\n<td># Same as above.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>ALT+ARROW_DOWN</td>\n<td></td>\n<td># Pressing \"ALT\" key down, then pressing ARROW_DOWN and then releasing both keys.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>ALT</td>\n<td>ARROW_DOWN</td>\n<td># Pressing \"ALT\" key and then pressing ARROW_DOWN.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>CTRL+c</td>\n<td></td>\n<td># Pressing CTRL key down, sends string \"c\" and then releases CTRL key.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>button</td>\n<td>RETURN</td>\n<td></td>\n<td># Pressing \"ENTER\" key to element.</td>\n</tr>\n</table>\n<p><a href=\"#Press%20Key\" class=\"name\">Press Key</a> and <a href=\"#Press%20Keys\" class=\"name\">Press Keys</a> differ in the methods to simulate key presses. <a href=\"#Press%20Keys\" class=\"name\">Press Keys</a> uses the Selenium/WebDriver Actions. <a href=\"#Press%20Keys\" class=\"name\">Press Keys</a> also has a more extensive syntax for describing keys, key combinations, and key actions. Although one is not recommended over the other if <a href=\"#Press%20Keys\" class=\"name\">Press Keys</a> does not work we recommend trying <a href=\"#Press%20Key\" class=\"name\">Press Key</a>.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Press%20Keys"
  },
  {
    "name": "Print Page As Pdf",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "filename",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "selenium-page-{index}.pdf",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "filename: str = selenium-page-{index}.pdf"
      },
      {
        "name": "background",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "background: bool | None = None"
      },
      {
        "name": "margin_bottom",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "float",
              "typedoc": "float",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "margin_bottom: float | None = None"
      },
      {
        "name": "margin_left",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "float",
              "typedoc": "float",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "margin_left: float | None = None"
      },
      {
        "name": "margin_right",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "float",
              "typedoc": "float",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "margin_right: float | None = None"
      },
      {
        "name": "margin_top",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "float",
              "typedoc": "float",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "margin_top: float | None = None"
      },
      {
        "name": "orientation",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "orientation: str | None = None"
      },
      {
        "name": "page_height",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "float",
              "typedoc": "float",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "page_height: float | None = None"
      },
      {
        "name": "page_ranges",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "list",
              "typedoc": "list",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "page_ranges: list | None = None"
      },
      {
        "name": "page_width",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "float",
              "typedoc": "float",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "page_width: float | None = None"
      },
      {
        "name": "scale",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "float",
              "typedoc": "float",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "scale: float | None = None"
      },
      {
        "name": "shrink_to_fit",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "shrink_to_fit: bool | None = None"
      }
    ],
    "doc": "<p>Print the current page as a PDF</p>\n<p><code>page_ranges</code> defaults to <span class=\"name\">['-']</span> or \"all\" pages. <code>page_ranges</code> takes a list of strings indicating the ranges.</p>\n<p>The page size defaults to 21.59 for <code>page_width</code> and 27.94 for <code>page_height</code>. This is the equivalent size of US-Letter. The assumed units on these parameters is centimeters.</p>\n<p>The default margin for top, left, bottom, right is <span class=\"name\">1</span>. The assumed units on these parameters is centimeters.</p>\n<p>The default <code>orientation</code> is <span class=\"name\">portrait</span>. <code>orientation</code> can be either <span class=\"name\">portrait</span> or <span class=\"name\">landscape</span>.</p>\n<p>The default <code>scale</code> is <span class=\"name\">1</span>. <code>scale</code> must be greater than or equal to <span class=\"name\">0.1</span> and less than or equal to <span class=\"name\">2</span>.</p>\n<p><code>background</code> and <code>scale_to_fit</code> can be either <span class=\"name\">${True}</span> or <span class=\"name\">${False}</span>..</p>\n<p>If all print options are None then a pdf will fail to print silently.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Print%20Page%20As%20Pdf"
  },
  {
    "name": "Radio Button Should Be Set To",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "group_name",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "group_name: str"
      },
      {
        "name": "value",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "value: str"
      }
    ],
    "doc": "<p>Verifies radio button group <code>group_name</code> is set to <code>value</code>.</p>\n<p><code>group_name</code> is the <code>name</code> of the radio button group.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Radio%20Button%20Should%20Be%20Set%20To"
  },
  {
    "name": "Radio Button Should Not Be Selected",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "group_name",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "group_name: str"
      }
    ],
    "doc": "<p>Verifies radio button group <code>group_name</code> has no selection.</p>\n<p><code>group_name</code> is the <code>name</code> of the radio button group.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Radio%20Button%20Should%20Not%20Be%20Selected"
  },
  {
    "name": "Register Keyword To Run On Failure",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "keyword",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "keyword: str | None"
      }
    ],
    "doc": "<p>Sets the keyword to execute, when a SeleniumLibrary keyword fails.</p>\n<p><code>keyword</code> is the name of a keyword that will be executed if a SeleniumLibrary keyword fails. It is possible to use any available keyword, including user keywords or keywords from other libraries, but the keyword must not take any arguments.</p>\n<p>The initial keyword to use is set when <a href=\"#Importing\" class=\"name\">importing</a> the library, and the keyword that is used by default is <a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a>. Taking a screenshot when something failed is a very useful feature, but notice that it can slow down the execution.</p>\n<p>It is possible to use string <code>NOTHING</code> or <code>NONE</code>, case-insensitively, as well as Python <code>None</code> to disable this feature altogether.</p>\n<p>This keyword returns the name of the previously registered failure keyword or Python <code>None</code> if this functionality was previously disabled. The return value can be always used to restore the original value later.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Register%20Keyword%20To%20Run%20On%20Failure\" class=\"name\">Register Keyword To Run On Failure</a></td>\n<td>Log Source</td>\n<td></td>\n</tr>\n<tr>\n<td>${previous kw}=</td>\n<td><a href=\"#Register%20Keyword%20To%20Run%20On%20Failure\" class=\"name\">Register Keyword To Run On Failure</a></td>\n<td>NONE</td>\n</tr>\n<tr>\n<td><a href=\"#Register%20Keyword%20To%20Run%20On%20Failure\" class=\"name\">Register Keyword To Run On Failure</a></td>\n<td>${previous kw}</td>\n<td></td>\n</tr>\n</table>\n<p>Changes in SeleniumLibrary 3.0:</p>\n<ul>\n<li>Possible to use string <code>NONE</code> or Python <code>None</code> to disable the functionality.</li>\n<li>Return Python <code>None</code> when the functionality was disabled earlier. In previous versions special value <code>No Keyword</code> was returned and it could not be used to restore the original state.</li>\n</ul>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Register%20Keyword%20To%20Run%20On%20Failure"
  },
  {
    "name": "Reload Page",
    "library": "SeleniumLibrary",
    "args": [],
    "doc": "<p>Simulates user reloading page.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Reload%20Page"
  },
  {
    "name": "Remove Location Strategy",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "strategy_name",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "strategy_name: str"
      }
    ],
    "doc": "<p>Removes a previously added custom location strategy.</p>\n<p>See <a href=\"#Custom%20locators\" class=\"name\">Custom locators</a> for information on how to create and use custom strategies.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Remove%20Location%20Strategy"
  },
  {
    "name": "Scroll Element Into View",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Scrolls the element identified by <code>locator</code> into view.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>New in SeleniumLibrary 3.2.0</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Scroll%20Element%20Into%20View"
  },
  {
    "name": "Select All From List",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Selects all options from multi-selection list <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Select%20All%20From%20List"
  },
  {
    "name": "Select Checkbox",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Selects the checkbox identified by <code>locator</code>.</p>\n<p>Does nothing if checkbox is already selected.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Select%20Checkbox"
  },
  {
    "name": "Select Frame",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Sets frame identified by <code>locator</code> as the current frame.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Works both with frames and iframes. Use <a href=\"#Unselect%20Frame\" class=\"name\">Unselect Frame</a> to cancel the frame selection and return to the main frame.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Select%20Frame\" class=\"name\">Select Frame</a></td>\n<td>top-frame</td>\n<td># Select frame with id or name 'top-frame'</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Link\" class=\"name\">Click Link</a></td>\n<td>example</td>\n<td># Click link 'example' in the selected frame</td>\n</tr>\n<tr>\n<td><a href=\"#Unselect%20Frame\" class=\"name\">Unselect Frame</a></td>\n<td></td>\n<td># Back to main frame.</td>\n</tr>\n<tr>\n<td><a href=\"#Select%20Frame\" class=\"name\">Select Frame</a></td>\n<td>//iframe[@name='xxx']</td>\n<td># Select frame using xpath</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Select%20Frame"
  },
  {
    "name": "Select From List By Index",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "indexes",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*indexes: str"
      }
    ],
    "doc": "<p>Selects options from selection list <code>locator</code> by <code>indexes</code>.</p>\n<p>Indexes of list options start from 0.</p>\n<p>If more than one option is given for a single-selection list, the last value will be selected. With multi-selection lists all specified options are selected, but possible old selections are not cleared.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Select%20From%20List%20By%20Index"
  },
  {
    "name": "Select From List By Label",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "labels",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*labels: str"
      }
    ],
    "doc": "<p>Selects options from selection list <code>locator</code> by <code>labels</code>.</p>\n<p>If more than one option is given for a single-selection list, the last value will be selected. With multi-selection lists all specified options are selected, but possible old selections are not cleared.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Select%20From%20List%20By%20Label"
  },
  {
    "name": "Select From List By Value",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "values",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*values: str"
      }
    ],
    "doc": "<p>Selects options from selection list <code>locator</code> by <code>values</code>.</p>\n<p>If more than one option is given for a single-selection list, the last value will be selected. With multi-selection lists all specified options are selected, but possible old selections are not cleared.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Select%20From%20List%20By%20Value"
  },
  {
    "name": "Select Radio Button",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "group_name",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "group_name: str"
      },
      {
        "name": "value",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "value: str"
      }
    ],
    "doc": "<p>Sets the radio button group <code>group_name</code> to <code>value</code>.</p>\n<p>The radio button to be selected is located by two arguments:</p>\n<ul>\n<li><code>group_name</code> is the name of the radio button group.</li>\n<li><code>value</code> is the <code>id</code> or <code>value</code> attribute of the actual radio button.</li>\n</ul>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Select%20Radio%20Button\" class=\"name\">Select Radio Button</a></td>\n<td>size</td>\n<td>XL</td>\n</tr>\n<tr>\n<td><a href=\"#Select%20Radio%20Button\" class=\"name\">Select Radio Button</a></td>\n<td>contact</td>\n<td>email</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Select%20Radio%20Button"
  },
  {
    "name": "Set Action Chain Delay",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "value",
        "type": {
          "name": "timedelta",
          "typedoc": "timedelta",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "value: timedelta"
      }
    ],
    "doc": "<p>Sets the duration of delay in ActionChains() used by SeleniumLibrary.</p>\n<p>The value can be given as a number that is considered to be seconds or as a human-readable string like <code>1 second</code>.</p>\n<p>Value is always stored as milliseconds internally.</p>\n<p>The previous value is returned and can be used to restore the original value later if needed.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Set%20Action%20Chain%20Delay"
  },
  {
    "name": "Set Browser Implicit Wait",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "value",
        "type": {
          "name": "timedelta",
          "typedoc": "timedelta",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "value: timedelta"
      }
    ],
    "doc": "<p>Sets the implicit wait value used by Selenium.</p>\n<p>Same as <a href=\"#Set%20Selenium%20Implicit%20Wait\" class=\"name\">Set Selenium Implicit Wait</a> but only affects the current browser.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Set%20Browser%20Implicit%20Wait"
  },
  {
    "name": "Set Focus To Element",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Sets the focus to the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Prior to SeleniumLibrary 3.0 this keyword was named <span class=\"name\">Focus</span>.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Set%20Focus%20To%20Element"
  },
  {
    "name": "Set Screenshot Directory",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "path",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path: None | str"
      }
    ],
    "doc": "<p>Sets the directory for captured screenshots.</p>\n<p><code>path</code> argument specifies the absolute path to a directory where the screenshots should be written to. If the directory does not exist, it will be created. The directory can also be set when <a href=\"#Importing\" class=\"name\">importing</a> the library. If it is not configured anywhere, screenshots are saved to the same directory where Robot Framework's log file is written.</p>\n<p>If <code>path</code> equals to EMBED (case insensitive) and <a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a> or <a href=\"#Capture%20Element%20Screenshot\" class=\"name\">capture Element Screenshot</a> keywords filename argument is not changed from the default value, then the page or element screenshot is embedded as Base64 image to the log.html.</p>\n<p>The previous value is returned and can be used to restore the original value later if needed.</p>\n<p>Returning the previous value is new in SeleniumLibrary 3.0. The persist argument was removed in SeleniumLibrary 3.2 and EMBED is new in SeleniumLibrary 4.2.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Set%20Screenshot%20Directory"
  },
  {
    "name": "Set Selenium Implicit Wait",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "value",
        "type": {
          "name": "timedelta",
          "typedoc": "timedelta",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "value: timedelta"
      }
    ],
    "doc": "<p>Sets the implicit wait value used by Selenium.</p>\n<p>The value can be given as a number that is considered to be seconds or as a human-readable string like <code>1 second</code>. The previous value is returned and can be used to restore the original value later if needed.</p>\n<p>This keyword sets the implicit wait for all opened browsers. Use <a href=\"#Set%20Browser%20Implicit%20Wait\" class=\"name\">Set Browser Implicit Wait</a> to set it only to the current browser.</p>\n<p>See the <a href=\"#Implicit%20wait\" class=\"name\">Implicit wait</a> section above for more information.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${orig wait} =</td>\n<td><a href=\"#Set%20Selenium%20Implicit%20Wait\" class=\"name\">Set Selenium Implicit Wait</a></td>\n<td>10 seconds</td>\n</tr>\n<tr>\n<td><span class=\"name\">Perform AJAX call that is slow</span></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Set%20Selenium%20Implicit%20Wait\" class=\"name\">Set Selenium Implicit Wait</a></td>\n<td>${orig wait}</td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Set%20Selenium%20Implicit%20Wait"
  },
  {
    "name": "Set Selenium Page Load Timeout",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "value",
        "type": {
          "name": "timedelta",
          "typedoc": "timedelta",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "value: timedelta"
      }
    ],
    "doc": "<p>Sets the page load timeout value used by Selenium.</p>\n<p>The value can be given as a number that is considered to be seconds or as a human-readable string like <code>1 second</code>. The previous value is returned and can be used to restore the original value later if needed.</p>\n<p>In contrast to <a href=\"#Set%20Selenium%20Timeout\" class=\"name\">Set Selenium Timeout</a> and <a href=\"#Set%20Selenium%20Implicit%20Wait\" class=\"name\">Set Selenium Implicit Wait</a>, this keywords sets the time for the Webdriver to wait until the page is loaded before raising a timeout exception.</p>\n<p>See the <a href=\"#Page%20load\" class=\"name\">Page load</a> section above for more information.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${orig page load timeout} =</td>\n<td><a href=\"#Set%20Selenium%20Page%20Load%20Timeout\" class=\"name\">Set Selenium Page Load Timeout</a></td>\n<td>30 seconds</td>\n</tr>\n<tr>\n<td><span class=\"name\">Open page that loads slowly</span></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Set%20Selenium%20Page%20Load%20Timeout\" class=\"name\">Set Selenium Page Load Timeout</a></td>\n<td>${orig page load timeout}</td>\n<td></td>\n</tr>\n</table>\n<p>New in SeleniumLibrary 6.1</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Set%20Selenium%20Page%20Load%20Timeout"
  },
  {
    "name": "Set Selenium Speed",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "value",
        "type": {
          "name": "timedelta",
          "typedoc": "timedelta",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "value: timedelta"
      }
    ],
    "doc": "<p>Sets the delay that is waited after each Selenium command.</p>\n<p>The value can be given as a number that is considered to be seconds or as a human-readable string like <code>1 second</code>. The previous value is returned and can be used to restore the original value later if needed.</p>\n<p>See the <a href=\"#Selenium%20speed\" class=\"name\">Selenium Speed</a> section above for more information.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Set%20Selenium%20Speed\" class=\"name\">Set Selenium Speed</a></td>\n<td>0.5 seconds</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Set%20Selenium%20Speed"
  },
  {
    "name": "Set Selenium Timeout",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "value",
        "type": {
          "name": "timedelta",
          "typedoc": "timedelta",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "value: timedelta"
      }
    ],
    "doc": "<p>Sets the timeout that is used by various keywords.</p>\n<p>The value can be given as a number that is considered to be seconds or as a human-readable string like <code>1 second</code>. The previous value is returned and can be used to restore the original value later if needed.</p>\n<p>See the <a href=\"#Timeout\" class=\"name\">Timeout</a> section above for more information.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${orig timeout} =</td>\n<td><a href=\"#Set%20Selenium%20Timeout\" class=\"name\">Set Selenium Timeout</a></td>\n<td>15 seconds</td>\n</tr>\n<tr>\n<td><span class=\"name\">Open page that loads slowly</span></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Set%20Selenium%20Timeout\" class=\"name\">Set Selenium Timeout</a></td>\n<td>${orig timeout}</td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Set%20Selenium%20Timeout"
  },
  {
    "name": "Set Window Position",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "x",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "x: int"
      },
      {
        "name": "y",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "y: int"
      }
    ],
    "doc": "<p>Sets window position using <code>x</code> and <code>y</code> coordinates.</p>\n<p>The position is relative to the top left corner of the screen, but some browsers exclude possible task bar set by the operating system from the calculation. The actual position may thus be different with different browsers.</p>\n<p>Values can be given using strings containing numbers or by using actual numbers. See also <a href=\"#Get%20Window%20Position\" class=\"name\">Get Window Position</a>.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Set%20Window%20Position\" class=\"name\">Set Window Position</a></td>\n<td>100</td>\n<td>200</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Set%20Window%20Position"
  },
  {
    "name": "Set Window Size",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "width",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "width: int"
      },
      {
        "name": "height",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "height: int"
      },
      {
        "name": "inner",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "inner: bool = False"
      }
    ],
    "doc": "<p>Sets current windows size to given <code>width</code> and <code>height</code>.</p>\n<p>Values can be given using strings containing numbers or by using actual numbers. See also <a href=\"#Get%20Window%20Size\" class=\"name\">Get Window Size</a>.</p>\n<p>Browsers have a limit on their minimum size. Trying to set them smaller will cause the actual size to be bigger than the requested size.</p>\n<p>If <code>inner</code> parameter is set to True, keyword sets the necessary window width and height to have the desired HTML DOM <i>window.innerWidth</i> and <i>window.innerHeight</i>. See <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a> for more details on how to set boolean arguments.</p>\n<p>The <code>inner</code> argument is new since SeleniumLibrary 4.0.</p>\n<p>This <code>inner</code> argument does not support Frames. If a frame is selected, switch to default before running this.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Set%20Window%20Size\" class=\"name\">Set Window Size</a></td>\n<td>800</td>\n<td>600</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Set%20Window%20Size\" class=\"name\">Set Window Size</a></td>\n<td>800</td>\n<td>600</td>\n<td>True</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Set%20Window%20Size"
  },
  {
    "name": "Simulate Event",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "event",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "event: str"
      }
    ],
    "doc": "<p>Simulates <code>event</code> on the element identified by <code>locator</code>.</p>\n<p>This keyword is useful if element has <code>OnEvent</code> handler that needs to be explicitly invoked.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Prior to SeleniumLibrary 3.0 this keyword was named <span class=\"name\">Simulate</span>.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Simulate%20Event"
  },
  {
    "name": "Submit Form",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "locator: WebElement | None | str = None"
      }
    ],
    "doc": "<p>Submits a form identified by <code>locator</code>.</p>\n<p>If <code>locator</code> is not given, first form on the page is submitted.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Submit%20Form"
  },
  {
    "name": "Switch Browser",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "index_or_alias",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "index_or_alias: str"
      }
    ],
    "doc": "<p>Switches between active browsers using <code>index_or_alias</code>.</p>\n<p>Indices are returned by the <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a> keyword and aliases can be given to it explicitly. Indices start from 1.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://google.com\">http://google.com</a></td>\n<td>ff</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Location%20Should%20Be\" class=\"name\">Location Should Be</a></td>\n<td><a href=\"http://google.com\">http://google.com</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://yahoo.com\">http://yahoo.com</a></td>\n<td>ie</td>\n<td>alias=second</td>\n</tr>\n<tr>\n<td><a href=\"#Location%20Should%20Be\" class=\"name\">Location Should Be</a></td>\n<td><a href=\"http://yahoo.com\">http://yahoo.com</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a></td>\n<td>1</td>\n<td># index</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a></td>\n<td>I'm feeling lucky</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a></td>\n<td>second</td>\n<td># alias</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a></td>\n<td>More Yahoo!</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Close%20All%20Browsers\" class=\"name\">Close All Browsers</a></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>Above example expects that there was no other open browsers when opening the first one because it used index <code>1</code> when switching to it later. If you are not sure about that, you can store the index into a variable as below.</p>\n<table border=\"1\">\n<tr>\n<td>${index} =</td>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://google.com\">http://google.com</a></td>\n</tr>\n<tr>\n<td># Do something ...</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a></td>\n<td>${index}</td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Switch%20Browser"
  },
  {
    "name": "Switch Window",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "list",
              "typedoc": "list",
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "MAIN",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "locator: list | str = MAIN"
      },
      {
        "name": "timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout: str | None = None"
      },
      {
        "name": "browser",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "CURRENT",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "browser: str = CURRENT"
      }
    ],
    "doc": "<p>Switches to browser window matching <code>locator</code>.</p>\n<p>If the window is found, all subsequent commands use the selected window, until this keyword is used again. If the window is not found, this keyword fails. The previous windows handle is returned and can be used to switch back to it later.</p>\n<p>Notice that alerts should be handled with <a href=\"#Handle%20Alert\" class=\"name\">Handle Alert</a> or other alert related keywords.</p>\n<p>The <code>locator</code> can be specified using different strategies somewhat similarly as when <a href=\"#Locating%20elements\" class=\"name\">locating elements</a> on pages.</p>\n<ul>\n<li>By default, the <code>locator</code> is matched against window handle, name, title, and URL. Matching is done in that order and the first matching window is selected.</li>\n</ul>\n<ul>\n<li>The <code>locator</code> can specify an explicit strategy by using the format <code>strategy:value</code> (recommended) or <code>strategy=value</code>. Supported strategies are <code>name</code>, <code>title</code>, and <code>url</code>. These matches windows using their name, title, or URL, respectively. Additionally, <code>default</code> can be used to explicitly use the default strategy explained above.</li>\n</ul>\n<ul>\n<li>If the <code>locator</code> is <code>NEW</code> (case-insensitive), the latest opened window is selected. It is an error if this is the same as the current window.</li>\n</ul>\n<ul>\n<li>If the <code>locator</code> is <code>MAIN</code> (default, case-insensitive), the main window is selected.</li>\n</ul>\n<ul>\n<li>If the <code>locator</code> is <code>CURRENT</code> (case-insensitive), nothing is done. This effectively just returns the current window handle.</li>\n</ul>\n<ul>\n<li>If the <code>locator</code> is not a string, it is expected to be a list of window handles <i>to exclude</i>. Such a list of excluded windows can be got from <a href=\"#Get%20Window%20Handles\" class=\"name\">Get Window Handles</a> before doing an action that opens a new window.</li>\n</ul>\n<p>The <code>timeout</code> is used to specify how long keyword will poll to select the new window. The <code>timeout</code> is new in SeleniumLibrary 3.2.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Click%20Link\" class=\"name\">Click Link</a></td>\n<td>popup1</td>\n<td></td>\n<td># Open new window</td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>example</td>\n<td></td>\n<td># Select window using default strategy</td>\n</tr>\n<tr>\n<td><a href=\"#Title%20Should%20Be\" class=\"name\">Title Should Be</a></td>\n<td>Pop-up 1</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Button\" class=\"name\">Click Button</a></td>\n<td>popup2</td>\n<td></td>\n<td># Open another window</td>\n</tr>\n<tr>\n<td>${handle} =</td>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>NEW</td>\n<td># Select latest opened window</td>\n</tr>\n<tr>\n<td><a href=\"#Title%20Should%20Be\" class=\"name\">Title Should Be</a></td>\n<td>Pop-up 2</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>${handle}</td>\n<td></td>\n<td># Select window using handle</td>\n</tr>\n<tr>\n<td><a href=\"#Title%20Should%20Be\" class=\"name\">Title Should Be</a></td>\n<td>Pop-up 1</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>MAIN</td>\n<td></td>\n<td># Select the main window</td>\n</tr>\n<tr>\n<td><a href=\"#Title%20Should%20Be\" class=\"name\">Title Should Be</a></td>\n<td>Main</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${excludes} =</td>\n<td><a href=\"#Get%20Window%20Handles\" class=\"name\">Get Window Handles</a></td>\n<td></td>\n<td># Get list of current windows</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Link\" class=\"name\">Click Link</a></td>\n<td>popup3</td>\n<td></td>\n<td># Open one more window</td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>${excludes}</td>\n<td></td>\n<td># Select window using excludes</td>\n</tr>\n<tr>\n<td><a href=\"#Title%20Should%20Be\" class=\"name\">Title Should Be</a></td>\n<td>Pop-up 3</td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>The <code>browser</code> argument allows with <code>index_or_alias</code> to implicitly switch to a specific browser when switching to a window. See <a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a></p>\n<ul>\n<li>If the <code>browser</code> is <code>CURRENT</code> (case-insensitive), no other browser is selected.</li>\n</ul>\n<p><b>NOTE:</b></p>\n<ul>\n<li>The <code>strategy:value</code> syntax is only supported by SeleniumLibrary 3.0 and newer.</li>\n<li>Prior to SeleniumLibrary 3.0 matching windows by name, title and URL was case-insensitive.</li>\n<li>Earlier versions supported aliases <code>None</code>, <code>null</code> and the empty string for selecting the main window, and alias <code>self</code> for selecting the current window. Support for these aliases was removed in SeleniumLibrary 3.2.</li>\n</ul>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Switch%20Window"
  },
  {
    "name": "Table Cell Should Contain",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "row",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "row: int"
      },
      {
        "name": "column",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "column: int"
      },
      {
        "name": "expected",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "expected: str"
      },
      {
        "name": "loglevel",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "TRACE",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "loglevel: str = TRACE"
      }
    ],
    "doc": "<p>Verifies table cell contains text <code>expected</code>.</p>\n<p>See <a href=\"#Get%20Table%20Cell\" class=\"name\">Get Table Cell</a> that this keyword uses internally for an explanation about accepted arguments.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Table%20Cell%20Should%20Contain"
  },
  {
    "name": "Table Column Should Contain",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "column",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "column: int"
      },
      {
        "name": "expected",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "expected: str"
      },
      {
        "name": "loglevel",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "TRACE",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "loglevel: str = TRACE"
      }
    ],
    "doc": "<p>Verifies table column contains text <code>expected</code>.</p>\n<p>The table is located using the <code>locator</code> argument and its column found using <code>column</code>. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Column indexes start from 1. It is possible to refer to columns from the end by using negative indexes so that -1 is the last column, -2 is the second last, and so on.</p>\n<p>If a table contains cells that span multiple columns, those merged cells count as a single column.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about the <code>loglevel</code> argument.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Table%20Column%20Should%20Contain"
  },
  {
    "name": "Table Footer Should Contain",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "expected",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "expected: str"
      },
      {
        "name": "loglevel",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "TRACE",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "loglevel: str = TRACE"
      }
    ],
    "doc": "<p>Verifies table footer contains text <code>expected</code>.</p>\n<p>Any <code>&lt;td&gt;</code> element inside <code>&lt;tfoot&gt;</code> element is considered to be part of the footer.</p>\n<p>The table is located using the <code>locator</code> argument. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about the <code>loglevel</code> argument.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Table%20Footer%20Should%20Contain"
  },
  {
    "name": "Table Header Should Contain",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "expected",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "expected: str"
      },
      {
        "name": "loglevel",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "TRACE",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "loglevel: str = TRACE"
      }
    ],
    "doc": "<p>Verifies table header contains text <code>expected</code>.</p>\n<p>Any <code>&lt;th&gt;</code> element anywhere in the table is considered to be part of the header.</p>\n<p>The table is located using the <code>locator</code> argument. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about the <code>loglevel</code> argument.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Table%20Header%20Should%20Contain"
  },
  {
    "name": "Table Row Should Contain",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "row",
        "type": {
          "name": "int",
          "typedoc": "integer",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "row: int"
      },
      {
        "name": "expected",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "expected: str"
      },
      {
        "name": "loglevel",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "TRACE",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "loglevel: str = TRACE"
      }
    ],
    "doc": "<p>Verifies that table row contains text <code>expected</code>.</p>\n<p>The table is located using the <code>locator</code> argument and its column found using <code>column</code>. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Row indexes start from 1. It is possible to refer to rows from the end by using negative indexes so that -1 is the last row, -2 is the second last, and so on.</p>\n<p>If a table contains cells that span multiple rows, a match only occurs for the uppermost row of those merged cells.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about the <code>loglevel</code> argument.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Table%20Row%20Should%20Contain"
  },
  {
    "name": "Table Should Contain",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "expected",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "expected: str"
      },
      {
        "name": "loglevel",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": "TRACE",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "loglevel: str = TRACE"
      }
    ],
    "doc": "<p>Verifies table contains text <code>expected</code>.</p>\n<p>The table is located using the <code>locator</code> argument. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about the <code>loglevel</code> argument.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Table%20Should%20Contain"
  },
  {
    "name": "Textarea Should Contain",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "expected",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "expected: str"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Verifies text area <code>locator</code> contains text <code>expected</code>.</p>\n<p><code>message</code> can be used to override default error message.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Textarea%20Should%20Contain"
  },
  {
    "name": "Textarea Value Should Be",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "expected",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "expected: str"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Verifies text area <code>locator</code> has exactly text <code>expected</code>.</p>\n<p><code>message</code> can be used to override default error message.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Textarea%20Value%20Should%20Be"
  },
  {
    "name": "Textfield Should Contain",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "expected",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "expected: str"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Verifies text field <code>locator</code> contains text <code>expected</code>.</p>\n<p><code>message</code> can be used to override the default error message.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Textfield%20Should%20Contain"
  },
  {
    "name": "Textfield Value Should Be",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "expected",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "expected: str"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Verifies text field <code>locator</code> has exactly text <code>expected</code>.</p>\n<p><code>message</code> can be used to override default error message.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Textfield%20Value%20Should%20Be"
  },
  {
    "name": "Title Should Be",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "title",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "title: str"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Verifies that the current page title equals <code>title</code>.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p><code>message</code> argument is new in SeleniumLibrary 3.1.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Title%20Should%20Be"
  },
  {
    "name": "Unselect All From List",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Unselects all options from multi-selection list <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>New in SeleniumLibrary 3.0.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Unselect%20All%20From%20List"
  },
  {
    "name": "Unselect Checkbox",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      }
    ],
    "doc": "<p>Removes the selection of checkbox identified by <code>locator</code>.</p>\n<p>Does nothing if the checkbox is not selected.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Unselect%20Checkbox"
  },
  {
    "name": "Unselect Frame",
    "library": "SeleniumLibrary",
    "args": [],
    "doc": "<p>Sets the main frame as the current frame.</p>\n<p>In practice cancels the previous <a href=\"#Select%20Frame\" class=\"name\">Select Frame</a> call.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Unselect%20Frame"
  },
  {
    "name": "Unselect From List By Index",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "indexes",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*indexes: str"
      }
    ],
    "doc": "<p>Unselects options from selection list <code>locator</code> by <code>indexes</code>.</p>\n<p>Indexes of list options start from 0. This keyword works only with multi-selection lists.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Unselect%20From%20List%20By%20Index"
  },
  {
    "name": "Unselect From List By Label",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "labels",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*labels: str"
      }
    ],
    "doc": "<p>Unselects options from selection list <code>locator</code> by <code>labels</code>.</p>\n<p>This keyword works only with multi-selection lists.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Unselect%20From%20List%20By%20Label"
  },
  {
    "name": "Unselect From List By Value",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "values",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*values: str"
      }
    ],
    "doc": "<p>Unselects options from selection list <code>locator</code> by <code>values</code>.</p>\n<p>This keyword works only with multi-selection lists.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Unselect%20From%20List%20By%20Value"
  },
  {
    "name": "Wait For Condition",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "condition",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "condition: str"
      },
      {
        "name": "timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout: timedelta | None = None"
      },
      {
        "name": "error",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "error: str | None = None"
      }
    ],
    "doc": "<p>Waits until <code>condition</code> is true or <code>timeout</code> expires.</p>\n<p>The condition can be arbitrary JavaScript expression but it must return a value to be evaluated. See <a href=\"#Execute%20Javascript\" class=\"name\">Execute JavaScript</a> for information about accessing content on pages.</p>\n<p>Fails if the timeout expires before the condition becomes true. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p><code>error</code> can be used to override the default error message.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Wait%20For%20Condition\" class=\"name\">Wait For Condition</a></td>\n<td>return document.title == \"New Title\"</td>\n</tr>\n<tr>\n<td><a href=\"#Wait%20For%20Condition\" class=\"name\">Wait For Condition</a></td>\n<td>return jQuery.active == 0</td>\n</tr>\n<tr>\n<td><a href=\"#Wait%20For%20Condition\" class=\"name\">Wait For Condition</a></td>\n<td>style = document.querySelector('h1').style; return style.background == \"red\" &amp;&amp; style.color == \"white\"</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Wait%20For%20Condition"
  },
  {
    "name": "Wait For Expected Condition",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "condition",
        "type": {
          "name": "<module 'string' from 'C:\\\\Python313\\\\Lib\\\\string.py'>",
          "typedoc": null,
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "condition: <module 'string' from 'C:\\\\Python313\\\\Lib\\\\string.py'>"
      },
      {
        "name": "args",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*args"
      },
      {
        "name": "timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "float",
              "typedoc": "float",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "10",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "timeout: float | None = 10"
      }
    ],
    "doc": "<p>Waits until <code>condition</code> is true or <code>timeout</code> expires.</p>\n<p>The condition must be one of selenium's expected condition which can be found within the selenium <a href=\"https://www.selenium.dev/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#module-selenium.webdriver.support.expected_conditions\">Python API</a> documentation. The expected condition can written as snake_case (ex title_is) or it can be space delimited (ex Title Is). Some conditions require additional arguments or <code>args</code> which should be passed along after the expected condition.</p>\n<p>Fails if the timeout expires before the condition becomes true. The default value is 10 seconds.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Wait%20For%20Expected%20Condition\" class=\"name\">Wait For Expected Condition</a></td>\n<td>alert_is_present</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Wait%20For%20Expected%20Condition\" class=\"name\">Wait For Expected Condition</a></td>\n<td>Title Is</td>\n<td>New Title</td>\n</tr>\n</table>\n<p>If the expected condition expects a locator then one can pass as arguments a tuple containing the selenium locator strategies and the locator.</p>\n<p>Example of expected condition expecting locator:</p>\n<pre>\n${byElem}= |  Evaluate  (\"id\",\"added_btn\")\n<a href=\"#Wait%20For%20Expected%20Condition\" class=\"name\">Wait For Expected Condition</a> | Presence Of Element Located | ${byElem}\n</pre>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Wait%20For%20Expected%20Condition"
  },
  {
    "name": "Wait Until Element Contains",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "text",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "text: str"
      },
      {
        "name": "timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout: timedelta | None = None"
      },
      {
        "name": "error",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "error: str | None = None"
      }
    ],
    "doc": "<p>Waits until the element <code>locator</code> contains <code>text</code>.</p>\n<p>Fails if <code>timeout</code> expires before the text appears. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Wait%20Until%20Element%20Contains"
  },
  {
    "name": "Wait Until Element Does Not Contain",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "text",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "text: str"
      },
      {
        "name": "timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout: timedelta | None = None"
      },
      {
        "name": "error",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "error: str | None = None"
      }
    ],
    "doc": "<p>Waits until the element <code>locator</code> does not contain <code>text</code>.</p>\n<p>Fails if <code>timeout</code> expires before the text disappears. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Wait%20Until%20Element%20Does%20Not%20Contain"
  },
  {
    "name": "Wait Until Element Is Enabled",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout: timedelta | None = None"
      },
      {
        "name": "error",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "error: str | None = None"
      }
    ],
    "doc": "<p>Waits until the element <code>locator</code> is enabled.</p>\n<p>Element is considered enabled if it is not disabled nor read-only.</p>\n<p>Fails if <code>timeout</code> expires before the element is enabled. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>\n<p>Considering read-only elements to be disabled is a new feature in SeleniumLibrary 3.0.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Wait%20Until%20Element%20Is%20Enabled"
  },
  {
    "name": "Wait Until Element Is Not Visible",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout: timedelta | None = None"
      },
      {
        "name": "error",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "error: str | None = None"
      }
    ],
    "doc": "<p>Waits until the element <code>locator</code> is not visible.</p>\n<p>Fails if <code>timeout</code> expires before the element is not visible. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Wait%20Until%20Element%20Is%20Not%20Visible"
  },
  {
    "name": "Wait Until Element Is Visible",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout: timedelta | None = None"
      },
      {
        "name": "error",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "error: str | None = None"
      }
    ],
    "doc": "<p>Waits until the element <code>locator</code> is visible.</p>\n<p>Fails if <code>timeout</code> expires before the element is visible. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Wait%20Until%20Element%20Is%20Visible"
  },
  {
    "name": "Wait Until Location Contains",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "expected",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "expected: str"
      },
      {
        "name": "timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout: timedelta | None = None"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Waits until the current URL contains <code>expected</code>.</p>\n<p>The <code>expected</code> argument contains the expected value in url.</p>\n<p>Fails if <code>timeout</code> expires before the location contains. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>New in SeleniumLibrary 4.0</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Wait%20Until%20Location%20Contains"
  },
  {
    "name": "Wait Until Location Does Not Contain",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "location",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "location: str"
      },
      {
        "name": "timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout: timedelta | None = None"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Waits until the current URL does not contains <code>location</code>.</p>\n<p>The <code>location</code> argument contains value not expected in url.</p>\n<p>Fails if <code>timeout</code> expires before the location not contains. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>New in SeleniumLibrary 4.3</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Wait%20Until%20Location%20Does%20Not%20Contain"
  },
  {
    "name": "Wait Until Location Is",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "expected",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "expected: str"
      },
      {
        "name": "timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout: timedelta | None = None"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Waits until the current URL is <code>expected</code>.</p>\n<p>The <code>expected</code> argument is the expected value in url.</p>\n<p>Fails if <code>timeout</code> expires before the location is. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>New in SeleniumLibrary 4.0</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Wait%20Until%20Location%20Is"
  },
  {
    "name": "Wait Until Location Is Not",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "location",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "location: str"
      },
      {
        "name": "timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout: timedelta | None = None"
      },
      {
        "name": "message",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message: str | None = None"
      }
    ],
    "doc": "<p>Waits until the current URL is not <code>location</code>.</p>\n<p>The <code>location</code> argument is the unexpected value in url.</p>\n<p>Fails if <code>timeout</code> expires before the location is not. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>New in SeleniumLibrary 4.3</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Wait%20Until%20Location%20Is%20Not"
  },
  {
    "name": "Wait Until Page Contains",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "text",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "text: str"
      },
      {
        "name": "timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout: timedelta | None = None"
      },
      {
        "name": "error",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "error: str | None = None"
      }
    ],
    "doc": "<p>Waits until <code>text</code> appears on the current page.</p>\n<p>Fails if <code>timeout</code> expires before the text appears. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p><code>error</code> can be used to override the default error message.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Wait%20Until%20Page%20Contains"
  },
  {
    "name": "Wait Until Page Contains Element",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout: timedelta | None = None"
      },
      {
        "name": "error",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "error: str | None = None"
      },
      {
        "name": "limit",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "limit: int | None = None"
      }
    ],
    "doc": "<p>Waits until the element <code>locator</code> appears on the current page.</p>\n<p>Fails if <code>timeout</code> expires before the element appears. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>\n<p>The <code>limit</code> argument can used to define how many elements the page should contain. When <code>limit</code> is <a href=\"#type-None\" class=\"name\">None</a> (default) page can contain one or more elements. When limit is a number, page must contain same number of elements.</p>\n<p><code>limit</code> is new in SeleniumLibrary 4.4</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Wait%20Until%20Page%20Contains%20Element"
  },
  {
    "name": "Wait Until Page Does Not Contain",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "text",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "text: str"
      },
      {
        "name": "timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout: timedelta | None = None"
      },
      {
        "name": "error",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "error: str | None = None"
      }
    ],
    "doc": "<p>Waits until <code>text</code> disappears from the current page.</p>\n<p>Fails if <code>timeout</code> expires before the text disappears. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p><code>error</code> can be used to override the default error message.</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Wait%20Until%20Page%20Does%20Not%20Contain"
  },
  {
    "name": "Wait Until Page Does Not Contain Element",
    "library": "SeleniumLibrary",
    "args": [
      {
        "name": "locator",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "WebElement",
              "typedoc": null,
              "nested": [],
              "union": false
            },
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "locator: WebElement | str"
      },
      {
        "name": "timeout",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "timedelta",
              "typedoc": "timedelta",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "timeout: timedelta | None = None"
      },
      {
        "name": "error",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "str",
              "typedoc": "string",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "error: str | None = None"
      },
      {
        "name": "limit",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "int",
              "typedoc": "integer",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "limit: int | None = None"
      }
    ],
    "doc": "<p>Waits until the element <code>locator</code> disappears from the current page.</p>\n<p>Fails if <code>timeout</code> expires before the element disappears. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>\n<p>The <code>limit</code> argument can used to define how many elements the page should not contain. When <code>limit</code> is <a href=\"#type-None\" class=\"name\">None</a> (default) page can`t contain any elements. When limit is a number, page must not contain same number of elements.</p>\n<p><code>limit</code> is new in SeleniumLibrary 4.4</p>",
    "url": "https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Wait%20Until%20Page%20Does%20Not%20Contain%20Element"
  },
  {
    "name": "Convert To Lower Case",
    "library": "String",
    "args": [
      {
        "name": "string",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "string"
      }
    ],
    "doc": "<p>Converts string to lower case.</p>\n<p>Uses Python's standard <a href=\"https://docs.python.org/library/stdtypes.html#str.lower\">lower()</a> method.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${str1} =</td>\n<td>Convert To Lower Case</td>\n<td>ABC</td>\n</tr>\n<tr>\n<td>${str2} =</td>\n<td>Convert To Lower Case</td>\n<td>1A2c3D</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${str1}</td>\n<td>abc</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${str2}</td>\n<td>1a2c3d</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/String.html#Convert%20To%20Lower%20Case"
  },
  {
    "name": "Convert To Title Case",
    "library": "String",
    "args": [
      {
        "name": "string",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "string"
      },
      {
        "name": "exclude",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "exclude=None"
      }
    ],
    "doc": "<p>Converts string to title case.</p>\n<p>Uses the following algorithm:</p>\n<ul>\n<li>Split the string to words from whitespace characters (spaces, newlines, etc.).</li>\n<li>Exclude words that are not all lower case. This preserves, for example, \"OK\" and \"iPhone\".</li>\n<li>Exclude also words listed in the optional <code>exclude</code> argument.</li>\n<li>Title case the first alphabetical character of each word that has not been excluded.</li>\n<li>Join all words together so that original whitespace is preserved.</li>\n</ul>\n<p>Explicitly excluded words can be given as a list or as a string with words separated by a comma and an optional space. Excluded words are actually considered to be regular expression patterns, so it is possible to use something like \"example[.!?]?\" to match the word \"example\" on it own and also if followed by \".\", \"!\" or \"?\". See <span class=\"name\">BuiltIn.Should Match Regexp</span> for more information about Python regular expression syntax in general and how to use it in Robot Framework data in particular.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${str1} =</td>\n<td>Convert To Title Case</td>\n<td>hello, world!</td>\n<td></td>\n</tr>\n<tr>\n<td>${str2} =</td>\n<td>Convert To Title Case</td>\n<td>it's an OK iPhone</td>\n<td>exclude=a, an, the</td>\n</tr>\n<tr>\n<td>${str3} =</td>\n<td>Convert To Title Case</td>\n<td>distance is 1 km.</td>\n<td>exclude=is, km.?</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${str1}</td>\n<td>Hello, World!</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${str2}</td>\n<td>It's an OK iPhone</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${str3}</td>\n<td>Distance is 1 km.</td>\n<td></td>\n</tr>\n</table>\n<p>The reason this keyword does not use Python's standard <a href=\"https://docs.python.org/library/stdtypes.html#str.title\">title()</a> method is that it can yield undesired results, for example, if strings contain upper case letters or special characters like apostrophes. It would, for example, convert \"it's an OK iPhone\" to \"It'S An Ok Iphone\".</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/String.html#Convert%20To%20Title%20Case"
  },
  {
    "name": "Convert To Upper Case",
    "library": "String",
    "args": [
      {
        "name": "string",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "string"
      }
    ],
    "doc": "<p>Converts string to upper case.</p>\n<p>Uses Python's standard <a href=\"https://docs.python.org/library/stdtypes.html#str.upper\">upper()</a> method.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${str1} =</td>\n<td>Convert To Upper Case</td>\n<td>abc</td>\n</tr>\n<tr>\n<td>${str2} =</td>\n<td>Convert To Upper Case</td>\n<td>1a2C3d</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${str1}</td>\n<td>ABC</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${str2}</td>\n<td>1A2C3D</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/String.html#Convert%20To%20Upper%20Case"
  },
  {
    "name": "Decode Bytes To String",
    "library": "String",
    "args": [
      {
        "name": "bytes",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "bytes"
      },
      {
        "name": "encoding",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "encoding"
      },
      {
        "name": "errors",
        "type": null,
        "defaultValue": "strict",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "errors=strict"
      }
    ],
    "doc": "<p>Decodes the given <code>bytes</code> to a string using the given <code>encoding</code>.</p>\n<p><code>errors</code> argument controls what to do if decoding some bytes fails. All values accepted by <code>decode</code> method in Python are valid, but in practice the following values are most useful:</p>\n<ul>\n<li><code>strict</code>: fail if characters cannot be decoded (default)</li>\n<li><code>ignore</code>: ignore characters that cannot be decoded</li>\n<li><code>replace</code>: replace characters that cannot be decoded with a replacement character</li>\n</ul>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${string} =</td>\n<td>Decode Bytes To String</td>\n<td>${bytes}</td>\n<td>UTF-8</td>\n<td></td>\n</tr>\n<tr>\n<td>${string} =</td>\n<td>Decode Bytes To String</td>\n<td>${bytes}</td>\n<td>ASCII</td>\n<td>errors=ignore</td>\n</tr>\n</table>\n<p>Use <a href=\"#Encode%20String%20To%20Bytes\" class=\"name\">Encode String To Bytes</a> if you need to convert strings to bytes, and <span class=\"name\">Convert To String</span> in <code>BuiltIn</code> if you need to convert arbitrary objects to strings.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/String.html#Decode%20Bytes%20To%20String"
  },
  {
    "name": "Encode String To Bytes",
    "library": "String",
    "args": [
      {
        "name": "string",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "string"
      },
      {
        "name": "encoding",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "encoding"
      },
      {
        "name": "errors",
        "type": null,
        "defaultValue": "strict",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "errors=strict"
      }
    ],
    "doc": "<p>Encodes the given <code>string</code> to bytes using the given <code>encoding</code>.</p>\n<p><code>errors</code> argument controls what to do if encoding some characters fails. All values accepted by <code>encode</code> method in Python are valid, but in practice the following values are most useful:</p>\n<ul>\n<li><code>strict</code>: fail if characters cannot be encoded (default)</li>\n<li><code>ignore</code>: ignore characters that cannot be encoded</li>\n<li><code>replace</code>: replace characters that cannot be encoded with a replacement character</li>\n</ul>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${bytes} =</td>\n<td>Encode String To Bytes</td>\n<td>${string}</td>\n<td>UTF-8</td>\n<td></td>\n</tr>\n<tr>\n<td>${bytes} =</td>\n<td>Encode String To Bytes</td>\n<td>${string}</td>\n<td>ASCII</td>\n<td>errors=ignore</td>\n</tr>\n</table>\n<p>Use <span class=\"name\">Convert To Bytes</span> in <code>BuiltIn</code> if you want to create bytes based on character or integer sequences. Use <a href=\"#Decode%20Bytes%20To%20String\" class=\"name\">Decode Bytes To String</a> if you need to convert bytes to strings and <span class=\"name\">Convert To String</span> in <code>BuiltIn</code> if you need to convert arbitrary objects to strings.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/String.html#Encode%20String%20To%20Bytes"
  },
  {
    "name": "Fetch From Left",
    "library": "String",
    "args": [
      {
        "name": "string",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "string"
      },
      {
        "name": "marker",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "marker"
      }
    ],
    "doc": "<p>Returns contents of the <code>string</code> before the first occurrence of <code>marker</code>.</p>\n<p>If the <code>marker</code> is not found, whole string is returned.</p>\n<p>See also <a href=\"#Fetch%20From%20Right\" class=\"name\">Fetch From Right</a>, <a href=\"#Split%20String\" class=\"name\">Split String</a> and <a href=\"#Split%20String%20From%20Right\" class=\"name\">Split String From Right</a>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/String.html#Fetch%20From%20Left"
  },
  {
    "name": "Fetch From Right",
    "library": "String",
    "args": [
      {
        "name": "string",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "string"
      },
      {
        "name": "marker",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "marker"
      }
    ],
    "doc": "<p>Returns contents of the <code>string</code> after the last occurrence of <code>marker</code>.</p>\n<p>If the <code>marker</code> is not found, whole string is returned.</p>\n<p>See also <a href=\"#Fetch%20From%20Left\" class=\"name\">Fetch From Left</a>, <a href=\"#Split%20String\" class=\"name\">Split String</a> and <a href=\"#Split%20String%20From%20Right\" class=\"name\">Split String From Right</a>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/String.html#Fetch%20From%20Right"
  },
  {
    "name": "Format String",
    "library": "String",
    "args": [
      {
        "name": "template",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_ONLY",
        "required": true,
        "repr": "template"
      },
      {
        "name": "",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_ONLY_MARKER",
        "required": false,
        "repr": "/"
      },
      {
        "name": "positional",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*positional"
      },
      {
        "name": "named",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_NAMED",
        "required": false,
        "repr": "**named"
      }
    ],
    "doc": "<p>Formats a <code>template</code> using the given <code>positional</code> and <code>named</code> arguments.</p>\n<p>The template can be either be a string or an absolute path to an existing file. In the latter case the file is read and its contents are used as the template. If the template file contains non-ASCII characters, it must be encoded using UTF-8.</p>\n<p>The template is formatted using Python's <a href=\"https://docs.python.org/library/string.html#format-string-syntax\">format string syntax</a>. Placeholders are marked using <code>{}</code> with possible field name and format specification inside. Literal curly braces can be inserted by doubling them like <span class=\"name\">{{</span> and <span class=\"name\">}}</span>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${to} =</td>\n<td>Format String</td>\n<td>To: {} &lt;{}&gt;</td>\n<td>${user}</td>\n<td>${email}</td>\n<td></td>\n</tr>\n<tr>\n<td>${to} =</td>\n<td>Format String</td>\n<td>To: {name} &lt;{email}&gt;</td>\n<td>name=${name}</td>\n<td>email=${email}</td>\n<td></td>\n</tr>\n<tr>\n<td>${to} =</td>\n<td>Format String</td>\n<td>To: {user.name} &lt;{user.email}&gt;</td>\n<td>user=${user}</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${xx} =</td>\n<td>Format String</td>\n<td>{:*^30}</td>\n<td>centered</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${yy} =</td>\n<td>Format String</td>\n<td>{0:{width}{base}}</td>\n<td>${42}</td>\n<td>base=X</td>\n<td>width=10</td>\n</tr>\n<tr>\n<td>${zz} =</td>\n<td>Format String</td>\n<td>${CURDIR}/template.txt</td>\n<td>positional</td>\n<td>named=value</td>\n<td></td>\n</tr>\n</table>\n<p>Prior to Robot Framework 7.1, possible equal signs in the template string must be escaped with a backslash like <span class=\"name\">`x\\={}</span>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/String.html#Format%20String"
  },
  {
    "name": "Generate Random String",
    "library": "String",
    "args": [
      {
        "name": "length",
        "type": null,
        "defaultValue": "8",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "length=8"
      },
      {
        "name": "chars",
        "type": null,
        "defaultValue": "[LETTERS][NUMBERS]",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "chars=[LETTERS][NUMBERS]"
      }
    ],
    "doc": "<p>Generates a string with a desired <code>length</code> from the given <code>chars</code>.</p>\n<p><code>length</code> can be given as a number, a string representation of a number, or as a range of numbers, such as <code>5-10</code>. When a range of values is given the range will be selected by random within the range.</p>\n<p>The population sequence <code>chars</code> contains the characters to use when generating the random string. It can contain any characters, and it is possible to use special markers explained in the table below:</p>\n<table border=\"1\">\n<tr>\n<th>Marker</th>\n<th>Explanation</th>\n</tr>\n<tr>\n<td><code>[LOWER]</code></td>\n<td>Lowercase ASCII characters from <code>a</code> to <code>z</code>.</td>\n</tr>\n<tr>\n<td><code>[UPPER]</code></td>\n<td>Uppercase ASCII characters from <code>A</code> to <code>Z</code>.</td>\n</tr>\n<tr>\n<td><code>[LETTERS]</code></td>\n<td>Lowercase and uppercase ASCII characters.</td>\n</tr>\n<tr>\n<td><code>[NUMBERS]</code></td>\n<td>Numbers from 0 to 9.</td>\n</tr>\n</table>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${ret} =</td>\n<td>Generate Random String</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${low} =</td>\n<td>Generate Random String</td>\n<td>12</td>\n<td>[LOWER]</td>\n</tr>\n<tr>\n<td>${bin} =</td>\n<td>Generate Random String</td>\n<td>8</td>\n<td>01</td>\n</tr>\n<tr>\n<td>${hex} =</td>\n<td>Generate Random String</td>\n<td>4</td>\n<td>[NUMBERS]abcdef</td>\n</tr>\n<tr>\n<td>${rnd} =</td>\n<td>Generate Random String</td>\n<td>5-10</td>\n<td># Generates a string 5 to 10 characters long</td>\n</tr>\n</table>\n<p>Giving <code>length</code> as a range of values is new in Robot Framework 5.0.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/String.html#Generate%20Random%20String"
  },
  {
    "name": "Get Line",
    "library": "String",
    "args": [
      {
        "name": "string",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "string"
      },
      {
        "name": "line_number",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "line_number"
      }
    ],
    "doc": "<p>Returns the specified line from the given <code>string</code>.</p>\n<p>Line numbering starts from 0, and it is possible to use negative indices to refer to lines from the end. The line is returned without the newline character.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${first} =</td>\n<td>Get Line</td>\n<td>${string}</td>\n<td>0</td>\n</tr>\n<tr>\n<td>${2nd last} =</td>\n<td>Get Line</td>\n<td>${string}</td>\n<td>-2</td>\n</tr>\n</table>\n<p>Use <a href=\"#Split%20To%20Lines\" class=\"name\">Split To Lines</a> if all lines are needed.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/String.html#Get%20Line"
  },
  {
    "name": "Get Line Count",
    "library": "String",
    "args": [
      {
        "name": "string",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "string"
      }
    ],
    "doc": "<p>Returns and logs the number of lines in the given string.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/String.html#Get%20Line%20Count"
  },
  {
    "name": "Get Lines Containing String",
    "library": "String",
    "args": [
      {
        "name": "string",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "string: str"
      },
      {
        "name": "pattern",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "pattern: str"
      },
      {
        "name": "case_insensitive",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "case_insensitive: bool | None = None"
      },
      {
        "name": "ignore_case",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case: bool = False"
      }
    ],
    "doc": "<p>Returns lines of the given <code>string</code> that contain the <code>pattern</code>.</p>\n<p>The <code>pattern</code> is always considered to be a normal string, not a glob or regexp pattern. A line matches if the <code>pattern</code> is found anywhere on it.</p>\n<p>The match is case-sensitive by default, but that can be changed by giving <code>ignore_case</code> a true value. This option is new in Robot Framework 7.0, but with older versions it is possible to use the nowadays deprecated <code>case_insensitive</code> argument.</p>\n<p>Lines are returned as a string with lines joined together with a newline. Possible trailing newline is never returned. The number of matching lines is automatically logged.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${lines} =</td>\n<td>Get Lines Containing String</td>\n<td>${result}</td>\n<td>An example</td>\n<td></td>\n</tr>\n<tr>\n<td>${ret} =</td>\n<td>Get Lines Containing String</td>\n<td>${ret}</td>\n<td>FAIL</td>\n<td>ignore_case=True</td>\n</tr>\n</table>\n<p>See <a href=\"#Get%20Lines%20Matching%20Pattern\" class=\"name\">Get Lines Matching Pattern</a> and <a href=\"#Get%20Lines%20Matching%20Regexp\" class=\"name\">Get Lines Matching Regexp</a> if you need more complex pattern matching.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/String.html#Get%20Lines%20Containing%20String"
  },
  {
    "name": "Get Lines Matching Pattern",
    "library": "String",
    "args": [
      {
        "name": "string",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "string: str"
      },
      {
        "name": "pattern",
        "type": {
          "name": "str",
          "typedoc": "string",
          "nested": [],
          "union": false
        },
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "pattern: str"
      },
      {
        "name": "case_insensitive",
        "type": {
          "name": "Union",
          "typedoc": null,
          "nested": [
            {
              "name": "bool",
              "typedoc": "boolean",
              "nested": [],
              "union": false
            },
            {
              "name": "None",
              "typedoc": "None",
              "nested": [],
              "union": false
            }
          ],
          "union": true
        },
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "case_insensitive: bool | None = None"
      },
      {
        "name": "ignore_case",
        "type": {
          "name": "bool",
          "typedoc": "boolean",
          "nested": [],
          "union": false
        },
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "ignore_case: bool = False"
      }
    ],
    "doc": "<p>Returns lines of the given <code>string</code> that match the <code>pattern</code>.</p>\n<p>The <code>pattern</code> is a <i>glob pattern</i> where:</p>\n<table border=\"1\">\n<tr>\n<td><code>*</code></td>\n<td>matches everything</td>\n</tr>\n<tr>\n<td><code>?</code></td>\n<td>matches any single character</td>\n</tr>\n<tr>\n<td><code>[chars]</code></td>\n<td>matches any character inside square brackets (e.g. <code>[abc]</code> matches either <code>a</code>, <code>b</code> or <code>c</code>)</td>\n</tr>\n<tr>\n<td><code>[!chars]</code></td>\n<td>matches any character not inside square brackets</td>\n</tr>\n</table>\n<p>A line matches only if it matches the <code>pattern</code> fully.</p>\n<p>The match is case-sensitive by default, but that can be changed by giving <code>ignore_case</code> a true value. This option is new in Robot Framework 7.0, but with older versions it is possible to use the nowadays deprecated <code>case_insensitive</code> argument.</p>\n<p>Lines are returned as a string with lines joined together with a newline. Possible trailing newline is never returned. The number of matching lines is automatically logged.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${lines} =</td>\n<td>Get Lines Matching Pattern</td>\n<td>${result}</td>\n<td>Wild???? example</td>\n<td></td>\n</tr>\n<tr>\n<td>${ret} =</td>\n<td>Get Lines Matching Pattern</td>\n<td>${ret}</td>\n<td>FAIL: *</td>\n<td>ignore_case=True</td>\n</tr>\n</table>\n<p>See <a href=\"#Get%20Lines%20Matching%20Regexp\" class=\"name\">Get Lines Matching Regexp</a> if you need more complex patterns and <a href=\"#Get%20Lines%20Containing%20String\" class=\"name\">Get Lines Containing String</a> if searching literal strings is enough.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/String.html#Get%20Lines%20Matching%20Pattern"
  },
  {
    "name": "Get Lines Matching Regexp",
    "library": "String",
    "args": [
      {
        "name": "string",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "string"
      },
      {
        "name": "pattern",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "pattern"
      },
      {
        "name": "partial_match",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "partial_match=False"
      },
      {
        "name": "flags",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "flags=None"
      }
    ],
    "doc": "<p>Returns lines of the given <code>string</code> that match the regexp <code>pattern</code>.</p>\n<p>See <span class=\"name\">BuiltIn.Should Match Regexp</span> for more information about Python regular expression syntax in general and how to use it in Robot Framework data in particular.</p>\n<p>Lines match only if they match the pattern fully by default, but partial matching can be enabled by giving the <code>partial_match</code> argument a true value.</p>\n<p>If the pattern is empty, it matches only empty lines by default. When partial matching is enabled, empty pattern matches all lines.</p>\n<p>Possible flags altering how the expression is parsed (e.g. <code>re.IGNORECASE</code>, <code>re.VERBOSE</code>) can be given using the <code>flags</code> argument (e.g. <code>flags=IGNORECASE | VERBOSE</code>) or embedded to the pattern (e.g. <code>(?ix)pattern</code>).</p>\n<p>Lines are returned as one string concatenated back together with newlines. Possible trailing newline is never returned. The number of matching lines is automatically logged.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${lines} =</td>\n<td>Get Lines Matching Regexp</td>\n<td>${result}</td>\n<td>Reg\\\\w{3} example</td>\n<td></td>\n</tr>\n<tr>\n<td>${lines} =</td>\n<td>Get Lines Matching Regexp</td>\n<td>${result}</td>\n<td>Reg\\\\w{3} example</td>\n<td>partial_match=true</td>\n</tr>\n<tr>\n<td>${ret} =</td>\n<td>Get Lines Matching Regexp</td>\n<td>${ret}</td>\n<td>(?i)FAIL: .*</td>\n<td></td>\n</tr>\n<tr>\n<td>${ret} =</td>\n<td>Get Lines Matching Regexp</td>\n<td>${ret}</td>\n<td>FAIL: .*</td>\n<td>flags=IGNORECASE</td>\n</tr>\n</table>\n<p>See <a href=\"#Get%20Lines%20Matching%20Pattern\" class=\"name\">Get Lines Matching Pattern</a> and <a href=\"#Get%20Lines%20Containing%20String\" class=\"name\">Get Lines Containing String</a> if you do not need the full regular expression powers (and complexity).</p>\n<p>The <code>flags</code> argument is new in Robot Framework 6.0.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/String.html#Get%20Lines%20Matching%20Regexp"
  },
  {
    "name": "Get Regexp Matches",
    "library": "String",
    "args": [
      {
        "name": "string",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "string"
      },
      {
        "name": "pattern",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "pattern"
      },
      {
        "name": "groups",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*groups"
      },
      {
        "name": "flags",
        "type": null,
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "flags=None"
      }
    ],
    "doc": "<p>Returns a list of all non-overlapping matches in the given string.</p>\n<p><code>string</code> is the string to find matches from and <code>pattern</code> is the regular expression. See <span class=\"name\">BuiltIn.Should Match Regexp</span> for more information about Python regular expression syntax in general and how to use it in Robot Framework data in particular.</p>\n<p>If no groups are used, the returned list contains full matches. If one group is used, the list contains only contents of that group. If multiple groups are used, the list contains tuples that contain individual group contents. All groups can be given as indexes (starting from 1) and named groups also as names.</p>\n<p>Possible flags altering how the expression is parsed (e.g. <code>re.IGNORECASE</code>, <code>re.MULTILINE</code>) can be given using the <code>flags</code> argument (e.g. <code>flags=IGNORECASE | MULTILINE</code>) or embedded to the pattern (e.g. <code>(?im)pattern</code>).</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${no match} =</td>\n<td>Get Regexp Matches</td>\n<td>the string</td>\n<td>xxx</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${matches} =</td>\n<td>Get Regexp Matches</td>\n<td>the string</td>\n<td>t..</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${matches} =</td>\n<td>Get Regexp Matches</td>\n<td>the string</td>\n<td>T..</td>\n<td>flags=IGNORECASE</td>\n<td></td>\n</tr>\n<tr>\n<td>${one group} =</td>\n<td>Get Regexp Matches</td>\n<td>the string</td>\n<td>t(..)</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>${named group} =</td>\n<td>Get Regexp Matches</td>\n<td>the string</td>\n<td>t(?P&lt;name&gt;..)</td>\n<td>name</td>\n<td></td>\n</tr>\n<tr>\n<td>${two groups} =</td>\n<td>Get Regexp Matches</td>\n<td>the string</td>\n<td>t(.)(.)</td>\n<td>1</td>\n<td>2</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${no match} = []\n${matches} = ['the', 'tri']\n${one group} = ['he', 'ri']\n${named group} = ['he', 'ri']\n${two groups} = [('h', 'e'), ('r', 'i')]\n</pre>\n<p>The <code>flags</code> argument is new in Robot Framework 6.0.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/String.html#Get%20Regexp%20Matches"
  },
  {
    "name": "Get Substring",
    "library": "String",
    "args": [
      {
        "name": "string",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "string"
      },
      {
        "name": "start",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "start"
      },
      {
        "name": "end",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "end=None"
      }
    ],
    "doc": "<p>Returns a substring from <code>start</code> index to <code>end</code> index.</p>\n<p>The <code>start</code> index is inclusive and <code>end</code> is exclusive. Indexing starts from 0, and it is possible to use negative indices to refer to characters from the end.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${ignore first} =</td>\n<td>Get Substring</td>\n<td>${string}</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>${ignore last} =</td>\n<td>Get Substring</td>\n<td>${string}</td>\n<td>0</td>\n<td>-1</td>\n</tr>\n<tr>\n<td>${5th to 10th} =</td>\n<td>Get Substring</td>\n<td>${string}</td>\n<td>4</td>\n<td>10</td>\n</tr>\n<tr>\n<td>${first two} =</td>\n<td>Get Substring</td>\n<td>${string}</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>${last two} =</td>\n<td>Get Substring</td>\n<td>${string}</td>\n<td>-2</td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/String.html#Get%20Substring"
  },
  {
    "name": "Remove String",
    "library": "String",
    "args": [
      {
        "name": "string",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "string"
      },
      {
        "name": "removables",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*removables"
      }
    ],
    "doc": "<p>Removes all <code>removables</code> from the given <code>string</code>.</p>\n<p><code>removables</code> are used as literal strings. Each removable will be matched to a temporary string from which preceding removables have been already removed. See second example below.</p>\n<p>Use <a href=\"#Remove%20String%20Using%20Regexp\" class=\"name\">Remove String Using Regexp</a> if more powerful pattern matching is needed. If only a certain number of matches should be removed, <a href=\"#Replace%20String\" class=\"name\">Replace String</a> or <a href=\"#Replace%20String%20Using%20Regexp\" class=\"name\">Replace String Using Regexp</a> can be used.</p>\n<p>A modified version of the string is returned and the original string is not altered.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${str} =</td>\n<td>Remove String</td>\n<td>Robot Framework</td>\n<td>work</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${str}</td>\n<td>Robot Frame</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${str} =</td>\n<td>Remove String</td>\n<td>Robot Framework</td>\n<td>o</td>\n<td>bt</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${str}</td>\n<td>R Framewrk</td>\n<td></td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/String.html#Remove%20String"
  },
  {
    "name": "Remove String Using Regexp",
    "library": "String",
    "args": [
      {
        "name": "string",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "string"
      },
      {
        "name": "patterns",
        "type": null,
        "defaultValue": null,
        "kind": "VAR_POSITIONAL",
        "required": false,
        "repr": "*patterns"
      },
      {
        "name": "flags",
        "type": null,
        "defaultValue": "None",
        "kind": "NAMED_ONLY",
        "required": false,
        "repr": "flags=None"
      }
    ],
    "doc": "<p>Removes <code>patterns</code> from the given <code>string</code>.</p>\n<p>This keyword is otherwise identical to <a href=\"#Remove%20String\" class=\"name\">Remove String</a>, but the <code>patterns</code> to search for are considered to be a regular expression. See <a href=\"#Replace%20String%20Using%20Regexp\" class=\"name\">Replace String Using Regexp</a> for more information about the regular expression syntax. That keyword can also be used if there is a need to remove only a certain number of occurrences.</p>\n<p>Possible flags altering how the expression is parsed (e.g. <code>re.IGNORECASE</code>, <code>re.MULTILINE</code>) can be given using the <code>flags</code> argument (e.g. <code>flags=IGNORECASE | MULTILINE</code>) or embedded to the pattern (e.g. <code>(?im)pattern</code>).</p>\n<p>The <code>flags</code> argument is new in Robot Framework 6.0.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/String.html#Remove%20String%20Using%20Regexp"
  },
  {
    "name": "Replace String",
    "library": "String",
    "args": [
      {
        "name": "string",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "string"
      },
      {
        "name": "search_for",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "search_for"
      },
      {
        "name": "replace_with",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "replace_with"
      },
      {
        "name": "count",
        "type": null,
        "defaultValue": "-1",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "count=-1"
      }
    ],
    "doc": "<p>Replaces <code>search_for</code> in the given <code>string</code> with <code>replace_with</code>.</p>\n<p><code>search_for</code> is used as a literal string. See <a href=\"#Replace%20String%20Using%20Regexp\" class=\"name\">Replace String Using Regexp</a> if more powerful pattern matching is needed. If you need to just remove a string see <a href=\"#Remove%20String\" class=\"name\">Remove String</a>.</p>\n<p>If the optional argument <code>count</code> is given, only that many occurrences from left are replaced. Negative <code>count</code> means that all occurrences are replaced (default behaviour) and zero means that nothing is done.</p>\n<p>A modified version of the string is returned and the original string is not altered.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${str} =</td>\n<td>Replace String</td>\n<td>Hello, world!</td>\n<td>world</td>\n<td>tellus</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${str}</td>\n<td>Hello, tellus!</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${str} =</td>\n<td>Replace String</td>\n<td>Hello, world!</td>\n<td>l</td>\n<td>${EMPTY}</td>\n<td>count=1</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${str}</td>\n<td>Helo, world!</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/String.html#Replace%20String"
  },
  {
    "name": "Replace String Using Regexp",
    "library": "String",
    "args": [
      {
        "name": "string",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "string"
      },
      {
        "name": "pattern",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "pattern"
      },
      {
        "name": "replace_with",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "replace_with"
      },
      {
        "name": "count",
        "type": null,
        "defaultValue": "-1",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "count=-1"
      },
      {
        "name": "flags",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "flags=None"
      }
    ],
    "doc": "<p>Replaces <code>pattern</code> in the given <code>string</code> with <code>replace_with</code>.</p>\n<p>This keyword is otherwise identical to <a href=\"#Replace%20String\" class=\"name\">Replace String</a>, but the <code>pattern</code> to search for is considered to be a regular expression.  See <span class=\"name\">BuiltIn.Should Match Regexp</span> for more information about Python regular expression syntax in general and how to use it in Robot Framework data in particular.</p>\n<p>Possible flags altering how the expression is parsed (e.g. <code>re.IGNORECASE</code>, <code>re.MULTILINE</code>) can be given using the <code>flags</code> argument (e.g. <code>flags=IGNORECASE | MULTILINE</code>) or embedded to the pattern (e.g. <code>(?im)pattern</code>).</p>\n<p>If you need to just remove a string see <a href=\"#Remove%20String%20Using%20Regexp\" class=\"name\">Remove String Using Regexp</a>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${str} =</td>\n<td>Replace String Using Regexp</td>\n<td>${str}</td>\n<td>20\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d</td>\n<td>&lt;DATE&gt;</td>\n<td></td>\n</tr>\n<tr>\n<td>${str} =</td>\n<td>Replace String Using Regexp</td>\n<td>${str}</td>\n<td>(Hello|Hi)</td>\n<td>${EMPTY}</td>\n<td>count=1</td>\n</tr>\n</table>\n<p>The <code>flags</code> argument is new in Robot Framework 6.0.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/String.html#Replace%20String%20Using%20Regexp"
  },
  {
    "name": "Should Be Byte String",
    "library": "String",
    "args": [
      {
        "name": "item",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "item"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      }
    ],
    "doc": "<p>Fails if the given <code>item</code> is not a byte string.</p>\n<p>Use <a href=\"#Should%20Be%20String\" class=\"name\">Should Be String</a> if you want to verify the <code>item</code> is a string.</p>\n<p>The default error message can be overridden with the optional <code>msg</code> argument.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/String.html#Should%20Be%20Byte%20String"
  },
  {
    "name": "Should Be Lower Case",
    "library": "String",
    "args": [
      {
        "name": "string",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "string"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      }
    ],
    "doc": "<p>Fails if the given <code>string</code> is not in lower case.</p>\n<p>For example, <code>'string'</code> and <code>'with specials!'</code> would pass, and <code>'String'</code>, <code>''</code> and <code>' '</code> would fail.</p>\n<p>The default error message can be overridden with the optional <code>msg</code> argument.</p>\n<p>See also <a href=\"#Should%20Be%20Upper%20Case\" class=\"name\">Should Be Upper Case</a> and <a href=\"#Should%20Be%20Title%20Case\" class=\"name\">Should Be Title Case</a>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/String.html#Should%20Be%20Lower%20Case"
  },
  {
    "name": "Should Be String",
    "library": "String",
    "args": [
      {
        "name": "item",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "item"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      }
    ],
    "doc": "<p>Fails if the given <code>item</code> is not a string.</p>\n<p>The default error message can be overridden with the optional <code>msg</code> argument.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/String.html#Should%20Be%20String"
  },
  {
    "name": "Should Be Title Case",
    "library": "String",
    "args": [
      {
        "name": "string",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "string"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      },
      {
        "name": "exclude",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "exclude=None"
      }
    ],
    "doc": "<p>Fails if given <code>string</code> is not title.</p>\n<p><code>string</code> is a title cased string if there is at least one upper case letter in each word.</p>\n<p>For example, <code>'This Is Title'</code> and <code>'OK, Give Me My iPhone'</code> would pass. <code>'all words lower'</code> and <code>'Word In lower'</code> would fail.</p>\n<p>This logic changed in Robot Framework 4.0 to be compatible with <a href=\"#Convert%20To%20Title%20Case\" class=\"name\">Convert to Title Case</a>. See <a href=\"#Convert%20To%20Title%20Case\" class=\"name\">Convert to Title Case</a> for title case algorithm and reasoning.</p>\n<p>The default error message can be overridden with the optional <code>msg</code> argument.</p>\n<p>Words can be explicitly excluded with the optional <code>exclude</code> argument.</p>\n<p>Explicitly excluded words can be given as a list or as a string with words separated by a comma and an optional space. Excluded words are actually considered to be regular expression patterns, so it is possible to use something like \"example[.!?]?\" to match the word \"example\" on it own and also if followed by \".\", \"!\" or \"?\". See <span class=\"name\">BuiltIn.Should Match Regexp</span> for more information about Python regular expression syntax in general and how to use it in Robot Framework data in particular.</p>\n<p>See also <a href=\"#Should%20Be%20Upper%20Case\" class=\"name\">Should Be Upper Case</a> and <a href=\"#Should%20Be%20Lower%20Case\" class=\"name\">Should Be Lower Case</a>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/String.html#Should%20Be%20Title%20Case"
  },
  {
    "name": "Should Be Unicode String",
    "library": "String",
    "args": [
      {
        "name": "item",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "item"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      }
    ],
    "doc": "<p>Fails if the given <code>item</code> is not a Unicode string.</p>\n<p>On Python 3 this keyword behaves exactly the same way <a href=\"#Should%20Be%20String\" class=\"name\">Should Be String</a>. That keyword should be used instead and this keyword will be deprecated.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/String.html#Should%20Be%20Unicode%20String"
  },
  {
    "name": "Should Be Upper Case",
    "library": "String",
    "args": [
      {
        "name": "string",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "string"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      }
    ],
    "doc": "<p>Fails if the given <code>string</code> is not in upper case.</p>\n<p>For example, <code>'STRING'</code> and <code>'WITH SPECIALS!'</code> would pass, and <code>'String'</code>, <code>''</code> and <code>' '</code> would fail.</p>\n<p>The default error message can be overridden with the optional <code>msg</code> argument.</p>\n<p>See also <a href=\"#Should%20Be%20Title%20Case\" class=\"name\">Should Be Title Case</a> and <a href=\"#Should%20Be%20Lower%20Case\" class=\"name\">Should Be Lower Case</a>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/String.html#Should%20Be%20Upper%20Case"
  },
  {
    "name": "Should Not Be String",
    "library": "String",
    "args": [
      {
        "name": "item",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "item"
      },
      {
        "name": "msg",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "msg=None"
      }
    ],
    "doc": "<p>Fails if the given <code>item</code> is a string.</p>\n<p>The default error message can be overridden with the optional <code>msg</code> argument.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/String.html#Should%20Not%20Be%20String"
  },
  {
    "name": "Split String",
    "library": "String",
    "args": [
      {
        "name": "string",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "string"
      },
      {
        "name": "separator",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "separator=None"
      },
      {
        "name": "max_split",
        "type": null,
        "defaultValue": "-1",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "max_split=-1"
      }
    ],
    "doc": "<p>Splits the <code>string</code> using <code>separator</code> as a delimiter string.</p>\n<p>If a <code>separator</code> is not given, any whitespace string is a separator. In that case also possible consecutive whitespace as well as leading and trailing whitespace is ignored.</p>\n<p>Split words are returned as a list. If the optional <code>max_split</code> is given, at most <code>max_split</code> splits are done, and the returned list will have maximum <code>max_split + 1</code> elements.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>@{words} =</td>\n<td>Split String</td>\n<td>${string}</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>@{words} =</td>\n<td>Split String</td>\n<td>${string}</td>\n<td>,${SPACE}</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${pre}</td>\n<td>${post} =</td>\n<td>Split String</td>\n<td>${string}</td>\n<td>::</td>\n<td>1</td>\n</tr>\n</table>\n<p>See <a href=\"#Split%20String%20From%20Right\" class=\"name\">Split String From Right</a> if you want to start splitting from right, and <a href=\"#Fetch%20From%20Left\" class=\"name\">Fetch From Left</a> and <a href=\"#Fetch%20From%20Right\" class=\"name\">Fetch From Right</a> if you only want to get first/last part of the string.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/String.html#Split%20String"
  },
  {
    "name": "Split String From Right",
    "library": "String",
    "args": [
      {
        "name": "string",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "string"
      },
      {
        "name": "separator",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "separator=None"
      },
      {
        "name": "max_split",
        "type": null,
        "defaultValue": "-1",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "max_split=-1"
      }
    ],
    "doc": "<p>Splits the <code>string</code> using <code>separator</code> starting from right.</p>\n<p>Same as <a href=\"#Split%20String\" class=\"name\">Split String</a>, but splitting is started from right. This has an effect only when <code>max_split</code> is given.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${first}</td>\n<td>${rest} =</td>\n<td>Split String</td>\n<td>${string}</td>\n<td>-</td>\n<td>1</td>\n</tr>\n<tr>\n<td>${rest}</td>\n<td>${last} =</td>\n<td>Split String From Right</td>\n<td>${string}</td>\n<td>-</td>\n<td>1</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/String.html#Split%20String%20From%20Right"
  },
  {
    "name": "Split String To Characters",
    "library": "String",
    "args": [
      {
        "name": "string",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "string"
      }
    ],
    "doc": "<p>Splits the given <code>string</code> to characters.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>@{characters} =</td>\n<td>Split String To Characters</td>\n<td>${string}</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/String.html#Split%20String%20To%20Characters"
  },
  {
    "name": "Split To Lines",
    "library": "String",
    "args": [
      {
        "name": "string",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "string"
      },
      {
        "name": "start",
        "type": null,
        "defaultValue": "0",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "start=0"
      },
      {
        "name": "end",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "end=None"
      }
    ],
    "doc": "<p>Splits the given string to lines.</p>\n<p>It is possible to get only a selection of lines from <code>start</code> to <code>end</code> so that <code>start</code> index is inclusive and <code>end</code> is exclusive. Line numbering starts from 0, and it is possible to use negative indices to refer to lines from the end.</p>\n<p>Lines are returned without the newlines. The number of returned lines is automatically logged.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>@{lines} =</td>\n<td>Split To Lines</td>\n<td>${manylines}</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>@{ignore first} =</td>\n<td>Split To Lines</td>\n<td>${manylines}</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>@{ignore last} =</td>\n<td>Split To Lines</td>\n<td>${manylines}</td>\n<td></td>\n<td>-1</td>\n</tr>\n<tr>\n<td>@{5th to 10th} =</td>\n<td>Split To Lines</td>\n<td>${manylines}</td>\n<td>4</td>\n<td>10</td>\n</tr>\n<tr>\n<td>@{first two} =</td>\n<td>Split To Lines</td>\n<td>${manylines}</td>\n<td></td>\n<td>1</td>\n</tr>\n<tr>\n<td>@{last two} =</td>\n<td>Split To Lines</td>\n<td>${manylines}</td>\n<td>-2</td>\n<td></td>\n</tr>\n</table>\n<p>Use <a href=\"#Get%20Line\" class=\"name\">Get Line</a> if you only need to get a single line.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/String.html#Split%20To%20Lines"
  },
  {
    "name": "Strip String",
    "library": "String",
    "args": [
      {
        "name": "string",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "string"
      },
      {
        "name": "mode",
        "type": null,
        "defaultValue": "both",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "mode=both"
      },
      {
        "name": "characters",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "characters=None"
      }
    ],
    "doc": "<p>Remove leading and/or trailing whitespaces from the given string.</p>\n<p><code>mode</code> is either <code>left</code> to remove leading characters, <code>right</code> to remove trailing characters, <code>both</code> (default) to remove the characters from both sides of the string or <code>none</code> to return the unmodified string.</p>\n<p>If the optional <code>characters</code> is given, it must be a string and the characters in the string will be stripped in the string. Please note, that this is not a substring to be removed but a list of characters, see the example below.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${stripped}=</td>\n<td>Strip String</td>\n<td>${SPACE}Hello${SPACE}</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${stripped}</td>\n<td>Hello</td>\n<td></td>\n</tr>\n<tr>\n<td>${stripped}=</td>\n<td>Strip String</td>\n<td>${SPACE}Hello${SPACE}</td>\n<td>mode=left</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${stripped}</td>\n<td>Hello${SPACE}</td>\n<td></td>\n</tr>\n<tr>\n<td>${stripped}=</td>\n<td>Strip String</td>\n<td>aabaHelloeee</td>\n<td>characters=abe</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${stripped}</td>\n<td>Hello</td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/String.html#Strip%20String"
  },
  {
    "name": "Add Element",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "element",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "element"
      },
      {
        "name": "index",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "index=None"
      },
      {
        "name": "xpath",
        "type": null,
        "defaultValue": ".",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "xpath=."
      }
    ],
    "doc": "<p>Adds a child element to the specified element.</p>\n<p>The element to whom to add the new element is specified using <code>source</code> and <code>xpath</code>. They have exactly the same semantics as with <a href=\"#Get%20Element\" class=\"name\">Get Element</a> keyword. The resulting XML structure is returned, and if the <code>source</code> is an already parsed XML structure, it is also modified in place.</p>\n<p>The <code>element</code> to add can be specified as a path to an XML file or as a string containing XML, or it can be an already parsed XML element. The element is copied before adding so modifying either the original or the added element has no effect on the other . The element is added as the last child by default, but a custom index can be used to alter the position. Indices start from zero (0 = first position, 1 = second position, etc.), and negative numbers refer to positions at the end (-1 = second last position, -2 = third last, etc.).</p>\n<p>Examples using <code>${XML}</code> structure from <a href=\"#Example\" class=\"name\">Example</a>:</p>\n<table border=\"1\">\n<tr>\n<td>Add Element</td>\n<td>${XML}</td>\n<td>&lt;new id=\"x\"&gt;&lt;c1/&gt;&lt;/new&gt;</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Add Element</td>\n<td>${XML}</td>\n<td>&lt;c2/&gt;</td>\n<td>xpath=new</td>\n<td></td>\n</tr>\n<tr>\n<td>Add Element</td>\n<td>${XML}</td>\n<td>&lt;c3/&gt;</td>\n<td>index=1</td>\n<td>xpath=new</td>\n</tr>\n<tr>\n<td>${new} =</td>\n<td>Get Element</td>\n<td>${XML}</td>\n<td>new</td>\n<td></td>\n</tr>\n<tr>\n<td>Elements Should Be Equal</td>\n<td>${new}</td>\n<td>&lt;new id=\"x\"&gt;&lt;c1/&gt;&lt;c3/&gt;&lt;c2/&gt;&lt;/new&gt;</td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>Use <a href=\"#Remove%20Element\" class=\"name\">Remove Element</a> or <a href=\"#Remove%20Elements\" class=\"name\">Remove Elements</a> to remove elements.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Add%20Element"
  },
  {
    "name": "Clear Element",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "xpath",
        "type": null,
        "defaultValue": ".",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "xpath=."
      },
      {
        "name": "clear_tail",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "clear_tail=False"
      }
    ],
    "doc": "<p>Clears the contents of the specified element.</p>\n<p>The element to clear is specified using <code>source</code> and <code>xpath</code>. They have exactly the same semantics as with <a href=\"#Get%20Element\" class=\"name\">Get Element</a> keyword. The resulting XML structure is returned, and if the <code>source</code> is an already parsed XML structure, it is also modified in place.</p>\n<p>Clearing the element means removing its text, attributes, and children. Element's tail text is not removed by default, but that can be changed by giving <code>clear_tail</code> a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>). See <a href=\"#Element%20attributes\" class=\"name\">Element attributes</a> section for more information about tail in general.</p>\n<p>Examples using <code>${XML}</code> structure from <a href=\"#Example\" class=\"name\">Example</a>:</p>\n<table border=\"1\">\n<tr>\n<td>Clear Element</td>\n<td>${XML}</td>\n<td>xpath=first</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${first} =</td>\n<td>Get Element</td>\n<td>${XML}</td>\n<td>xpath=first</td>\n<td></td>\n</tr>\n<tr>\n<td>Elements Should Be Equal</td>\n<td>${first}</td>\n<td>&lt;first/&gt;</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Clear Element</td>\n<td>${XML}</td>\n<td>xpath=html/p/b</td>\n<td>clear_tail=yes</td>\n<td></td>\n</tr>\n<tr>\n<td>Element Text Should Be</td>\n<td>${XML}</td>\n<td>Text with italics.</td>\n<td>xpath=html/p</td>\n<td>normalize_whitespace=yes</td>\n</tr>\n<tr>\n<td>Clear Element</td>\n<td>${XML}</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Elements Should Be Equal</td>\n<td>${XML}</td>\n<td>&lt;example/&gt;</td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>Use <a href=\"#Remove%20Element\" class=\"name\">Remove Element</a> to remove the whole element.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Clear%20Element"
  },
  {
    "name": "Copy Element",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "xpath",
        "type": null,
        "defaultValue": ".",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "xpath=."
      }
    ],
    "doc": "<p>Returns a copy of the specified element.</p>\n<p>The element to copy is specified using <code>source</code> and <code>xpath</code>. They have exactly the same semantics as with <a href=\"#Get%20Element\" class=\"name\">Get Element</a> keyword.</p>\n<p>If the copy or the original element is modified afterward, the changes have no effect on the other.</p>\n<p>Examples using <code>${XML}</code> structure from <a href=\"#Example\" class=\"name\">Example</a>:</p>\n<table border=\"1\">\n<tr>\n<td>${elem} =</td>\n<td>Get Element</td>\n<td>${XML}</td>\n<td>xpath=first</td>\n</tr>\n<tr>\n<td>${copy1} =</td>\n<td>Copy Element</td>\n<td>${elem}</td>\n<td></td>\n</tr>\n<tr>\n<td>${copy2} =</td>\n<td>Copy Element</td>\n<td>${XML}</td>\n<td>xpath=first</td>\n</tr>\n<tr>\n<td>Set Element Text</td>\n<td>${XML}</td>\n<td>new text</td>\n<td>xpath=first</td>\n</tr>\n<tr>\n<td>Set Element Attribute</td>\n<td>${copy1}</td>\n<td>id</td>\n<td>new</td>\n</tr>\n<tr>\n<td>Elements Should Be Equal</td>\n<td>${elem}</td>\n<td>&lt;first id=\"1\"&gt;new text&lt;/first&gt;</td>\n<td></td>\n</tr>\n<tr>\n<td>Elements Should Be Equal</td>\n<td>${copy1}</td>\n<td>&lt;first id=\"new\"&gt;text&lt;/first&gt;</td>\n<td></td>\n</tr>\n<tr>\n<td>Elements Should Be Equal</td>\n<td>${copy2}</td>\n<td>&lt;first id=\"1\"&gt;text&lt;/first&gt;</td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Copy%20Element"
  },
  {
    "name": "Element Attribute Should Be",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "expected",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "expected"
      },
      {
        "name": "xpath",
        "type": null,
        "defaultValue": ".",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "xpath=."
      },
      {
        "name": "message",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message=None"
      }
    ],
    "doc": "<p>Verifies that the specified attribute is <code>expected</code>.</p>\n<p>The element whose attribute is verified is specified using <code>source</code> and <code>xpath</code>. They have exactly the same semantics as with <a href=\"#Get%20Element\" class=\"name\">Get Element</a> keyword.</p>\n<p>The keyword passes if the attribute <code>name</code> of the element is equal to the <code>expected</code> value, and otherwise it fails. The default error message can be overridden with the <code>message</code> argument.</p>\n<p>To test that the element does not have a certain attribute, Python <code>None</code> (i.e. variable <code>${NONE}</code>) can be used as the expected value. A cleaner alternative is using <a href=\"#Element%20Should%20Not%20Have%20Attribute\" class=\"name\">Element Should Not Have Attribute</a>.</p>\n<p>Examples using <code>${XML}</code> structure from <a href=\"#Example\" class=\"name\">Example</a>:</p>\n<table border=\"1\">\n<tr>\n<td>Element Attribute Should Be</td>\n<td>${XML}</td>\n<td>id</td>\n<td>1</td>\n<td>xpath=first</td>\n</tr>\n<tr>\n<td>Element Attribute Should Be</td>\n<td>${XML}</td>\n<td>id</td>\n<td>${NONE}</td>\n<td></td>\n</tr>\n</table>\n<p>See also <a href=\"#Element%20Attribute%20Should%20Match\" class=\"name\">Element Attribute Should Match</a> and <a href=\"#Get%20Element%20Attribute\" class=\"name\">Get Element Attribute</a>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Element%20Attribute%20Should%20Be"
  },
  {
    "name": "Element Attribute Should Match",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "pattern",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "pattern"
      },
      {
        "name": "xpath",
        "type": null,
        "defaultValue": ".",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "xpath=."
      },
      {
        "name": "message",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message=None"
      }
    ],
    "doc": "<p>Verifies that the specified attribute matches <code>expected</code>.</p>\n<p>This keyword works exactly like <a href=\"#Element%20Attribute%20Should%20Be\" class=\"name\">Element Attribute Should Be</a> except that the expected value can be given as a pattern that the attribute of the element must match.</p>\n<p>Pattern matching is similar as matching files in a shell with <code>*</code>, <code>?</code> and <code>[chars]</code> acting as wildcards. See the <a href=\"#Pattern%20matching\" class=\"name\">Pattern matching</a> section for more information.</p>\n<p>Examples using <code>${XML}</code> structure from <a href=\"#Example\" class=\"name\">Example</a>:</p>\n<table border=\"1\">\n<tr>\n<td>Element Attribute Should Match</td>\n<td>${XML}</td>\n<td>id</td>\n<td>?</td>\n<td>xpath=first</td>\n</tr>\n<tr>\n<td>Element Attribute Should Match</td>\n<td>${XML}</td>\n<td>id</td>\n<td>c*d</td>\n<td>xpath=third/second</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Element%20Attribute%20Should%20Match"
  },
  {
    "name": "Element Should Exist",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "xpath",
        "type": null,
        "defaultValue": ".",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "xpath=."
      },
      {
        "name": "message",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message=None"
      }
    ],
    "doc": "<p>Verifies that one or more element match the given <code>xpath</code>.</p>\n<p>Arguments <code>source</code> and <code>xpath</code> have exactly the same semantics as with <a href=\"#Get%20Elements\" class=\"name\">Get Elements</a> keyword. Keyword passes if the <code>xpath</code> matches one or more elements in the <code>source</code>. The default error message can be overridden with the <code>message</code> argument.</p>\n<p>See also <a href=\"#Element%20Should%20Not%20Exist\" class=\"name\">Element Should Not Exist</a> as well as <a href=\"#Get%20Element%20Count\" class=\"name\">Get Element Count</a> that this keyword uses internally.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Element%20Should%20Exist"
  },
  {
    "name": "Element Should Not Exist",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "xpath",
        "type": null,
        "defaultValue": ".",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "xpath=."
      },
      {
        "name": "message",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message=None"
      }
    ],
    "doc": "<p>Verifies that no element match the given <code>xpath</code>.</p>\n<p>Arguments <code>source</code> and <code>xpath</code> have exactly the same semantics as with <a href=\"#Get%20Elements\" class=\"name\">Get Elements</a> keyword. Keyword fails if the <code>xpath</code> matches any element in the <code>source</code>. The default error message can be overridden with the <code>message</code> argument.</p>\n<p>See also <a href=\"#Element%20Should%20Exist\" class=\"name\">Element Should Exist</a> as well as <a href=\"#Get%20Element%20Count\" class=\"name\">Get Element Count</a> that this keyword uses internally.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Element%20Should%20Not%20Exist"
  },
  {
    "name": "Element Should Not Have Attribute",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "xpath",
        "type": null,
        "defaultValue": ".",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "xpath=."
      },
      {
        "name": "message",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message=None"
      }
    ],
    "doc": "<p>Verifies that the specified element does not have attribute <code>name</code>.</p>\n<p>The element whose attribute is verified is specified using <code>source</code> and <code>xpath</code>. They have exactly the same semantics as with <a href=\"#Get%20Element\" class=\"name\">Get Element</a> keyword.</p>\n<p>The keyword fails if the specified element has attribute <code>name</code>. The default error message can be overridden with the <code>message</code> argument.</p>\n<p>Examples using <code>${XML}</code> structure from <a href=\"#Example\" class=\"name\">Example</a>:</p>\n<table border=\"1\">\n<tr>\n<td>Element Should Not Have Attribute</td>\n<td>${XML}</td>\n<td>id</td>\n<td></td>\n</tr>\n<tr>\n<td>Element Should Not Have Attribute</td>\n<td>${XML}</td>\n<td>xxx</td>\n<td>xpath=first</td>\n</tr>\n</table>\n<p>See also <a href=\"#Get%20Element%20Attribute\" class=\"name\">Get Element Attribute</a>, <a href=\"#Get%20Element%20Attributes\" class=\"name\">Get Element Attributes</a>, <a href=\"#Element%20Text%20Should%20Be\" class=\"name\">Element Text Should Be</a> and <a href=\"#Element%20Text%20Should%20Match\" class=\"name\">Element Text Should Match</a>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Element%20Should%20Not%20Have%20Attribute"
  },
  {
    "name": "Element Text Should Be",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "expected",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "expected"
      },
      {
        "name": "xpath",
        "type": null,
        "defaultValue": ".",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "xpath=."
      },
      {
        "name": "normalize_whitespace",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "normalize_whitespace=False"
      },
      {
        "name": "message",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message=None"
      }
    ],
    "doc": "<p>Verifies that the text of the specified element is <code>expected</code>.</p>\n<p>The element whose text is verified is specified using <code>source</code> and <code>xpath</code>. They have exactly the same semantics as with <a href=\"#Get%20Element\" class=\"name\">Get Element</a> keyword.</p>\n<p>The text to verify is got from the specified element using the same logic as with <a href=\"#Get%20Element%20Text\" class=\"name\">Get Element Text</a>. This includes optional whitespace normalization using the <code>normalize_whitespace</code> option.</p>\n<p>The keyword passes if the text of the element is equal to the <code>expected</code> value, and otherwise it fails. The default error message can be overridden with the <code>message</code> argument.  Use <a href=\"#Element%20Text%20Should%20Match\" class=\"name\">Element Text Should Match</a> to verify the text against a pattern instead of an exact value.</p>\n<p>Examples using <code>${XML}</code> structure from <a href=\"#Example\" class=\"name\">Example</a>:</p>\n<table border=\"1\">\n<tr>\n<td>Element Text Should Be</td>\n<td>${XML}</td>\n<td>text</td>\n<td>xpath=first</td>\n</tr>\n<tr>\n<td>Element Text Should Be</td>\n<td>${XML}</td>\n<td>${EMPTY}</td>\n<td>xpath=second/child</td>\n</tr>\n<tr>\n<td>${paragraph} =</td>\n<td>Get Element</td>\n<td>${XML}</td>\n<td>xpath=html/p</td>\n</tr>\n<tr>\n<td>Element Text Should Be</td>\n<td>${paragraph}</td>\n<td>Text with bold and italics.</td>\n<td>normalize_whitespace=yes</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Element%20Text%20Should%20Be"
  },
  {
    "name": "Element Text Should Match",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "pattern",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "pattern"
      },
      {
        "name": "xpath",
        "type": null,
        "defaultValue": ".",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "xpath=."
      },
      {
        "name": "normalize_whitespace",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "normalize_whitespace=False"
      },
      {
        "name": "message",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "message=None"
      }
    ],
    "doc": "<p>Verifies that the text of the specified element matches <code>expected</code>.</p>\n<p>This keyword works exactly like <a href=\"#Element%20Text%20Should%20Be\" class=\"name\">Element Text Should Be</a> except that the expected value can be given as a pattern that the text of the element must match.</p>\n<p>Pattern matching is similar as matching files in a shell with <code>*</code>, <code>?</code> and <code>[chars]</code> acting as wildcards. See the <a href=\"#Pattern%20matching\" class=\"name\">Pattern matching</a> section for more information.</p>\n<p>Examples using <code>${XML}</code> structure from <a href=\"#Example\" class=\"name\">Example</a>:</p>\n<table border=\"1\">\n<tr>\n<td>Element Text Should Match</td>\n<td>${XML}</td>\n<td>t???</td>\n<td>xpath=first</td>\n</tr>\n<tr>\n<td>${paragraph} =</td>\n<td>Get Element</td>\n<td>${XML}</td>\n<td>xpath=html/p</td>\n</tr>\n<tr>\n<td>Element Text Should Match</td>\n<td>${paragraph}</td>\n<td>Text with * and *.</td>\n<td>normalize_whitespace=yes</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Element%20Text%20Should%20Match"
  },
  {
    "name": "Element To String",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "xpath",
        "type": null,
        "defaultValue": ".",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "xpath=."
      },
      {
        "name": "encoding",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "encoding=None"
      }
    ],
    "doc": "<p>Returns the string representation of the specified element.</p>\n<p>The element to convert to a string is specified using <code>source</code> and <code>xpath</code>. They have exactly the same semantics as with <a href=\"#Get%20Element\" class=\"name\">Get Element</a> keyword.</p>\n<p>The string is returned as Unicode by default. If <code>encoding</code> argument is given any value, the string is returned as bytes in the specified encoding. The resulting string never contains the XML declaration.</p>\n<p>See also <a href=\"#Log%20Element\" class=\"name\">Log Element</a> and <a href=\"#Save%20Xml\" class=\"name\">Save XML</a>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Element%20To%20String"
  },
  {
    "name": "Elements Should Be Equal",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "expected",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "expected"
      },
      {
        "name": "exclude_children",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "exclude_children=False"
      },
      {
        "name": "normalize_whitespace",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "normalize_whitespace=False"
      },
      {
        "name": "sort_children",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "sort_children=False"
      }
    ],
    "doc": "<p>Verifies that the given <code>source</code> element is equal to <code>expected</code>.</p>\n<p>Both <code>source</code> and <code>expected</code> can be given as a path to an XML file, as a string containing XML, or as an already parsed XML element structure. See <a href=\"#Introduction\" class=\"name\">introduction</a> for more information about parsing XML in general.</p>\n<p>The keyword passes if the <code>source</code> element and <code>expected</code> element are equal. This includes testing the tag names, texts, and attributes of the elements. By default, also child elements are verified the same way, but this can be disabled by setting <code>exclude_children</code> to a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>). Child elements are expected to be in the same order, but that can be changed by giving <code>sort_children</code> a true value. Notice that elements are sorted solely based on tag names.</p>\n<p>All texts inside the given elements are verified, but possible text outside them is not. By default, texts must match exactly, but setting <code>normalize_whitespace</code> to a true value makes text verification independent on newlines, tabs, and the amount of spaces. For more details about handling text see <a href=\"#Get%20Element%20Text\" class=\"name\">Get Element Text</a> keyword and discussion about elements' <a href=\"#text\" class=\"name\">text</a> and <a href=\"#tail\" class=\"name\">tail</a> attributes in the <a href=\"#Introduction\" class=\"name\">introduction</a>.</p>\n<p>Examples using <code>${XML}</code> structure from <a href=\"#Example\" class=\"name\">Example</a>:</p>\n<table border=\"1\">\n<tr>\n<td>${first} =</td>\n<td>Get Element</td>\n<td>${XML}</td>\n<td>first</td>\n<td></td>\n</tr>\n<tr>\n<td>Elements Should Be Equal</td>\n<td>${first}</td>\n<td>&lt;first id=\"1\"&gt;text&lt;/first&gt;</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${p} =</td>\n<td>Get Element</td>\n<td>${XML}</td>\n<td>html/p</td>\n<td></td>\n</tr>\n<tr>\n<td>Elements Should Be Equal</td>\n<td>${p}</td>\n<td>&lt;p&gt;Text with &lt;b&gt;bold&lt;/b&gt; and &lt;i&gt;italics&lt;/i&gt;.&lt;/p&gt;</td>\n<td>normalize_whitespace=yes</td>\n<td></td>\n</tr>\n<tr>\n<td>Elements Should Be Equal</td>\n<td>${p}</td>\n<td>&lt;p&gt;Text with&lt;/p&gt;</td>\n<td>exclude</td>\n<td>normalize</td>\n</tr>\n</table>\n<p>The last example may look a bit strange because the <code>&lt;p&gt;</code> element only has text <code>Text with</code>. The reason is that rest of the text inside <code>&lt;p&gt;</code> actually belongs to the child elements. This includes the <code>.</code> at the end that is the <a href=\"#tail\" class=\"name\">tail</a> text of the <code>&lt;i&gt;</code> element.</p>\n<p>See also <a href=\"#Elements%20Should%20Match\" class=\"name\">Elements Should Match</a>.</p>\n<p><code>sort_children</code> is new in Robot Framework 7.0.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Elements%20Should%20Be%20Equal"
  },
  {
    "name": "Elements Should Match",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "expected",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "expected"
      },
      {
        "name": "exclude_children",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "exclude_children=False"
      },
      {
        "name": "normalize_whitespace",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "normalize_whitespace=False"
      },
      {
        "name": "sort_children",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "sort_children=False"
      }
    ],
    "doc": "<p>Verifies that the given <code>source</code> element matches <code>expected</code>.</p>\n<p>This keyword works exactly like <a href=\"#Elements%20Should%20Be%20Equal\" class=\"name\">Elements Should Be Equal</a> except that texts and attribute values in the expected value can be given as patterns.</p>\n<p>Pattern matching is similar as matching files in a shell with <code>*</code>, <code>?</code> and <code>[chars]</code> acting as wildcards. See the <a href=\"#Pattern%20matching\" class=\"name\">Pattern matching</a> section for more information.</p>\n<p>Examples using <code>${XML}</code> structure from <a href=\"#Example\" class=\"name\">Example</a>:</p>\n<table border=\"1\">\n<tr>\n<td>${first} =</td>\n<td>Get Element</td>\n<td>${XML}</td>\n<td>first</td>\n</tr>\n<tr>\n<td>Elements Should Match</td>\n<td>${first}</td>\n<td>&lt;first id=\"?\"&gt;*&lt;/first&gt;</td>\n<td></td>\n</tr>\n</table>\n<p>See <a href=\"#Elements%20Should%20Be%20Equal\" class=\"name\">Elements Should Be Equal</a> for more examples.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Elements%20Should%20Match"
  },
  {
    "name": "Evaluate Xpath",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "expression",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "expression"
      },
      {
        "name": "context",
        "type": null,
        "defaultValue": ".",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "context=."
      }
    ],
    "doc": "<p>Evaluates the given xpath expression and returns results.</p>\n<p>The element in which context the expression is executed is specified using <code>source</code> and <code>context</code> arguments. They have exactly the same semantics as <code>source</code> and <code>xpath</code> arguments have with <a href=\"#Get%20Element\" class=\"name\">Get Element</a> keyword.</p>\n<p>The xpath expression to evaluate is given as <code>expression</code> argument. The result of the evaluation is returned as-is.</p>\n<p>Examples using <code>${XML}</code> structure from <a href=\"#Example\" class=\"name\">Example</a>:</p>\n<table border=\"1\">\n<tr>\n<td>${count} =</td>\n<td>Evaluate Xpath</td>\n<td>${XML}</td>\n<td>count(third/*)</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${count}</td>\n<td>${3}</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${text} =</td>\n<td>Evaluate Xpath</td>\n<td>${XML}</td>\n<td>string(descendant::second[last()]/@id)</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${text}</td>\n<td>child</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${bold} =</td>\n<td>Evaluate Xpath</td>\n<td>${XML}</td>\n<td>boolean(preceding-sibling::*[1] = 'bold')</td>\n<td>context=html/p/i</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${bold}</td>\n<td>${True}</td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>This keyword works only if lxml mode is taken into use when <a href=\"#Importing\" class=\"name\">importing</a> the library.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Evaluate%20Xpath"
  },
  {
    "name": "Get Child Elements",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "xpath",
        "type": null,
        "defaultValue": ".",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "xpath=."
      }
    ],
    "doc": "<p>Returns the child elements of the specified element as a list.</p>\n<p>The element whose children to return is specified using <code>source</code> and <code>xpath</code>. They have exactly the same semantics as with <a href=\"#Get%20Element\" class=\"name\">Get Element</a> keyword.</p>\n<p>All the direct child elements of the specified element are returned. If the element has no children, an empty list is returned.</p>\n<p>Examples using <code>${XML}</code> structure from <a href=\"#Example\" class=\"name\">Example</a>:</p>\n<table border=\"1\">\n<tr>\n<td>${children} =</td>\n<td>Get Child Elements</td>\n<td>${XML}</td>\n<td></td>\n</tr>\n<tr>\n<td>Length Should Be</td>\n<td>${children}</td>\n<td>4</td>\n<td></td>\n</tr>\n<tr>\n<td>${children} =</td>\n<td>Get Child Elements</td>\n<td>${XML}</td>\n<td>xpath=first</td>\n</tr>\n<tr>\n<td>Should Be Empty</td>\n<td>${children}</td>\n<td></td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Get%20Child%20Elements"
  },
  {
    "name": "Get Element",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "xpath",
        "type": null,
        "defaultValue": ".",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "xpath=."
      }
    ],
    "doc": "<p>Returns an element in the <code>source</code> matching the <code>xpath</code>.</p>\n<p>The <code>source</code> can be a path to an XML file, a string containing XML, or an already parsed XML element. The <code>xpath</code> specifies which element to find. See the <a href=\"#Introduction\" class=\"name\">introduction</a> for more details about both the possible sources and the supported xpath syntax.</p>\n<p>The keyword fails if more, or less, than one element matches the <code>xpath</code>. Use <a href=\"#Get%20Elements\" class=\"name\">Get Elements</a> if you want all matching elements to be returned.</p>\n<p>Examples using <code>${XML}</code> structure from <a href=\"#Example\" class=\"name\">Example</a>:</p>\n<table border=\"1\">\n<tr>\n<td>${element} =</td>\n<td>Get Element</td>\n<td>${XML}</td>\n<td>second</td>\n</tr>\n<tr>\n<td>${child} =</td>\n<td>Get Element</td>\n<td>${element}</td>\n<td>child</td>\n</tr>\n</table>\n<p><a href=\"#Parse%20Xml\" class=\"name\">Parse XML</a> is recommended for parsing XML when the whole structure is needed. It must be used if there is a need to configure how XML namespaces are handled.</p>\n<p>Many other keywords use this keyword internally, and keywords modifying XML are typically documented to both to modify the given source and to return it. Modifying the source does not apply if the source is given as a string. The XML structure parsed based on the string and then modified is nevertheless returned.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Get%20Element"
  },
  {
    "name": "Get Element Attribute",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "xpath",
        "type": null,
        "defaultValue": ".",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "xpath=."
      },
      {
        "name": "default",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "default=None"
      }
    ],
    "doc": "<p>Returns the named attribute of the specified element.</p>\n<p>The element whose attribute to return is specified using <code>source</code> and <code>xpath</code>. They have exactly the same semantics as with <a href=\"#Get%20Element\" class=\"name\">Get Element</a> keyword.</p>\n<p>The value of the attribute <code>name</code> of the specified element is returned. If the element does not have such element, the <code>default</code> value is returned instead.</p>\n<p>Examples using <code>${XML}</code> structure from <a href=\"#Example\" class=\"name\">Example</a>:</p>\n<table border=\"1\">\n<tr>\n<td>${attribute} =</td>\n<td>Get Element Attribute</td>\n<td>${XML}</td>\n<td>id</td>\n<td>xpath=first</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${attribute}</td>\n<td>1</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${attribute} =</td>\n<td>Get Element Attribute</td>\n<td>${XML}</td>\n<td>xx</td>\n<td>xpath=first</td>\n<td>default=value</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${attribute}</td>\n<td>value</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>See also <a href=\"#Get%20Element%20Attributes\" class=\"name\">Get Element Attributes</a>, <a href=\"#Element%20Attribute%20Should%20Be\" class=\"name\">Element Attribute Should Be</a>, <a href=\"#Element%20Attribute%20Should%20Match\" class=\"name\">Element Attribute Should Match</a> and <a href=\"#Element%20Should%20Not%20Have%20Attribute\" class=\"name\">Element Should Not Have Attribute</a>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Get%20Element%20Attribute"
  },
  {
    "name": "Get Element Attributes",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "xpath",
        "type": null,
        "defaultValue": ".",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "xpath=."
      }
    ],
    "doc": "<p>Returns all attributes of the specified element.</p>\n<p>The element whose attributes to return is specified using <code>source</code> and <code>xpath</code>. They have exactly the same semantics as with <a href=\"#Get%20Element\" class=\"name\">Get Element</a> keyword.</p>\n<p>Attributes are returned as a Python dictionary. It is a copy of the original attributes so modifying it has no effect on the XML structure.</p>\n<p>Examples using <code>${XML}</code> structure from <a href=\"#Example\" class=\"name\">Example</a>:</p>\n<table border=\"1\">\n<tr>\n<td>${attributes} =</td>\n<td>Get Element Attributes</td>\n<td>${XML}</td>\n<td>first</td>\n</tr>\n<tr>\n<td>Dictionary Should Contain Key</td>\n<td>${attributes}</td>\n<td>id</td>\n<td></td>\n</tr>\n<tr>\n<td>${attributes} =</td>\n<td>Get Element Attributes</td>\n<td>${XML}</td>\n<td>third</td>\n</tr>\n<tr>\n<td>Should Be Empty</td>\n<td>${attributes}</td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>Use <a href=\"#Get%20Element%20Attribute\" class=\"name\">Get Element Attribute</a> to get the value of a single attribute.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Get%20Element%20Attributes"
  },
  {
    "name": "Get Element Count",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "xpath",
        "type": null,
        "defaultValue": ".",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "xpath=."
      }
    ],
    "doc": "<p>Returns and logs how many elements the given <code>xpath</code> matches.</p>\n<p>Arguments <code>source</code> and <code>xpath</code> have exactly the same semantics as with <a href=\"#Get%20Elements\" class=\"name\">Get Elements</a> keyword that this keyword uses internally.</p>\n<p>See also <a href=\"#Element%20Should%20Exist\" class=\"name\">Element Should Exist</a> and <a href=\"#Element%20Should%20Not%20Exist\" class=\"name\">Element Should Not Exist</a>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Get%20Element%20Count"
  },
  {
    "name": "Get Element Text",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "xpath",
        "type": null,
        "defaultValue": ".",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "xpath=."
      },
      {
        "name": "normalize_whitespace",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "normalize_whitespace=False"
      }
    ],
    "doc": "<p>Returns all text of the element, possibly whitespace normalized.</p>\n<p>The element whose text to return is specified using <code>source</code> and <code>xpath</code>. They have exactly the same semantics as with <a href=\"#Get%20Element\" class=\"name\">Get Element</a> keyword.</p>\n<p>This keyword returns all the text of the specified element, including all the text its children and grandchildren contain. If the element has no text, an empty string is returned. The returned text is thus not always the same as the <a href=\"#text\" class=\"name\">text</a> attribute of the element.</p>\n<p>By default all whitespace, including newlines and indentation, inside the element is returned as-is. If <code>normalize_whitespace</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>), then leading and trailing whitespace is stripped, newlines and tabs converted to spaces, and multiple spaces collapsed into one. This is especially useful when dealing with HTML data.</p>\n<p>Examples using <code>${XML}</code> structure from <a href=\"#Example\" class=\"name\">Example</a>:</p>\n<table border=\"1\">\n<tr>\n<td>${text} =</td>\n<td>Get Element Text</td>\n<td>${XML}</td>\n<td>first</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${text}</td>\n<td>text</td>\n<td></td>\n</tr>\n<tr>\n<td>${text} =</td>\n<td>Get Element Text</td>\n<td>${XML}</td>\n<td>second/child</td>\n</tr>\n<tr>\n<td>Should Be Empty</td>\n<td>${text}</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${paragraph} =</td>\n<td>Get Element</td>\n<td>${XML}</td>\n<td>html/p</td>\n</tr>\n<tr>\n<td>${text} =</td>\n<td>Get Element Text</td>\n<td>${paragraph}</td>\n<td>normalize_whitespace=yes</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${text}</td>\n<td>Text with bold and italics.</td>\n<td></td>\n</tr>\n</table>\n<p>See also <a href=\"#Get%20Elements%20Texts\" class=\"name\">Get Elements Texts</a>, <a href=\"#Element%20Text%20Should%20Be\" class=\"name\">Element Text Should Be</a> and <a href=\"#Element%20Text%20Should%20Match\" class=\"name\">Element Text Should Match</a>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Get%20Element%20Text"
  },
  {
    "name": "Get Elements",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "xpath",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "xpath"
      }
    ],
    "doc": "<p>Returns a list of elements in the <code>source</code> matching the <code>xpath</code>.</p>\n<p>The <code>source</code> can be a path to an XML file, a string containing XML, or an already parsed XML element. The <code>xpath</code> specifies which element to find. See the <a href=\"#Introduction\" class=\"name\">introduction</a> for more details.</p>\n<p>Elements matching the <code>xpath</code> are returned as a list. If no elements match, an empty list is returned. Use <a href=\"#Get%20Element\" class=\"name\">Get Element</a> if you want to get exactly one match.</p>\n<p>Examples using <code>${XML}</code> structure from <a href=\"#Example\" class=\"name\">Example</a>:</p>\n<table border=\"1\">\n<tr>\n<td>${children} =</td>\n<td>Get Elements</td>\n<td>${XML}</td>\n<td>third/child</td>\n</tr>\n<tr>\n<td>Length Should Be</td>\n<td>${children}</td>\n<td>2</td>\n<td></td>\n</tr>\n<tr>\n<td>${children} =</td>\n<td>Get Elements</td>\n<td>${XML}</td>\n<td>first/child</td>\n</tr>\n<tr>\n<td>Should Be Empty</td>\n<td>${children}</td>\n<td></td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Get%20Elements"
  },
  {
    "name": "Get Elements Texts",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "xpath",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "xpath"
      },
      {
        "name": "normalize_whitespace",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "normalize_whitespace=False"
      }
    ],
    "doc": "<p>Returns text of all elements matching <code>xpath</code> as a list.</p>\n<p>The elements whose text to return is specified using <code>source</code> and <code>xpath</code>. They have exactly the same semantics as with <a href=\"#Get%20Elements\" class=\"name\">Get Elements</a> keyword.</p>\n<p>The text of the matched elements is returned using the same logic as with <a href=\"#Get%20Element%20Text\" class=\"name\">Get Element Text</a>. This includes optional whitespace normalization using the <code>normalize_whitespace</code> option.</p>\n<p>Examples using <code>${XML}</code> structure from <a href=\"#Example\" class=\"name\">Example</a>:</p>\n<table border=\"1\">\n<tr>\n<td>@{texts} =</td>\n<td>Get Elements Texts</td>\n<td>${XML}</td>\n<td>third/child</td>\n</tr>\n<tr>\n<td>Length Should Be</td>\n<td>${texts}</td>\n<td>2</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>@{texts}[0]</td>\n<td>more text</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>@{texts}[1]</td>\n<td>${EMPTY}</td>\n<td></td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Get%20Elements%20Texts"
  },
  {
    "name": "Log Element",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "level",
        "type": null,
        "defaultValue": "INFO",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "level=INFO"
      },
      {
        "name": "xpath",
        "type": null,
        "defaultValue": ".",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "xpath=."
      }
    ],
    "doc": "<p>Logs the string representation of the specified element.</p>\n<p>The element specified with <code>source</code> and <code>xpath</code> is first converted into a string using <a href=\"#Element%20To%20String\" class=\"name\">Element To String</a> keyword internally. The resulting string is then logged using the given <code>level</code>.</p>\n<p>The logged string is also returned.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Log%20Element"
  },
  {
    "name": "Parse Xml",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "keep_clark_notation",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "keep_clark_notation=False"
      },
      {
        "name": "strip_namespaces",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "strip_namespaces=False"
      }
    ],
    "doc": "<p>Parses the given XML file or string into an element structure.</p>\n<p>The <code>source</code> can either be a path to an XML file or a string containing XML. In both cases the XML is parsed into ElementTree <a href=\"http://docs.python.org/library/xml.etree.elementtree.html#element-objects\">element structure</a> and the root element is returned. Possible comments and processing instructions in the source XML are removed.</p>\n<p>As discussed in <a href=\"#Handling%20XML%20namespaces\" class=\"name\">Handling XML namespaces</a> section, this keyword, by default, removes namespace information ElementTree has added to tag names and moves it into <code>xmlns</code> attributes. This typically eases handling XML documents with namespaces considerably. If you do not want that to happen, or want to avoid the small overhead of going through the element structure when your XML does not have namespaces, you can disable this feature by giving <code>keep_clark_notation</code> argument a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>).</p>\n<p>If you want to strip namespace information altogether so that it is not included even if XML is saved, you can give a true value to <code>strip_namespaces</code> argument.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${root} =</td>\n<td>Parse XML</td>\n<td>&lt;root&gt;&lt;child/&gt;&lt;/root&gt;</td>\n<td></td>\n</tr>\n<tr>\n<td>${xml} =</td>\n<td>Parse XML</td>\n<td>${CURDIR}/test.xml</td>\n<td>keep_clark_notation=True</td>\n</tr>\n<tr>\n<td>${xml} =</td>\n<td>Parse XML</td>\n<td>${CURDIR}/test.xml</td>\n<td>strip_namespaces=True</td>\n</tr>\n</table>\n<p>Use <a href=\"#Get%20Element\" class=\"name\">Get Element</a> keyword if you want to get a certain element and not the whole structure. See <a href=\"#Parsing%20XML\" class=\"name\">Parsing XML</a> section for more details and examples.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Parse%20Xml"
  },
  {
    "name": "Remove Element",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "xpath",
        "type": null,
        "defaultValue": "",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "xpath="
      },
      {
        "name": "remove_tail",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "remove_tail=False"
      }
    ],
    "doc": "<p>Removes the element matching <code>xpath</code> from the <code>source</code> structure.</p>\n<p>The element to remove from the <code>source</code> is specified with <code>xpath</code> using the same semantics as with <a href=\"#Get%20Element\" class=\"name\">Get Element</a> keyword. The resulting XML structure is returned, and if the <code>source</code> is an already parsed XML structure, it is also modified in place.</p>\n<p>The keyword fails if <code>xpath</code> does not match exactly one element. Use <a href=\"#Remove%20Elements\" class=\"name\">Remove Elements</a> to remove all matched elements.</p>\n<p>Element's tail text is not removed by default, but that can be changed by giving <code>remove_tail</code> a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>). See <a href=\"#Element%20attributes\" class=\"name\">Element attributes</a> section for more information about <a href=\"#tail\" class=\"name\">tail</a> in general.</p>\n<p>Examples using <code>${XML}</code> structure from <a href=\"#Example\" class=\"name\">Example</a>:</p>\n<table border=\"1\">\n<tr>\n<td>Remove Element</td>\n<td>${XML}</td>\n<td>xpath=second</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Element Should Not Exist</td>\n<td>${XML}</td>\n<td>xpath=second</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Remove Element</td>\n<td>${XML}</td>\n<td>xpath=html/p/b</td>\n<td>remove_tail=yes</td>\n<td></td>\n</tr>\n<tr>\n<td>Element Text Should Be</td>\n<td>${XML}</td>\n<td>Text with italics.</td>\n<td>xpath=html/p</td>\n<td>normalize_whitespace=yes</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Remove%20Element"
  },
  {
    "name": "Remove Element Attribute",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "xpath",
        "type": null,
        "defaultValue": ".",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "xpath=."
      }
    ],
    "doc": "<p>Removes attribute <code>name</code> from the specified element.</p>\n<p>The element whose attribute to remove is specified using <code>source</code> and <code>xpath</code>. They have exactly the same semantics as with <a href=\"#Get%20Element\" class=\"name\">Get Element</a> keyword. The resulting XML structure is returned, and if the <code>source</code> is an already parsed XML structure, it is also modified in place.</p>\n<p>It is not a failure to remove a non-existing attribute. Use <a href=\"#Remove%20Element%20Attributes\" class=\"name\">Remove Element Attributes</a> to remove all attributes and <a href=\"#Set%20Element%20Attribute\" class=\"name\">Set Element Attribute</a> to set them.</p>\n<p>Examples using <code>${XML}</code> structure from <a href=\"#Example\" class=\"name\">Example</a>:</p>\n<table border=\"1\">\n<tr>\n<td>Remove Element Attribute</td>\n<td>${XML}</td>\n<td>id</td>\n<td>xpath=first</td>\n</tr>\n<tr>\n<td>Element Should Not Have Attribute</td>\n<td>${XML}</td>\n<td>id</td>\n<td>xpath=first</td>\n</tr>\n</table>\n<p>Can only remove an attribute from a single element. Use <a href=\"#Remove%20Elements%20Attribute\" class=\"name\">Remove Elements Attribute</a> to remove an attribute of multiple elements in one call.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Remove%20Element%20Attribute"
  },
  {
    "name": "Remove Element Attributes",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "xpath",
        "type": null,
        "defaultValue": ".",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "xpath=."
      }
    ],
    "doc": "<p>Removes all attributes from the specified element.</p>\n<p>The element whose attributes to remove is specified using <code>source</code> and <code>xpath</code>. They have exactly the same semantics as with <a href=\"#Get%20Element\" class=\"name\">Get Element</a> keyword. The resulting XML structure is returned, and if the <code>source</code> is an already parsed XML structure, it is also modified in place.</p>\n<p>Use <a href=\"#Remove%20Element%20Attribute\" class=\"name\">Remove Element Attribute</a> to remove a single attribute and <a href=\"#Set%20Element%20Attribute\" class=\"name\">Set Element Attribute</a> to set them.</p>\n<p>Examples using <code>${XML}</code> structure from <a href=\"#Example\" class=\"name\">Example</a>:</p>\n<table border=\"1\">\n<tr>\n<td>Remove Element Attributes</td>\n<td>${XML}</td>\n<td>xpath=first</td>\n<td></td>\n</tr>\n<tr>\n<td>Element Should Not Have Attribute</td>\n<td>${XML}</td>\n<td>id</td>\n<td>xpath=first</td>\n</tr>\n</table>\n<p>Can only remove attributes from a single element. Use <a href=\"#Remove%20Elements%20Attributes\" class=\"name\">Remove Elements Attributes</a> to remove all attributes of multiple elements in one call.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Remove%20Element%20Attributes"
  },
  {
    "name": "Remove Elements",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "xpath",
        "type": null,
        "defaultValue": "",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "xpath="
      },
      {
        "name": "remove_tail",
        "type": null,
        "defaultValue": "False",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "remove_tail=False"
      }
    ],
    "doc": "<p>Removes all elements matching <code>xpath</code> from the <code>source</code> structure.</p>\n<p>The elements to remove from the <code>source</code> are specified with <code>xpath</code> using the same semantics as with <a href=\"#Get%20Elements\" class=\"name\">Get Elements</a> keyword. The resulting XML structure is returned, and if the <code>source</code> is an already parsed XML structure, it is also modified in place.</p>\n<p>It is not a failure if <code>xpath</code> matches no elements. Use <a href=\"#Remove%20Element\" class=\"name\">Remove Element</a> to remove exactly one element.</p>\n<p>Element's tail text is not removed by default, but that can be changed by using <code>remove_tail</code> argument similarly as with <a href=\"#Remove%20Element\" class=\"name\">Remove Element</a>.</p>\n<p>Examples using <code>${XML}</code> structure from <a href=\"#Example\" class=\"name\">Example</a>:</p>\n<table border=\"1\">\n<tr>\n<td>Remove Elements</td>\n<td>${XML}</td>\n<td>xpath=*/child</td>\n</tr>\n<tr>\n<td>Element Should Not Exist</td>\n<td>${XML}</td>\n<td>xpath=second/child</td>\n</tr>\n<tr>\n<td>Element Should Not Exist</td>\n<td>${XML}</td>\n<td>xpath=third/child</td>\n</tr>\n</table>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Remove%20Elements"
  },
  {
    "name": "Remove Elements Attribute",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "xpath",
        "type": null,
        "defaultValue": ".",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "xpath=."
      }
    ],
    "doc": "<p>Removes attribute <code>name</code> from the specified elements.</p>\n<p>Like <a href=\"#Remove%20Element%20Attribute\" class=\"name\">Remove Element Attribute</a> but removes the attribute of all elements matching the given <code>xpath</code>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Remove%20Elements%20Attribute"
  },
  {
    "name": "Remove Elements Attributes",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "xpath",
        "type": null,
        "defaultValue": ".",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "xpath=."
      }
    ],
    "doc": "<p>Removes all attributes from the specified elements.</p>\n<p>Like <a href=\"#Remove%20Element%20Attributes\" class=\"name\">Remove Element Attributes</a> but removes all attributes of all elements matching the given <code>xpath</code>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Remove%20Elements%20Attributes"
  },
  {
    "name": "Save Xml",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "path",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "path"
      },
      {
        "name": "encoding",
        "type": null,
        "defaultValue": "UTF-8",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "encoding=UTF-8"
      }
    ],
    "doc": "<p>Saves the given element to the specified file.</p>\n<p>The element to save is specified with <code>source</code> using the same semantics as with <a href=\"#Get%20Element\" class=\"name\">Get Element</a> keyword.</p>\n<p>The file where the element is saved is denoted with <code>path</code> and the encoding to use with <code>encoding</code>. The resulting file always contains the XML declaration.</p>\n<p>The resulting XML file may not be exactly the same as the original:</p>\n<ul>\n<li>Comments and processing instructions are always stripped.</li>\n<li>Possible doctype and namespace prefixes are only preserved when <a href=\"#Using%20lxml\" class=\"name\">using lxml</a>.</li>\n<li>Other small differences are possible depending on the ElementTree or lxml version.</li>\n</ul>\n<p>Use <a href=\"#Element%20To%20String\" class=\"name\">Element To String</a> if you just need a string representation of the element.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Save%20Xml"
  },
  {
    "name": "Set Element Attribute",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "value",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "value"
      },
      {
        "name": "xpath",
        "type": null,
        "defaultValue": ".",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "xpath=."
      }
    ],
    "doc": "<p>Sets attribute <code>name</code> of the specified element to <code>value</code>.</p>\n<p>The element whose attribute to set is specified using <code>source</code> and <code>xpath</code>. They have exactly the same semantics as with <a href=\"#Get%20Element\" class=\"name\">Get Element</a> keyword. The resulting XML structure is returned, and if the <code>source</code> is an already parsed XML structure, it is also modified in place.</p>\n<p>It is possible to both set new attributes and to overwrite existing. Use <a href=\"#Remove%20Element%20Attribute\" class=\"name\">Remove Element Attribute</a> or <a href=\"#Remove%20Element%20Attributes\" class=\"name\">Remove Element Attributes</a> for removing them.</p>\n<p>Examples using <code>${XML}</code> structure from <a href=\"#Example\" class=\"name\">Example</a>:</p>\n<table border=\"1\">\n<tr>\n<td>Set Element Attribute</td>\n<td>${XML}</td>\n<td>attr</td>\n<td>value</td>\n<td></td>\n</tr>\n<tr>\n<td>Element Attribute Should Be</td>\n<td>${XML}</td>\n<td>attr</td>\n<td>value</td>\n<td></td>\n</tr>\n<tr>\n<td>Set Element Attribute</td>\n<td>${XML}</td>\n<td>id</td>\n<td>new</td>\n<td>xpath=first</td>\n</tr>\n<tr>\n<td>Element Attribute Should Be</td>\n<td>${XML}</td>\n<td>id</td>\n<td>new</td>\n<td>xpath=first</td>\n</tr>\n</table>\n<p>Can only set an attribute of a single element. Use <a href=\"#Set%20Elements%20Attribute\" class=\"name\">Set Elements Attribute</a> to set an attribute of multiple elements in one call.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Set%20Element%20Attribute"
  },
  {
    "name": "Set Element Tag",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "tag",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "tag"
      },
      {
        "name": "xpath",
        "type": null,
        "defaultValue": ".",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "xpath=."
      }
    ],
    "doc": "<p>Sets the tag of the specified element.</p>\n<p>The element whose tag to set is specified using <code>source</code> and <code>xpath</code>. They have exactly the same semantics as with <a href=\"#Get%20Element\" class=\"name\">Get Element</a> keyword. The resulting XML structure is returned, and if the <code>source</code> is an already parsed XML structure, it is also modified in place.</p>\n<p>Examples using <code>${XML}</code> structure from <a href=\"#Example\" class=\"name\">Example</a>:</p>\n<table border=\"1\">\n<tr>\n<td>Set Element Tag</td>\n<td>${XML}</td>\n<td>newTag</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${XML.tag}</td>\n<td>newTag</td>\n<td></td>\n</tr>\n<tr>\n<td>Set Element Tag</td>\n<td>${XML}</td>\n<td>xxx</td>\n<td>xpath=second/child</td>\n</tr>\n<tr>\n<td>Element Should Exist</td>\n<td>${XML}</td>\n<td>second/xxx</td>\n<td></td>\n</tr>\n<tr>\n<td>Element Should Not Exist</td>\n<td>${XML}</td>\n<td>second/child</td>\n<td></td>\n</tr>\n</table>\n<p>Can only set the tag of a single element. Use <a href=\"#Set%20Elements%20Tag\" class=\"name\">Set Elements Tag</a> to set the tag of multiple elements in one call.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Set%20Element%20Tag"
  },
  {
    "name": "Set Element Text",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "text",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "text=None"
      },
      {
        "name": "tail",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "tail=None"
      },
      {
        "name": "xpath",
        "type": null,
        "defaultValue": ".",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "xpath=."
      }
    ],
    "doc": "<p>Sets text and/or tail text of the specified element.</p>\n<p>The element whose text to set is specified using <code>source</code> and <code>xpath</code>. They have exactly the same semantics as with <a href=\"#Get%20Element\" class=\"name\">Get Element</a> keyword. The resulting XML structure is returned, and if the <code>source</code> is an already parsed XML structure, it is also modified in place.</p>\n<p>Element's text and tail text are changed only if new <code>text</code> and/or <code>tail</code> values are given. See <a href=\"#Element%20attributes\" class=\"name\">Element attributes</a> section for more information about <a href=\"#text\" class=\"name\">text</a> and <a href=\"#tail\" class=\"name\">tail</a> in general.</p>\n<p>Examples using <code>${XML}</code> structure from <a href=\"#Example\" class=\"name\">Example</a>:</p>\n<table border=\"1\">\n<tr>\n<td>Set Element Text</td>\n<td>${XML}</td>\n<td>new text</td>\n<td>xpath=first</td>\n<td></td>\n</tr>\n<tr>\n<td>Element Text Should Be</td>\n<td>${XML}</td>\n<td>new text</td>\n<td>xpath=first</td>\n<td></td>\n</tr>\n<tr>\n<td>Set Element Text</td>\n<td>${XML}</td>\n<td>tail=&amp;</td>\n<td>xpath=html/p/b</td>\n<td></td>\n</tr>\n<tr>\n<td>Element Text Should Be</td>\n<td>${XML}</td>\n<td>Text with bold&amp;italics.</td>\n<td>xpath=html/p</td>\n<td>normalize_whitespace=yes</td>\n</tr>\n<tr>\n<td>Set Element Text</td>\n<td>${XML}</td>\n<td>slanted</td>\n<td>!!</td>\n<td>xpath=html/p/i</td>\n</tr>\n<tr>\n<td>Element Text Should Be</td>\n<td>${XML}</td>\n<td>Text with bold&amp;slanted!!</td>\n<td>xpath=html/p</td>\n<td>normalize_whitespace=yes</td>\n</tr>\n</table>\n<p>Can only set the text/tail of a single element. Use <a href=\"#Set%20Elements%20Text\" class=\"name\">Set Elements Text</a> to set the text/tail of multiple elements in one call.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Set%20Element%20Text"
  },
  {
    "name": "Set Elements Attribute",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "name",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "name"
      },
      {
        "name": "value",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "value"
      },
      {
        "name": "xpath",
        "type": null,
        "defaultValue": ".",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "xpath=."
      }
    ],
    "doc": "<p>Sets attribute <code>name</code> of the specified elements to <code>value</code>.</p>\n<p>Like <a href=\"#Set%20Element%20Attribute\" class=\"name\">Set Element Attribute</a> but sets the attribute of all elements matching the given <code>xpath</code>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Set%20Elements%20Attribute"
  },
  {
    "name": "Set Elements Tag",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "tag",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "tag"
      },
      {
        "name": "xpath",
        "type": null,
        "defaultValue": ".",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "xpath=."
      }
    ],
    "doc": "<p>Sets the tag of the specified elements.</p>\n<p>Like <a href=\"#Set%20Element%20Tag\" class=\"name\">Set Element Tag</a> but sets the tag of all elements matching the given <code>xpath</code>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Set%20Elements%20Tag"
  },
  {
    "name": "Set Elements Text",
    "library": "XML",
    "args": [
      {
        "name": "source",
        "type": null,
        "defaultValue": null,
        "kind": "POSITIONAL_OR_NAMED",
        "required": true,
        "repr": "source"
      },
      {
        "name": "text",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "text=None"
      },
      {
        "name": "tail",
        "type": null,
        "defaultValue": "None",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "tail=None"
      },
      {
        "name": "xpath",
        "type": null,
        "defaultValue": ".",
        "kind": "POSITIONAL_OR_NAMED",
        "required": false,
        "repr": "xpath=."
      }
    ],
    "doc": "<p>Sets text and/or tail text of the specified elements.</p>\n<p>Like <a href=\"#Set%20Element%20Text\" class=\"name\">Set Element Text</a> but sets the text or tail of all elements matching the given <code>xpath</code>.</p>",
    "url": "https://robotframework.org/robotframework/latest/libraries/XML.html#Set%20Elements%20Text"
  }
]