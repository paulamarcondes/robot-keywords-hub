{
  "specversion": 3,
  "name": "DatabaseLibrary",
  "doc": "<p>The Database Library for <a href=\"https://robotframework.org\">Robot Framework</a> allows you to query a database and verify the results. It requires an appropriate <b>Python module to be installed separately</b> - depending on your database, like e.g. <span class=\"name\">oracledb</span> or <span class=\"name\">pymysql</span>.</p>\n<h3 id=\"Table of contents\">Table of contents</h3>\n<ul>\n<li><a href=\"#Requirements\" class=\"name\">Requirements</a></li>\n<li><a href=\"#Installation\" class=\"name\">Installation</a></li>\n<li><a href=\"#Basic%20usage%20examples\" class=\"name\">Basic usage examples</a></li>\n<li><a href=\"#Handling%20multiple%20database%20connections\" class=\"name\">Handling multiple database connections</a></li>\n<li><a href=\"#Connection%20examples%20for%20different%20DB%20modules\" class=\"name\">Connection examples for different DB modules</a></li>\n<li><a href=\"#Using%20configuration%20file\" class=\"name\">Using configuration file</a></li>\n<li><a href=\"#Inline%20assertions\" class=\"name\">Inline assertions</a></li>\n<li><a href=\"#Retry%20mechanism\" class=\"name\">Retry mechanism</a></li>\n<li><a href=\"#Logging%20query%20results\" class=\"name\">Logging query results</a></li>\n<li><a href=\"#Commit%20behavior\" class=\"name\">Commit behavior</a></li>\n<li><a href=\"#Omitting%20trailing%20semicolon%20behavior\" class=\"name\">Omitting trailing semicolon behavior</a></li>\n<li><a href=\"#Database%20modules%20compatibility\" class=\"name\">Database modules compatibility</a></li>\n<li><a href=\"#Importing\" class=\"name\">Importing</a></li>\n<li><a href=\"#Keywords\" class=\"name\">Keywords</a></li>\n</ul>\n<h2 id=\"Requirements\">Requirements</h2>\n<ul>\n<li>Python</li>\n<li>Robot Framework</li>\n<li>Python database module you're going to use - e.g. <span class=\"name\">oracledb</span></li>\n</ul>\n<h2 id=\"Installation\">Installation</h2>\n<pre>\npip install robotframework-databaselibrary\n</pre>\n<p>Don't forget to install the required Python database module!</p>\n<h2 id=\"Basic usage examples\">Basic usage examples</h2>\n<pre>\n<b>*</b> Settings <b>*</b>\nLibrary       DatabaseLibrary\nTest Setup    Connect To My Oracle DB\n\n<b>*</b> Keywords <b>*</b>\nConnect To My Oracle DB\n    Connect To Database\n    ...    oracledb\n    ...    db_name=db\n    ...    db_user=my_user\n    ...    db_password=my_pass\n    ...    db_host=127.0.0.1\n    ...    db_port=1521\n\n<b>*</b> Test Cases <b>*</b>\nGet All Names\n    ${Rows}=    Query    select FIRST_NAME, LAST_NAME from person\n    Should Be Equal    ${Rows}[0][0]    Franz Allan\n    Should Be Equal    ${Rows}[0][1]    See\n    Should Be Equal    ${Rows}[1][0]    Jerry\n    Should Be Equal    ${Rows}[1][1]    Schneider\n\nPerson Table Contains Expected Records\n    ${sql}=    Catenate    select LAST_NAME from person\n    Check Query Result    ${sql}    contains    See\n    Check Query Result    ${sql}    equals      Schneider    row=1\n\nWait Until Table Gets New Record\n    ${sql}=    Catenate    select LAST_NAME from person\n    Check Row Count    ${sql}    &gt;    2    retry_timeout=5s\n\nPerson Table Contains No Joe\n    ${sql}=    Catenate    SELECT id FROM person\n    ...                    WHERE FIRST_NAME= 'Joe'\n    Check Row Count    ${sql}   ==    0\n\n</pre>\n<h2 id=\"Handling multiple database connections\">Handling multiple database connections</h2>\n<p>The library can handle multiple connections to different databases using <b>aliases</b>. An alias is set while creating a connection and can be passed to library keywords in a corresponding argument.</p>\n<h3 id=\"Example\">Example</h3>\n<pre>\n<b>*</b> Settings <b>*</b>\nLibrary          DatabaseLibrary\nTest Setup       Connect To All Databases\nTest Teardown    Disconnect From All Databases\n\n<b>*</b> Keywords <b>*</b>\nConnect To All Databases\n    Connect To Database\n    ...    psycopg2\n    ...    db_name=db\n    ...    db_user=db_user\n    ...    db_password=pass\n    ...    db_host=127.0.0.1\n    ...    db_port=5432\n    ...    alias=postgres\n    Connect To Database\n    ...    pymysql\n    ...    db_name=db\n    ...    db_user=db_user\n    ...    db_password=pass\n    ...    db_host=127.0.0.1\n    ...    db_port=3306\n    ...    alias=mysql\n\n<b>*</b> Test Cases <b>*</b>\nUsing Aliases\n    ${names}=    Query    select LAST_NAME from person    alias=postgres\n    Execute Sql String    drop table XYZ                  alias=mysql\n\nSwitching Default Alias\n    Switch Database    postgres\n    ${names}=    Query    select LAST_NAME from person\n    Switch Database    mysql\n    Execute Sql String    drop table XYZ\n\n</pre>\n<h2 id=\"Connection examples for different DB modules\">Connection examples for different DB modules</h2>\n<h3 id=\"Oracle (oracle_db)\">Oracle (oracle_db)</h3>\n<pre>\n# Thin mode is used by default\nConnect To Database\n...    oracledb\n...    db_name=db\n...    db_user=db_user\n...    db_password=pass\n...    db_host=127.0.0.1\n...    db_port=1521\n\n# Thick mode with default location of the Oracle Instant Client\nConnect To Database\n...    oracledb\n...    db_name=db\n...    db_user=db_user\n...    db_password=pass\n...    db_host=127.0.0.1\n...    db_port=1521\n...    oracle_driver_mode=thick\n\n# Thick mode with custom location of the Oracle Instant Client\nConnect To Database\n...    oracledb\n...    db_name=db\n...    db_user=db_user\n...    db_password=pass\n...    db_host=127.0.0.1\n...    db_port=1521\n...    oracle_driver_mode=thick,lib_dir=C:/instant_client_23_5\n</pre>\n<h3 id=\"PostgreSQL (psycopg2)\">PostgreSQL (psycopg2)</h3>\n<pre>\nConnect To Database\n...    psycopg2\n...    db_name=db\n...    db_user=db_user\n...    db_password=pass\n...    db_host=127.0.0.1\n...    db_port=5432\n</pre>\n<h3 id=\"Microsoft SQL Server (pymssql)\">Microsoft SQL Server (pymssql)</h3>\n<pre>\n# UTF-8 charset is used by default\nConnect To Database\n...    pymssql\n...    db_name=db\n...    db_user=db_user\n...    db_password=pass\n...    db_host=127.0.0.1\n...    db_port=1433\n\n# Specifying a custom charset\nConnect To Database\n...    pymssql\n...    db_name=db\n...    db_user=db_user\n...    db_password=pass\n...    db_host=127.0.0.1\n...    db_port=1433\n...    db_charset=cp1252\n</pre>\n<h3 id=\"MySQL (pymysql)\">MySQL (pymysql)</h3>\n<pre>\n# UTF-8 charset is used by default\nConnect To Database\n...    pymysql\n...    db_name=db\n...    db_user=db_user\n...    db_password=pass\n...    db_host=127.0.0.1\n...    db_port=3306\n\n# Specifying a custom charset\nConnect To Database\n...    pymysql\n...    db_name=db\n...    db_user=db_user\n...    db_password=pass\n...    db_host=127.0.0.1\n...    db_port=3306\n...    db_charset=cp1252\n</pre>\n<h3 id=\"IBM DB2 (ibm_db)\">IBM DB2 (ibm_db)</h3>\n<pre>\nConnect To Database\n...    ibm_db_dbi\n...    db_name=db\n...    db_user=db_user\n...    db_password=pass\n...    db_host=127.0.0.1\n...    db_port=50000\n</pre>\n<h3 id=\"MySQL via ODBC (pyodbc)\">MySQL via ODBC (pyodbc)</h3>\n<pre>\n# ODBC driver name is required\n# ODBC driver itself has to be installed\nConnect To Database\n...    pyodbc\n...    db_name=db\n...    db_user=db_user\n...    db_password=pass\n...    db_host=127.0.0.1\n...    db_port=3306\n...    odbc_driver={MySQL ODBC 9.2 ANSI Driver}\n\n# Specifying a custom charset if needed\nConnect To Database\n...    pyodbc\n...    db_name=db\n...    db_user=db_user\n...    db_password=pass\n...    db_host=127.0.0.1\n...    db_port=3306\n...    odbc_driver={MySQL ODBC 9.2 ANSI Driver}\n...    db_charset=latin1\n</pre>\n<h3 id=\"Oracle via JDBC (jaydebeapi)\">Oracle via JDBC (jaydebeapi)</h3>\n<pre>\n# Username and password must be set as a dictionary\nVAR  &amp;{CREDENTIALS}  user=db_user  password=pass\n\n# JAR file with Oracle JDBC driver is required\n# Jaydebeapi is not \"natively\" supported by the Database Library,\n# so using the custom parameters\nConnect To Database\n...    jaydebeapi\n...    jclassname=oracle.jdbc.driver.OracleDriver\n...    url=jdbc:oracle:thin:@127.0.0.1:1521/db\n...    driver_args=${CREDENTIALS}\n...    jars=C:/ojdbc17.jar\n\n# Set if getting error 'Could not commit/rollback with auto-commit enabled'\nSet Auto Commit    False\n\n# Set for automatically removing trailing ';' (might be helpful for Oracle)\nSet Omit Trailing Semicolon    True\n</pre>\n<h3 id=\"SQLite (sqlite3)\">SQLite (sqlite3)</h3>\n<pre>\n# Using custom parameters required\nConnect To Database\n...    sqlite3\n...    database=./my_database.db\n...    isolation_level=${None}\n</pre>\n<h3 id=\"Teradata (teradata)\">Teradata (teradata)</h3>\n<pre>\nConnect To Database\n...    teradata\n...    db_name=db\n...    db_user=db_user\n...    db_password=pass\n...    db_host=127.0.0.1\n...    db_port=1025\n</pre>\n<h2 id=\"Using configuration file\">Using configuration file</h2>\n<p>The <a href=\"#Connect%20To%20Database\" class=\"name\">Connect To Database</a> keyword allows providing the connection parameters in two ways:</p>\n<ul>\n<li>As keyword arguments</li>\n<li>In a configuration file - a simple list of <i>key=value</i> pairs, set inside an <i>alias</i> section.</li>\n</ul>\n<p>You can use only one way or you can combine them:</p>\n<ul>\n<li>The keyword arguments are taken by default</li>\n<li>If no keyword argument is provided, a parameter value is searched in the config file</li>\n</ul>\n<p>Along with commonly used connection parameters, named exactly as keyword arguments, a config file can contain any other DB module specific parameters as key/value pairs. If same custom parameter is provided both as a keyword argument <b>and</b> in config file, the <b>keyword argument value takes precedence</b>.</p>\n<p>The path to the config file is set by default to <span class=\"name\">./resources/db.cfg</span>. You can change it using an according parameter in the <a href=\"#Connect%20To%20Database\" class=\"name\">Connect To Database</a> keyword.</p>\n<p>A config file <b>must</b> contain at least one section name - the connection alias, if used (see <a href=\"#Handling%20multiple%20database%20connections\" class=\"name\">Handling multiple database connections</a>), or <span class=\"name\">[default]</span> if no aliases are used.</p>\n<h3 id=\"Config file examples\">Config file examples</h3>\n<h4 id=\"Config file with default alias (equal to using no aliases at all)\">Config file with default alias (equal to using no aliases at all)</h4>\n<pre>\n[default]\ndb_module=psycopg2\ndb_name=yourdbname\ndb_user=yourusername\ndb_password=yourpassword\ndb_host=yourhost\ndb_port=yourport\n</pre>\n<h4 id=\"Config file with a specific alias\">Config file with a specific alias</h4>\n<pre>\n[myoracle]\ndb_module=oracledb\ndb_name=yourdbname\ndb_user=yourusername\ndb_password=yourpassword\ndb_host=yourhost\ndb_port=yourport\n</pre>\n<h4 id=\"Config file with some params only\">Config file with some params only</h4>\n<pre>\n[default]\ndb_password=mysecret\n</pre>\n<h4 id=\"Config file with some custom DB module specific params\">Config file with some custom DB module specific params</h4>\n<pre>\n[default]\nmy_custom_param=value\n</pre>\n<h2 id=\"Inline assertions\">Inline assertions</h2>\n<p>Keywords, that accept arguments <code>assertion_operator</code> &lt;<a href=\"#type-AssertionOperator\" class=\"name\">AssertionOperator</a>&gt; and <code>expected_value</code>, perform a check according to the specified condition - using the <a href=\"https://github.com/MarketSquare/AssertionEngine\">Assertion Engine</a>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Check Row Count</td>\n<td>SELECT id FROM person</td>\n<td><b>==</b></td>\n<td>2</td>\n</tr>\n<tr>\n<td>Check Query Result</td>\n<td>SELECT first_name FROM person</td>\n<td><b>contains</b></td>\n<td>Allan</td>\n</tr>\n</table>\n<h2 id=\"Retry mechanism\">Retry mechanism</h2>\n<p>Assertion keywords, that accept arguments <code>retry_timeout</code> and <code>retry_pause</code>, support waiting for assertion to pass.</p>\n<p>Setting the <code>retry_timeout</code> argument enables the mechanism - in this case the SQL request and the assertion are executed in a loop, until the assertion is passed or the <code>retry_timeout</code> is reached. The pause between the loop iterations is set using the <code>retry_pause</code> argument.</p>\n<p>The argument values are set in <a href=\"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#time-format\">Robot Framework time format</a> - e.g. <code>5 seconds</code>.</p>\n<p>The retry mechanism is disabled by default - <code>retry_timeout</code> is set to <code>0</code>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Check Row Count</td>\n<td>SELECT id FROM person</td>\n<td><b>==</b></td>\n<td>2</td>\n<td>retry_timeout=10 seconds</td>\n<td></td>\n</tr>\n<tr>\n<td>Check Query Result</td>\n<td>SELECT first_name FROM person</td>\n<td><b>contains</b></td>\n<td>Allan</td>\n<td>retry_timeout=5s</td>\n<td>retry_pause=1s</td>\n</tr>\n</table>\n<h2 id=\"Logging query results\">Logging query results</h2>\n<p>Keywords, that fetch results of a SQL query, print the result rows as a table in RF log.</p>\n<ul>\n<li>A log head limit of <b>50 rows</b> is applied, other table rows are truncated in the log message.</li>\n<li>The limit and the logging in general can be adjusted any time in your tests using the Keyword <a href=\"#Set%20Logging%20Query%20Results\" class=\"name\">Set Logging Query Results</a>.</li>\n</ul>\n<p>You can also setup the limit or disable the logging during the library import. Examples:</p>\n<pre>\n<b>*</b> Settings <b>*</b>\n# Default behavior - logging of query results is enabled, log head is 50 rows.\nLibrary    DatabaseLibrary\n\n# Logging of query results is disabled, log head is 50 rows (default).\nLibrary    DatabaseLibrary    log_query_results=False\n\n# Logging of query results is enabled (default), log head is 10 rows.\nLibrary    DatabaseLibrary    log_query_results_head=10\n\n# Logging of query results is enabled (default), log head limit is disabled (log all rows).\nLibrary    DatabaseLibrary    log_query_results_head=0\n</pre>\n<h2 id=\"Commit behavior\">Commit behavior</h2>\n<p>While creating a database connection, the library doesn't explicitly set the <i>autocommit</i> behavior - so the default value of the Python DB module is used. According to Python DB API specification it should be disabled by default - which means each SQL transaction (even a simple <i>SELECT</i>) must contain a dedicated commit statement, if necessary.</p>\n<p>The library manages it for you - keywords like <a href=\"#Query\" class=\"name\">Query</a> or <a href=\"#Execute%20Sql%20String\" class=\"name\">Execute SQL String</a> perform automatically a commit after running the query (or a rollback in case of error).</p>\n<p>You can turn off this automatic commit/rollback behavior using the <code>no_transaction</code> parameter. See docs of a particular keyword.</p>\n<p>It's also possible to explicitly set the <i>autocommit</i> behavior on the Python DB module level - using the <a href=\"#Set%20Auto%20Commit\" class=\"name\">Set Auto Commit</a> keyword. This has no impact on the automatic commit/rollback behavior in library keywords (described above).</p>\n<h2 id=\"Omitting trailing semicolon behavior\">Omitting trailing semicolon behavior</h2>\n<p>Some databases (e.g. Oracle) throw an exception, if you leave a semicolon (;) at the SQL string end. However, there are exceptional cases, when you need it even for Oracle - e.g. at the end of a PL/SQL block.</p>\n<p>The library can handle it for you and remove the semicolon at the end of the SQL string. By default, it's decided based on the current database module in use:</p>\n<ul>\n<li>For <span class=\"name\">oracle_db</span> and <span class=\"name\">cx_Oracle</span>, the trailing semicolon is removed</li>\n<li>For other modules, the trailing semicolon is left as it is</li>\n</ul>\n<p>You can also set this behavior explicitly:</p>\n<ul>\n<li>Using the <a href=\"#Set%20Omit%20Trailing%20Semicolon\" class=\"name\">Set Omit Trailing Semicolon</a> keyword</li>\n<li>Using the <span class=\"name\">omit_trailing_semicolon</span> parameter in the <a href=\"#Execute%20Sql%20String\" class=\"name\">Execute SQL String</a> keyword.</li>\n</ul>\n<h2 id=\"Database modules compatibility\">Database modules compatibility</h2>\n<p>The library is basically compatible with any <a href=\"https://peps.python.org/pep-0249\">Python Database API Specification 2.0</a> module.</p>\n<p>However, the actual implementation in existing Python modules is sometimes quite different, which requires custom handling in the library. Therefore, there are some modules, which are \"natively\" supported in the library - and others, which may work and may not.</p>\n<h3 id=\"Python modules currently \"natively\" supported\">Python modules currently \"natively\" supported</h3>\n<h4 id=\"Oracle\">Oracle</h4>\n<p><a href=\"https://oracle.github.io/python-oracledb/\">oracledb</a></p>\n<ul>\n<li>Both thick and thin client modes are supported - you can select one using the <span class=\"name\">oracle_driver_mode</span> parameter.</li>\n<li>However, due to current limitations of the oracledb module, <b>it's not possible to switch between thick and thin modes during a test execution session</b> - even in different suites.</li>\n</ul>\n<p><a href=\"https://oracle.github.io/python-cx_Oracle/\">cx_Oracle</a></p>\n<h4 id=\"MySQL\">MySQL</h4>\n<ul>\n<li><a href=\"https://github.com/PyMySQL/PyMySQL\">pymysql</a></li>\n<li><a href=\"https://mysqlclient.readthedocs.io/index.html\">MySQLdb</a></li>\n</ul>\n<h4 id=\"PostgreSQL\">PostgreSQL</h4>\n<ul>\n<li><a href=\"https://www.psycopg.org/docs/\">psycopg2</a></li>\n</ul>\n<h4 id=\"MS SQL Server\">MS SQL Server</h4>\n<ul>\n<li><a href=\"https://github.com/pymssql/pymssql\">pymssql</a></li>\n</ul>\n<h4 id=\"SQLite\">SQLite</h4>\n<ul>\n<li><a href=\"https://docs.python.org/3/library/sqlite3.html\">sqlite3</a></li>\n</ul>\n<h4 id=\"Teradata\">Teradata</h4>\n<ul>\n<li><a href=\"https://github.com/teradata/PyTd\">teradata</a></li>\n</ul>\n<h4 id=\"IBM DB2\">IBM DB2</h4>\n<ul>\n<li>The Python package to be installed is <a href=\"https://github.com/ibmdb/python-ibmdb\">ibm_db</a>. It includes two modules - <span class=\"name\">ibm_db</span> and <span class=\"name\">ibm_db_dbi</span>.</li>\n<li>Using <b><span class=\"name\">ibm_db_dbi</span> is highly recommended</b> as only this module is Python DB API 2.0 compatible. See <a href=\"https://www.ibm.com/docs/en/db2/12.1?topic=applications-python-sqlalchemy-django-framework\">official docs</a>.</li>\n</ul>\n<h4 id=\"ODBC\">ODBC</h4>\n<ul>\n<li><a href=\"https://github.com/mkleehammer/pyodbc\">pyodbc</a></li>\n<li><a href=\"https://github.com/pypyodbc/pypyodbc\">pypyodbc</a></li>\n</ul>\n<h4 id=\"Kingbase\">Kingbase</h4>\n<ul>\n<li>ksycopg2</li>\n</ul>",
  "version": "2.2.0",
  "generated": "2025-10-18T15:23:11+00:00",
  "type": "LIBRARY",
  "scope": "GLOBAL",
  "docFormat": "HTML",
  "source": "C:\\Python313\\Lib\\site-packages\\DatabaseLibrary\\__init__.py",
  "lineno": 25,
  "tags": [],
  "inits": [
    {
      "name": "__init__",
      "args": [
        {
          "name": "log_query_results",
          "type": null,
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "log_query_results=True"
        },
        {
          "name": "log_query_results_head",
          "type": null,
          "defaultValue": "50",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "log_query_results_head=50"
        },
        {
          "name": "warn_on_connection_overwrite",
          "type": null,
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "warn_on_connection_overwrite=True"
        }
      ],
      "returnType": null,
      "doc": "<p>The library can be imported without any arguments:</p>\n<pre>\n<b>*</b> Settings <b>*</b>\nLibrary    DatabaseLibrary\n</pre>\n<p>Use optional library import parameters:</p>\n<ul>\n<li><code>log_query_results</code> and <code>log_query_results_head</code> to disable <a href=\"#Logging%20query%20results\" class=\"name\">Logging query results</a> or setup the log head</li>\n<li><code>warn_on_connection_overwrite</code> to disable the warning about overwriting an existing connection</li>\n</ul>",
      "shortdoc": "The library can be imported without any arguments: | *** Settings *** | Library    DatabaseLibrary",
      "tags": [],
      "source": "C:\\Python313\\Lib\\site-packages\\DatabaseLibrary\\__init__.py",
      "lineno": 422
    }
  ],
  "keywords": [
    {
      "name": "Call Stored Procedure",
      "args": [
        {
          "name": "procedure_name",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "procedure_name: str"
        },
        {
          "name": "procedure_params",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "List",
                "typedoc": "list",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "procedure_params: List | None = None"
        },
        {
          "name": "no_transaction",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "no_transaction: bool = False"
        },
        {
          "name": "alias",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "alias: str | None = None"
        },
        {
          "name": "additional_output_params",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "List",
                "typedoc": "list",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "additional_output_params: List | None = None"
        },
        {
          "name": "",
          "type": null,
          "defaultValue": null,
          "kind": "NAMED_ONLY_MARKER",
          "required": false,
          "repr": "*"
        },
        {
          "name": "spName",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "spName: str | None = None"
        },
        {
          "name": "spParams",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "List",
                "typedoc": "list",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "spParams: List | None = None"
        },
        {
          "name": "sansTran",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "bool",
                "typedoc": "boolean",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "sansTran: bool | None = None"
        }
      ],
      "returnType": null,
      "doc": "<p>Calls a stored procedure <span class=\"name\">procedure_name</span> with the <span class=\"name\">procedure_params</span> - a <b>list</b> of parameters the procedure requires. <b>Returns two lists</b> - the <i>parameter values</i> and the <i>result sets</i>.</p>\n<p>Use the special <b>CURSOR</b> value for OUT params, which should receive result sets - relevant only for some databases (e.g. Oracle or PostgreSQL).</p>\n<p>Set <code>no_transaction</code> to <i>True</i> to run command without explicit transaction commit or rollback in case of error. See <a href=\"#Commit%20behavior\" class=\"name\">Commit behavior</a> for details.</p>\n<p>Use <code>alias</code> to specify what connection should be used if <a href=\"#Handling%20multiple%20database%20connections\" class=\"name\">Handling multiple database connections</a>.</p>\n<p>Use the <code>additional_output_params</code> list for OUT params of a procedure in MSSQL.</p>\n<h4>Some parameters were renamed in version 2.0</h4>\n<p>The old parameters <code>spName</code>, <code>spParams</code> and <code>sansTran</code> are <b>deprecated</b>, please use new parameters <code>procedure_name</code>, <code>procedure_params</code> and <code>no_transaction</code> instead.</p>\n<p><b>The old parameters will be removed in future versions.</b></p>\n<h2>Handling parameters and result sets</h2>\n<p>Handling the input and output parameters and the result sets is very different depending on the database itself and on the Python database driver - i.e. how it implements the <span class=\"name\">cursor.callproc()</span> function.</p>\n<h3>Common case (e.g. MySQL)</h3>\n<p>Generally a procedure call requires all parameter values (IN and OUT) put together in a list - <span class=\"name\">procedure_params</span>.</p>\n<p>Calling the procedure returns <b>two lists</b>:</p>\n<ul>\n<li><b>Param values</b> - the copy of procedure parameters (modified, if the procedure changes the OUT params). The list is empty, if procedures receives no params.</li>\n<li><b>Result sets</b> - the list of lists, each of them containing results of some query, if the procedure returns them.</li>\n</ul>\n<h3>Oracle (oracledb, cx_Oracle)</h3>\n<p>Oracle procedures work fine with simple IN and OUT params, but require some special handling of result sets.</p>\n<h4>Simple case with IN and OUT params (no result sets)</h4>\n<p>Consider the following procedure:</p>\n<pre>\nCREATE OR REPLACE PROCEDURE\nget_second_name (person_first_name IN VARCHAR, person_second_name OUT VARCHAR) AS\nBEGIN\n  SELECT last_name\n  INTO person_second_name\n  FROM person\n  WHERE first_name = person_first_name;\nEND;\n</pre>\n<p>Calling the procedure in Robot Framework:</p>\n<pre>\n@{params}=         Create List    Jerry    OUTPUT\n# Second parameter value can be anything, it will be replaced anyway\n\n${param values}    ${result sets}=    Call Stored Procedure    get_second_name    ${params}\n# ${param values} = ['Jerry', 'Schneider']\n# ${result sets} = []\n</pre>\n<h4>Oracle procedure returning a result set</h4>\n<p>If a procedure in Oracle should return a result set, it must take OUT parameters of a special type - <i>SYS_REFCURSOR</i>.</p>\n<p>Consider the following procedure:</p>\n<pre>\nget_all_second_names (second_names_cursor OUT SYS_REFCURSOR) AS\nBEGIN\n  OPEN second_names_cursor for\n  SELECT LAST_NAME FROM person;\nEND;\n</pre>\n<p>Calling the procedure in Robot Framework requires the special value <b>CURSOR</b> for the OUT parameters, they will be converted to appropriate DB variables before calling the procedure.</p>\n<pre>\n@{params}=    Create List    CURSOR\n# The parameter must have this special value CURSOR\n\n${param values}    ${result sets}=    Call Stored Procedure    get_all_second_names    ${params}\n# ${param values} = [&lt;oracledb.Cursor on &lt;oracledb.Connection ...&gt;&gt;]\n# ${result sets} = [[('Franz Allan',), ('Jerry',)], [('See',), ('Schneider',)]]\n</pre>\n<h4>Oracle procedure returning multiple result sets</h4>\n<p>If a procedure takes multiple OUT parameters of the <i>SYS_REFCURSOR</i> type, they all must have the special <b>CURSOR</b> value when calling the procedure:</p>\n<pre>\n@{params} =        Create List         CURSOR    CURSOR\n${param values}    ${result sets} =    Call Stored Procedure    Get_all_first_and_second_names    ${params}\n# ${param values} = [&lt;oracledb.Cursor on &lt;oracledb.Connection ...&gt;&gt;, &lt;oracledb.Cursor on &lt;oracledb.Connection ...&gt;&gt;]\n# ${result sets}  = [[('Franz Allan',), ('Jerry',)], [('See',), ('Schneider',)]]\n</pre>\n<h3>PostgreSQL (psycopg2, psycopg3)</h3>\n<p>PostgreSQL doesn't return single values as params, only as result sets. It also supports special handling of result sets over OUT params of a special type (like Oracle).</p>\n<h4>Simple case with IN and OUT params (no CURSOR parameters)</h4>\n<p>Consider the following procedure:</p>\n<pre>\nCREATE FUNCTION\nget_second_name (IN person_first_name VARCHAR(20),\nOUT person_second_name VARCHAR(20))\nLANGUAGE plpgsql\nAS\n'\nBEGIN\n  SELECT LAST_NAME INTO person_second_name\n  FROM person\n  WHERE FIRST_NAME = person_first_name;\nEND\n';\n</pre>\n<p>Calling the procedure in Robot Framework:</p>\n<pre>\n@{params}=    Create List    Jerry\n${param values}    ${result sets}=    Call Stored Procedure    get_second_name    ${params}\n# ${param values} = ['Jerry']\n# ${result sets} = [[('Schneider',)]]\n</pre>\n<h4>PostgreSQL procedure with CURSOR parameters</h4>\n<p>If a procedure in PostgreSQL should return a proper result set, it must take OUT parameters of a special type - <i>refcursor</i>.</p>\n<p>Consider the following procedure:</p>\n<pre>\nCREATE FUNCTION\nget_all_first_and_second_names(result1 refcursor, result2 refcursor)\nRETURNS SETOF refcursor\nLANGUAGE plpgsql\nAS\n'\nBEGIN\n  OPEN result1 FOR SELECT FIRST_NAME FROM person;\n  RETURN NEXT result1;\n  OPEN result2 FOR SELECT LAST_NAME FROM person;\n  RETURN NEXT result2;\nEND\n';\n</pre>\n<p>Calling the procedure in Robot Framework requires the special value <b>CURSOR</b> for the OUT parameters, they will be converted to appropriate DB variables before calling the procedure.</p>\n<pre>\n@{params}=    Create List    CURSOR    CURSOR\n# The parameters must have this special value CURSOR\n\n${param values}    ${result sets}=    Call Stored Procedure    get_all_first_and_second_names    ${params}\n# ${param values} = ['CURSOR_0', 'CURSOR_1']\n# ${result sets} = [[('Franz Allan',), ('Jerry',)], [('See',), ('Schneider',)]\n</pre>\n<h3>MS SQL Server (pymssql)</h3>\n<p>The <i>pymssql</i> driver doesn't natively support getting the OUT parameter values after calling a procedure.</p>\n<ul>\n<li>This requires special handling of OUT parameters using the <span class=\"name\">additional_output_params</span> argument.</li>\n<li>Furthermore, it's not possible to fetch the OUT parameter values for a procedure, which returns a result set AND has OUT parameters.</li>\n</ul>\n<h4>Simple case with IN and OUT params (no result sets)</h4>\n<p>Consider the following procedure:</p>\n<pre>\nCREATE PROCEDURE\nreturn_out_param_without_result_sets\n@my_input VARCHAR(20),\n@my_output INT OUTPUT\nAS\nBEGIN\n IF @my_input = 'give me 1'\n    BEGIN\n        SELECT @my_output = 1;\n    END\n    ELSE\n    BEGIN\n        SELECT @my_output = 0;\n    END\nEND;\n</pre>\n<p>Calling the procedure in Robot Framework requires putting the IN parameters as usual in the <span class=\"name\">procedure_params</span> argument, but the sample values of OUT parameters must be put in the argument <span class=\"name\">additional_output_params</span>.</p>\n<pre>\n@{params}=    Create List    give me 1\n@{out_params}=    Create List    ${9}\n${param values}    ${result sets}=    Call Stored Procedure    return_out_param_without_result_sets\n...    ${params}    additional_output_params=${out_params}\n# ${result sets} = []\n# ${param values} = ('give me 1', 1)\n</pre>\n<p>The library uses the sample values in the <span class=\"name\">additional_output_params</span> list to determine the number and the type of OUT parameters - so they are type-sensitive, the type must be the same as in the procedure itself.</p>\n<h4>MS SQL procedure returning a result set (no OUT params)</h4>\n<p>If a procedure doesn't have any OUT params and returns only result sets, they are handled in a normal way. Consider the following procedure:</p>\n<pre>\nCREATE PROCEDURE get_all_first_and_second_names\nAS\nBEGIN\n  SELECT FIRST_NAME FROM person;\n  SELECT LAST_NAME FROM person;\n  RETURN;\nEND;\n</pre>\n<p>Calling the procedure in Robot Framework:</p>\n<pre>\n${param values}    ${result sets}=    Call Stored Procedure    get_all_first_and_second_names\n${param values} = ()\n${result sets} = [[('Franz Allan',), ('Jerry',)], [('See',), ('Schneider',)]]\n</pre>\n<h4>MS SQL procedure returning result sets AND OUT params</h4>\n<p>This case is <b>not fully supported</b> by the library - the OUT params won't be fetched.</p>",
      "shortdoc": "Calls a stored procedure `procedure_name` with the `procedure_params` - a *list* of parameters the procedure requires. *Returns two lists* - the _parameter values_ and the _result sets_.",
      "tags": [],
      "source": "C:\\Python313\\Lib\\site-packages\\DatabaseLibrary\\query.py",
      "lineno": 458
    },
    {
      "name": "Check If Exists In Database",
      "args": [
        {
          "name": "select_statement",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "select_statement: str"
        },
        {
          "name": "",
          "type": null,
          "defaultValue": null,
          "kind": "NAMED_ONLY_MARKER",
          "required": false,
          "repr": "*"
        },
        {
          "name": "no_transaction",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "defaultValue": "False",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "no_transaction: bool = False"
        },
        {
          "name": "msg",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "msg: str | None = None"
        },
        {
          "name": "alias",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "alias: str | None = None"
        },
        {
          "name": "parameters",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "Tuple",
                "typedoc": "tuple",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "parameters: Tuple | None = None"
        }
      ],
      "returnType": null,
      "doc": "<p><b>DEPRECATED</b> Use new <a href=\"#Check%20Row%20Count\" class=\"name\">Check Row Count</a> keyword with assertion engine instead. The deprecated keyword will be removed in future versions.</p>\n<p>Check if any row would be returned by given the input <code>select_statement</code>. If there are no results, then this will throw an AssertionError.</p>\n<p>Set optional input <code>no_transaction</code> to <i>True</i> to run command without an explicit transaction commit or rollback.</p>\n<p>The default error message can be overridden with the <code>msg</code> argument.</p>\n<p>Use optional <code>alias</code> parameter to specify what connection should be used for the query if you have more than one connection open.</p>\n<p>Use <code>parameters</code> for query variable substitution (variable substitution syntax may be different depending on the database client).</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Check If Exists In Database</td>\n<td>SELECT id FROM person WHERE first_name = 'Franz Allan'</td>\n<td></td>\n</tr>\n<tr>\n<td>Check If Exists In Database</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td>msg=my error message</td>\n</tr>\n<tr>\n<td>Check If Exists In Database</td>\n<td>SELECT id FROM person WHERE first_name = 'Franz Allan'</td>\n<td>alias=my_alias</td>\n</tr>\n<tr>\n<td>Check If Exists In Database</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td>no_transaction=True</td>\n</tr>\n<tr>\n<td>@{parameters}</td>\n<td>Create List</td>\n<td>John</td>\n</tr>\n<tr>\n<td>Check If Exists In Database</td>\n<td>SELECT id FROM person WHERE first_name = %s</td>\n<td>parameters=${parameters}</td>\n</tr>\n</table>",
      "shortdoc": "*DEPRECATED* Use new `Check Row Count` keyword with assertion engine instead. The deprecated keyword will be removed in future versions.",
      "tags": [],
      "source": "C:\\Python313\\Lib\\site-packages\\DatabaseLibrary\\assertion.py",
      "lineno": 29,
      "deprecated": true
    },
    {
      "name": "Check If Not Exists In Database",
      "args": [
        {
          "name": "selectStatement",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "selectStatement: str"
        },
        {
          "name": "sansTran",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "sansTran: bool = False"
        },
        {
          "name": "msg",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "msg: str | None = None"
        },
        {
          "name": "alias",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "alias: str | None = None"
        },
        {
          "name": "parameters",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "Tuple",
                "typedoc": "tuple",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "parameters: Tuple | None = None"
        }
      ],
      "returnType": null,
      "doc": "<p><b>DEPRECATED</b> Use new <a href=\"#Check%20Row%20Count\" class=\"name\">Check Row Count</a> keyword with assertion engine instead. The deprecated keyword will be removed in future versions.</p>\n<p>This is the negation of <span class=\"name\">check_if_exists_in_database</span>.</p>\n<p>Check if no rows would be returned by given the input <code>selectStatement</code>. If there are any results, then this will throw an AssertionError.</p>\n<p>Set optional input <code>sansTran</code> to <i>True</i> to run command without an explicit transaction commit or rollback.</p>\n<p>The default error message can be overridden with the <code>msg</code> argument.</p>\n<p>Use optional <code>alias</code> parameter to specify what connection should be used for the query if you have more than one connection open.</p>\n<p>Use <code>parameters</code> for query variable substitution (variable substitution syntax may be different depending on the database client).</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Check If Not Exists In Database</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td></td>\n</tr>\n<tr>\n<td>Check If Not Exists In Database</td>\n<td>SELECT id FROM person WHERE first_name = 'Franz Allan'</td>\n<td>msg=my error message</td>\n</tr>\n<tr>\n<td>Check If Not Exists In Database</td>\n<td>SELECT id FROM person WHERE first_name = 'Franz Allan'</td>\n<td>alias=my_alias</td>\n</tr>\n<tr>\n<td>Check If Not Exists In Database</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td>sansTran=True</td>\n</tr>\n<tr>\n<td>@{parameters}</td>\n<td>Create List</td>\n<td>John</td>\n</tr>\n<tr>\n<td>Check If Not Exists In Database</td>\n<td>SELECT id FROM person WHERE first_name = %s</td>\n<td>parameters=${parameters}</td>\n</tr>\n</table>",
      "shortdoc": "*DEPRECATED* Use new `Check Row Count` keyword with assertion engine instead. The deprecated keyword will be removed in future versions.",
      "tags": [],
      "source": "C:\\Python313\\Lib\\site-packages\\DatabaseLibrary\\assertion.py",
      "lineno": 69,
      "deprecated": true
    },
    {
      "name": "Check Query Result",
      "args": [
        {
          "name": "select_statement",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "select_statement: str"
        },
        {
          "name": "assertion_operator",
          "type": {
            "name": "AssertionOperator",
            "typedoc": "AssertionOperator",
            "nested": [],
            "union": false
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "assertion_operator: AssertionOperator"
        },
        {
          "name": "expected_value",
          "type": {
            "name": "Any",
            "typedoc": "Any",
            "nested": [],
            "union": false
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "expected_value: Any"
        },
        {
          "name": "row",
          "type": null,
          "defaultValue": "0",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "row=0"
        },
        {
          "name": "col",
          "type": null,
          "defaultValue": "0",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "col=0"
        },
        {
          "name": "assertion_message",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "assertion_message: str | None = None"
        },
        {
          "name": "no_transaction",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "no_transaction: bool = False"
        },
        {
          "name": "alias",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "alias: str | None = None"
        },
        {
          "name": "parameters",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "Tuple",
                "typedoc": "tuple",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "parameters: Tuple | None = None"
        },
        {
          "name": "retry_timeout",
          "type": null,
          "defaultValue": "0 seconds",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "retry_timeout=0 seconds"
        },
        {
          "name": "retry_pause",
          "type": null,
          "defaultValue": "0.5 seconds",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "retry_pause=0.5 seconds"
        },
        {
          "name": "",
          "type": null,
          "defaultValue": null,
          "kind": "NAMED_ONLY_MARKER",
          "required": false,
          "repr": "*"
        },
        {
          "name": "selectStatement",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "selectStatement: str | None = None"
        },
        {
          "name": "sansTran",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "bool",
                "typedoc": "boolean",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "sansTran: bool | None = None"
        }
      ],
      "returnType": null,
      "doc": "<p>Check value in query result returned from <code>select_statement</code> using <code>assertion_operator</code> and <code>expected_value</code>. The value position in results can be adjusted using <code>row</code> and <code>col</code> parameters (0-based). See <a href=\"#Inline%20assertions\" class=\"name\">Inline assertions</a> for more details.</p>\n<p><b>The assertion in this keyword is type sensitive!</b> The <code>expected_value</code> is taken as a string, no argument conversion is performed. Use RF syntax like <code>${1}</code> for numeric values.</p>\n<p>Use optional <code>assertion_message</code> to override the default error message.</p>\n<p>Set <code>no_transaction</code> to <i>True</i> to run command without explicit transaction rollback in case of error. See <a href=\"#Commit%20behavior\" class=\"name\">Commit behavior</a> for details.</p>\n<p>Use <code>alias</code> to specify what connection should be used if <a href=\"#Handling%20multiple%20database%20connections\" class=\"name\">Handling multiple database connections</a>.</p>\n<p>Use <code>parameters</code> for query variable substitution (variable substitution syntax may be different depending on the database client).</p>\n<p>Use <code>retry_timeout</code> and <code>retry_pause</code> parameters to enable waiting for assertion to pass. See <a href=\"#Retry%20mechanism\" class=\"name\">Retry mechanism</a> for more details.</p>\n<h4>Some parameters were renamed in version 2.0</h4>\n<p>The old parameters <code>selectStatement</code> and <code>sansTran</code> are <b>deprecated</b>, please use new parameters <code>select_statement</code> and <code>no_transaction</code> instead.</p>\n<p><b>The old parameters will be removed in future versions.</b></p>\n<h4>Examples</h4>\n<table border=\"1\">\n<tr>\n<td>Check Query Result</td>\n<td>SELECT first_name FROM person</td>\n<td><b>contains</b></td>\n<td>Allan</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Check Query Result</td>\n<td>SELECT first_name, last_name FROM person</td>\n<td><b>==</b></td>\n<td>Schneider</td>\n<td>row=1</td>\n<td>col=1</td>\n</tr>\n<tr>\n<td>Check Query Result</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td><b>==</b></td>\n<td>2</td>\n<td># Fails, if query returns an integer value</td>\n<td></td>\n</tr>\n<tr>\n<td>Check Query Result</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td><b>==</b></td>\n<td>${2}</td>\n<td># Works, if query returns an integer value</td>\n<td></td>\n</tr>\n<tr>\n<td>Check Query Result</td>\n<td>SELECT first_name FROM person</td>\n<td><b>equal</b></td>\n<td>Franz Allan</td>\n<td>assertion_message=my error message</td>\n<td></td>\n</tr>\n<tr>\n<td>Check Query Result</td>\n<td>SELECT first_name FROM person</td>\n<td><b>inequal</b></td>\n<td>John</td>\n<td>alias=my_alias</td>\n<td></td>\n</tr>\n<tr>\n<td>Check Query Result</td>\n<td>SELECT first_name FROM person</td>\n<td><b>contains</b></td>\n<td>Allan</td>\n<td>no_transaction=True</td>\n<td></td>\n</tr>\n<tr>\n<td>@{parameters}</td>\n<td>Create List</td>\n<td>John</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Check Query Result</td>\n<td>SELECT first_name FROM person</td>\n<td><b>contains</b></td>\n<td>Allan</td>\n<td>parameters=${parameters}</td>\n<td></td>\n</tr>\n</table>",
      "shortdoc": "Check value in query result returned from ``select_statement`` using ``assertion_operator`` and ``expected_value``. The value position in results can be adjusted using ``row`` and ``col`` parameters (0-based). See `Inline assertions` for more details.",
      "tags": [],
      "source": "C:\\Python313\\Lib\\site-packages\\DatabaseLibrary\\assertion.py",
      "lineno": 332
    },
    {
      "name": "Check Row Count",
      "args": [
        {
          "name": "select_statement",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "select_statement: str"
        },
        {
          "name": "assertion_operator",
          "type": {
            "name": "AssertionOperator",
            "typedoc": "AssertionOperator",
            "nested": [],
            "union": false
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "assertion_operator: AssertionOperator"
        },
        {
          "name": "expected_value",
          "type": {
            "name": "int",
            "typedoc": "integer",
            "nested": [],
            "union": false
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "expected_value: int"
        },
        {
          "name": "assertion_message",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "assertion_message: str | None = None"
        },
        {
          "name": "no_transaction",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "no_transaction: bool = False"
        },
        {
          "name": "alias",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "alias: str | None = None"
        },
        {
          "name": "parameters",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "Tuple",
                "typedoc": "tuple",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "parameters: Tuple | None = None"
        },
        {
          "name": "retry_timeout",
          "type": null,
          "defaultValue": "0 seconds",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "retry_timeout=0 seconds"
        },
        {
          "name": "retry_pause",
          "type": null,
          "defaultValue": "0.5 seconds",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "retry_pause=0.5 seconds"
        },
        {
          "name": "",
          "type": null,
          "defaultValue": null,
          "kind": "NAMED_ONLY_MARKER",
          "required": false,
          "repr": "*"
        },
        {
          "name": "selectStatement",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "selectStatement: str | None = None"
        },
        {
          "name": "sansTran",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "bool",
                "typedoc": "boolean",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "sansTran: bool | None = None"
        }
      ],
      "returnType": null,
      "doc": "<p>Check the number of rows returned from <code>select_statement</code> using <code>assertion_operator</code> and <code>expected_value</code>. See <a href=\"#Inline%20assertions\" class=\"name\">Inline assertions</a> for more details.</p>\n<p>Use <code>assertion_message</code> to override the default error message.</p>\n<p>Set <code>no_transaction</code> to <i>True</i> to run command without explicit transaction rollback in case of error. See <a href=\"#Commit%20behavior\" class=\"name\">Commit behavior</a> for details.</p>\n<p>Use <code>alias</code> to specify what connection should be used if <a href=\"#Handling%20multiple%20database%20connections\" class=\"name\">Handling multiple database connections</a>.</p>\n<p>Use <code>parameters</code> for query variable substitution (variable substitution syntax may be different depending on the database client).</p>\n<p>Use <code>retry_timeout</code> and <code>retry_pause</code> parameters to enable waiting for assertion to pass. See <a href=\"#Retry%20mechanism\" class=\"name\">Retry mechanism</a> for more details.</p>\n<h4>Some parameters were renamed in version 2.0</h4>\n<p>The old parameters <code>selectStatement</code> and <code>sansTran</code> are <b>deprecated</b>, please use new parameters <code>select_statement</code> and <code>no_transaction</code> instead.</p>\n<p><b>The old parameters will be removed in future versions.</b></p>\n<h4>Examples</h4>\n<table border=\"1\">\n<tr>\n<td>Check Row Count</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td><b>==</b></td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>Check Row Count</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td><b>&gt;=</b></td>\n<td>2</td>\n<td>assertion_message=my error message</td>\n</tr>\n<tr>\n<td>Check Row Count</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td><b>inequal</b></td>\n<td>3</td>\n<td>alias=my_alias</td>\n</tr>\n<tr>\n<td>Check Row Count</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td><b>less than</b></td>\n<td>4</td>\n<td>no_transaction=True</td>\n</tr>\n<tr>\n<td>@{parameters}</td>\n<td>Create List</td>\n<td>John</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Check Row Count</td>\n<td>SELECT id FROM person WHERE first_name = %s</td>\n<td><b>equals</b></td>\n<td>5</td>\n<td>parameters=${parameters}</td>\n</tr>\n</table>",
      "shortdoc": "Check the number of rows returned from ``select_statement`` using ``assertion_operator`` and ``expected_value``. See `Inline assertions` for more details.",
      "tags": [],
      "source": "C:\\Python313\\Lib\\site-packages\\DatabaseLibrary\\assertion.py",
      "lineno": 269
    },
    {
      "name": "Connect To Database",
      "args": [
        {
          "name": "db_module",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "db_module: str | None = None"
        },
        {
          "name": "db_name",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "db_name: str | None = None"
        },
        {
          "name": "db_user",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "db_user: str | None = None"
        },
        {
          "name": "db_password",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "db_password: str | None = None"
        },
        {
          "name": "db_host",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "db_host: str | None = None"
        },
        {
          "name": "db_port",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "int",
                "typedoc": "integer",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "db_port: int | None = None"
        },
        {
          "name": "db_charset",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "db_charset: str | None = None"
        },
        {
          "name": "odbc_driver",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "odbc_driver: str | None = None"
        },
        {
          "name": "config_file",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "config_file: str | None = None"
        },
        {
          "name": "oracle_driver_mode",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "oracle_driver_mode: str | None = None"
        },
        {
          "name": "alias",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "defaultValue": "default",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "alias: str = default"
        },
        {
          "name": "custom_connection_params",
          "type": null,
          "defaultValue": null,
          "kind": "VAR_NAMED",
          "required": false,
          "repr": "**custom_connection_params"
        }
      ],
      "returnType": null,
      "doc": "<p>Creates a database connection using the DB API 2.0 <code>db_module</code> and the parameters provided. Along with listed commonly used arguments (<span class=\"name\">db_name</span>, <span class=\"name\">db_host</span> etc.) you can set any other DB module specific parameters as key/value pairs.</p>\n<p>Use <code>config_file</code> to provide a path to configuration file with connection parameters to be used along with / instead of keyword arguments. If no specified, it defaults to <span class=\"name\">./resources/db.cfg</span>. See <a href=\"#Using%20configuration%20file\" class=\"name\">Using configuration file</a> for more details.</p>\n<p>All params are optional, although <code>db_module</code> must be set - either as keyword argument or in config file. If some of the listed keyword arguments (<span class=\"name\">db_name</span>, <span class=\"name\">db_host</span> etc.) are not provided (i.e. left on default value <a href=\"#type-None\" class=\"name\">None</a>), they are normally not passed to the Python DB module at all, except:</p>\n<ul>\n<li><i>db_port</i> - commonly used port number for known databases is set as fallback</li>\n<li><i>db_charset</i> - <i>UTF8</i> is used as fallback for <i>pymysql</i>, <i>pymssql</i> and <i>pyodbc</i></li>\n<li><i>oracle_driver_mode</i> - <i>thin</i> is used as fallback for <i>oracledb</i></li>\n</ul>\n<p>Other custom params from keyword arguments and config file are passed to the Python DB module as provided - normally as arguments for the <i>connect()</i> function. However, when using <b>pyodbc</b> or <b>ibm_db_dbi</b>, the connection is established using a <b>connection string</b> - so all the custom params are added into it instead of function arguments.</p>\n<p>Set <code>alias</code> for <a href=\"#Handling%20multiple%20database%20connections\" class=\"name\">Handling multiple database connections</a>. If the same alias is given twice, then previous connection will be overridden.</p>\n<p>The <code>oracle_driver_mode</code> is used to select the <b>oracledb</b> client mode. Allowed values are:</p>\n<ul>\n<li><i>thin</i> (default if omitted)</li>\n<li><i>thick</i></li>\n<li><i>thick,lib_dir=&lt;PATH_TO_ORACLE_CLIENT&gt;</i></li>\n</ul>\n<p>By default, there is a warning when overwriting an existing connection (i.e. not closing it properly). This can be disabled by setting the <code>warn_on_connection_overwrite</code> parameter to <b>False</b> in the library import.</p>\n<h4>Some parameters were renamed in version 2.0</h4>\n<p>The old parameters <code>dbapiModuleName</code>, <code>dbName</code>, <code>dbUsername</code>, <code>dbPassword</code>, <code>dbHost</code>, <code>dbPort</code>, <code>dbCharset</code>, <code>dbDriver</code>, <code>dbConfigFile</code> and <code>driverMode</code> are <b>deprecated</b>, please use new parameters <code>db_module</code>, <code>db_name</code>, <code>db_user</code>, <code>db_password</code>, <code>db_host</code>, <code>db_port</code>, <code>db_charset</code>, <code>odbc_driver</code>, <code>config_file</code> and <code>oracle_driver_mode</code> instead.</p>\n<p><b>The old parameters will be removed in future versions.</b></p>\n<h3>Basic examples</h3>\n<table border=\"1\">\n<tr>\n<td>Connect To Database</td>\n<td>psycopg2</td>\n<td>my_db</td>\n<td>user</td>\n<td>pass</td>\n<td>127.0.0.1</td>\n<td>5432</td>\n<td></td>\n</tr>\n<tr>\n<td>Connect To Database</td>\n<td>psycopg2</td>\n<td>my_db</td>\n<td>user</td>\n<td>pass</td>\n<td>127.0.0.1</td>\n<td>5432</td>\n<td>my_custom_param=value</td>\n</tr>\n<tr>\n<td>Connect To Database</td>\n<td>psycopg2</td>\n<td>my_db</td>\n<td>user</td>\n<td>pass</td>\n<td>127.0.0.1</td>\n<td>5432</td>\n<td>alias=my_alias</td>\n</tr>\n<tr>\n<td>Connect To Database</td>\n<td>config_file=my_db_params.cfg</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>See <a href=\"#Connection%20examples%20for%20different%20DB%20modules\" class=\"name\">Connection examples for different DB modules</a>.</p>",
      "shortdoc": "Creates a database connection using the DB API 2.0 ``db_module`` and the parameters provided. Along with listed commonly used arguments (`db_name`, `db_host` etc.) you can set any other DB module specific parameters as key/value pairs.",
      "tags": [],
      "source": "C:\\Python313\\Lib\\site-packages\\DatabaseLibrary\\connection_manager.py",
      "lineno": 178
    },
    {
      "name": "Connect To Database Using Custom Connection String",
      "args": [
        {
          "name": "db_module",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "db_module: str | None = None"
        },
        {
          "name": "db_connect_string",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "defaultValue": "",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "db_connect_string: str = "
        },
        {
          "name": "alias",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "defaultValue": "default",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "alias: str = default"
        },
        {
          "name": "",
          "type": null,
          "defaultValue": null,
          "kind": "NAMED_ONLY_MARKER",
          "required": false,
          "repr": "*"
        },
        {
          "name": "dbapiModuleName",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "dbapiModuleName: str | None = None"
        }
      ],
      "returnType": null,
      "doc": "<p>Loads the DB API 2.0 module given <code>db_module</code> then uses it to connect to the database using the <code>db_connect_string</code> (parsed as single connection string or URI).</p>\n<p>Use <a href=\"#Connect%20To%20Database\" class=\"name\">Connect To Database</a> for passing custom connection params as named arguments.</p>\n<h4>Some parameters were renamed in version 2.0</h4>\n<p>The old parameter <code>dbapiModuleName</code> is <b>deprecated</b>, please use new parameter <code>db_module</code> instead.</p>\n<p><b>The old parameter will be removed in future versions.</b></p>\n<p>Example usage:</p>\n<table border=\"1\">\n<tr>\n<td>Connect To Database Using Custom Connection String</td>\n<td>psycopg2</td>\n<td><a href=\"postgresql://postgres:s3cr3t@tiger.foobar.com:5432/my_db_test\">postgresql://postgres:s3cr3t@tiger.foobar.com:5432/my_db_test</a></td>\n</tr>\n<tr>\n<td>Connect To Database Using Custom Connection String</td>\n<td>oracledb</td>\n<td>username/pass@localhost:1521/orclpdb</td>\n</tr>\n</table>",
      "shortdoc": "Loads the DB API 2.0 module given ``db_module`` then uses it to connect to the database using the ``db_connect_string`` (parsed as single connection string or URI).",
      "tags": [],
      "source": "C:\\Python313\\Lib\\site-packages\\DatabaseLibrary\\connection_manager.py",
      "lineno": 560
    },
    {
      "name": "Connect To Database Using Custom Params",
      "args": [
        {
          "name": "db_module",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "db_module: str | None = None"
        },
        {
          "name": "db_connect_string",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "defaultValue": "",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "db_connect_string: str = "
        },
        {
          "name": "alias",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "defaultValue": "default",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "alias: str = default"
        },
        {
          "name": "",
          "type": null,
          "defaultValue": null,
          "kind": "NAMED_ONLY_MARKER",
          "required": false,
          "repr": "*"
        },
        {
          "name": "dbapiModuleName",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "dbapiModuleName: str | None = None"
        }
      ],
      "returnType": null,
      "doc": "<p><b>DEPRECATED</b> Use new <a href=\"#Connect%20To%20Database\" class=\"name\">Connect To Database</a> keyword with custom parameters instead. The deprecated keyword will be removed in future versions.</p>\n<p>Loads the DB API 2.0 module given <code>db_module</code> then uses it to connect to the database using the map string <code>db_connect_string</code> (parsed as a list of named arguments).</p>\n<p>Use <span class=\"name\">connect_to_database_using_custom_connection_string</span> for passing all params in a single connection string or URI.</p>\n<h4>Some parameters were renamed in version 2.0</h4>\n<p>The old parameter <code>dbapiModuleName</code> is <b>deprecated</b>, please use new parameter <code>db_module</code> instead.</p>\n<p><b>The old parameter will be removed in future versions.</b></p>\n<h4>Examples</h4>\n<table border=\"1\">\n<tr>\n<td>Connect To Database Using Custom Params</td>\n<td>psycopg2</td>\n<td>database='my_db_test', user='postgres', password='s3cr3t', host='tiger.foobar.com', port=5432</td>\n</tr>\n<tr>\n<td>Connect To Database Using Custom Params</td>\n<td>jaydebeapi</td>\n<td>'oracle.jdbc.driver.OracleDriver', 'my_db_test', 'system', 's3cr3t'</td>\n</tr>\n<tr>\n<td>Connect To Database Using Custom Params</td>\n<td>oracledb</td>\n<td>user=\"username\", password=\"pass\", dsn=\"localhost/orclpdb\"</td>\n</tr>\n<tr>\n<td>Connect To Database Using Custom Params</td>\n<td>sqlite3</td>\n<td>database=\"./my_database.db\", isolation_level=None</td>\n</tr>\n</table>",
      "shortdoc": "*DEPRECATED* Use new `Connect To Database` keyword with custom parameters instead. The deprecated keyword will be removed in future versions.",
      "tags": [],
      "source": "C:\\Python313\\Lib\\site-packages\\DatabaseLibrary\\connection_manager.py",
      "lineno": 517,
      "deprecated": true
    },
    {
      "name": "Delete All Rows From Table",
      "args": [
        {
          "name": "table_name",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table_name: str"
        },
        {
          "name": "no_transaction",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "no_transaction: bool = False"
        },
        {
          "name": "alias",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "alias: str | None = None"
        },
        {
          "name": "",
          "type": null,
          "defaultValue": null,
          "kind": "NAMED_ONLY_MARKER",
          "required": false,
          "repr": "*"
        },
        {
          "name": "tableName",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "tableName: str | None = None"
        },
        {
          "name": "sansTran",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "bool",
                "typedoc": "boolean",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "sansTran: bool | None = None"
        }
      ],
      "returnType": null,
      "doc": "<p>Deletes all rows from table with <code>table_name</code>.</p>\n<p>Set <code>no_transaction</code> to <i>True</i> to run command without explicit transaction commit or rollback in case of error. See <a href=\"#Commit%20behavior\" class=\"name\">Commit behavior</a> for details.</p>\n<p>Use <code>alias</code> to specify what connection should be used if <a href=\"#Handling%20multiple%20database%20connections\" class=\"name\">Handling multiple database connections</a>.</p>\n<h4>Some parameters were renamed in version 2.0</h4>\n<p>The old parameters <code>tableName</code> and <code>sansTran</code> are <b>deprecated</b>, please use new parameters <code>table_name</code> and <code>no_transaction</code> instead.</p>\n<p><b>The old parameters will be removed in future versions.</b></p>\n<h4>Examples</h4>\n<table border=\"1\">\n<tr>\n<td>Delete All Rows From Table</td>\n<td>person</td>\n<td></td>\n</tr>\n<tr>\n<td>Delete All Rows From Table</td>\n<td>person</td>\n<td>no_transaction=True</td>\n</tr>\n<tr>\n<td>Delete All Rows From Table</td>\n<td>person</td>\n<td>alias=my_alias</td>\n</tr>\n</table>",
      "shortdoc": "Deletes all rows from table with ``table_name``.",
      "tags": [],
      "source": "C:\\Python313\\Lib\\site-packages\\DatabaseLibrary\\query.py",
      "lineno": 219
    },
    {
      "name": "Description",
      "args": [
        {
          "name": "select_statement",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "select_statement: str"
        },
        {
          "name": "no_transaction",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "no_transaction: bool = False"
        },
        {
          "name": "alias",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "alias: str | None = None"
        },
        {
          "name": "parameters",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "Tuple",
                "typedoc": "tuple",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "parameters: Tuple | None = None"
        },
        {
          "name": "",
          "type": null,
          "defaultValue": null,
          "kind": "NAMED_ONLY_MARKER",
          "required": false,
          "repr": "*"
        },
        {
          "name": "selectStatement",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "selectStatement: str | None = None"
        },
        {
          "name": "sansTran",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "bool",
                "typedoc": "boolean",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "sansTran: bool | None = None"
        }
      ],
      "returnType": null,
      "doc": "<p>Runs a query with the <code>select_statement</code> to determine the table description.</p>\n<p>Set <code>no_transaction</code> to <i>True</i> to run command without explicit transaction commit or rollback in case of error. See <a href=\"#Commit%20behavior\" class=\"name\">Commit behavior</a> for details.</p>\n<p>Use <code>alias</code> to specify what connection should be used if <a href=\"#Handling%20multiple%20database%20connections\" class=\"name\">Handling multiple database connections</a>.</p>\n<p>Use <code>parameters</code> for query variable substitution (variable substitution syntax may be different depending on the database client).</p>\n<h4>Some parameters were renamed in version 2.0</h4>\n<p>The old parameters <code>selectStatement</code> and <code>sansTran</code> are <b>deprecated</b>, please use new parameters <code>select_statement</code> and <code>no_transaction</code> instead.</p>\n<p><b>The old parameters will be removed in future versions.</b></p>\n<h4>Examples</h4>\n<table border=\"1\">\n<tr>\n<td>${Person table description}=</td>\n<td>Description</td>\n<td>select LAST_NAME from person</td>\n<td></td>\n</tr>\n<tr>\n<td>${Person table description}=</td>\n<td>Description</td>\n<td>select LAST_NAME from person</td>\n<td>no_transaction=True</td>\n</tr>\n<tr>\n<td>${Person table description}=</td>\n<td>Description</td>\n<td>select LAST_NAME from person</td>\n<td>alias=postgres</td>\n</tr>\n<tr>\n<td>@{parameters}</td>\n<td>Create List</td>\n<td>person</td>\n<td></td>\n</tr>\n<tr>\n<td>${Person table description}=</td>\n<td>Description</td>\n<td>SELECT * FROM %s</td>\n<td>parameters=${parameters}</td>\n</tr>\n</table>",
      "shortdoc": "Runs a query with the ``select_statement`` to determine the table description.",
      "tags": [],
      "source": "C:\\Python313\\Lib\\site-packages\\DatabaseLibrary\\query.py",
      "lineno": 165
    },
    {
      "name": "Disconnect From All Databases",
      "args": [],
      "returnType": null,
      "doc": "<p>Disconnects from all the databases - useful when testing with multiple database connections (aliases).</p>",
      "shortdoc": "Disconnects from all the databases - useful when testing with multiple database connections (aliases).",
      "tags": [],
      "source": "C:\\Python313\\Lib\\site-packages\\DatabaseLibrary\\connection_manager.py",
      "lineno": 617
    },
    {
      "name": "Disconnect From Database",
      "args": [
        {
          "name": "error_if_no_connection",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "error_if_no_connection: bool = False"
        },
        {
          "name": "alias",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "alias: str | None = None"
        }
      ],
      "returnType": null,
      "doc": "<p>Disconnects from the database.</p>\n<p>By default, it's not an error if there was no open database connection - suitable for usage as a teardown. However, you can enforce it using the <code>error_if_no_connection</code> parameter.</p>\n<p>Use <code>alias</code> to specify what connection should be closed if <a href=\"#Handling%20multiple%20database%20connections\" class=\"name\">Handling multiple database connections</a>.</p>\n<h4>Examples</h4>\n<table border=\"1\">\n<tr>\n<td>Disconnect From Database</td>\n<td></td>\n</tr>\n<tr>\n<td>Disconnect From Database</td>\n<td>alias=postgres</td>\n</tr>\n</table>",
      "shortdoc": "Disconnects from the database.",
      "tags": [],
      "source": "C:\\Python313\\Lib\\site-packages\\DatabaseLibrary\\connection_manager.py",
      "lineno": 594
    },
    {
      "name": "Execute Sql Script",
      "args": [
        {
          "name": "script_path",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "script_path: str"
        },
        {
          "name": "no_transaction",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "no_transaction: bool = False"
        },
        {
          "name": "alias",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "alias: str | None = None"
        },
        {
          "name": "split",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "split: bool = True"
        },
        {
          "name": "external_parser",
          "type": null,
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "external_parser=False"
        },
        {
          "name": "",
          "type": null,
          "defaultValue": null,
          "kind": "NAMED_ONLY_MARKER",
          "required": false,
          "repr": "*"
        },
        {
          "name": "sqlScriptFileName",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "sqlScriptFileName: str | None = None"
        },
        {
          "name": "sansTran",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "bool",
                "typedoc": "boolean",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "sansTran: bool | None = None"
        }
      ],
      "returnType": null,
      "doc": "<p>Executes the content of the SQL script file loaded from <span class=\"name\">script_path</span> as SQL commands.</p>\n<p>SQL commands are expected to be delimited by a semicolon (';') - they will be split and executed separately. Set <code>split</code> to <i>False</i> to disable this behavior  - in this case the entire script content will be passed to the database module for execution as a single command.</p>\n<p>Set <code>external_parser</code> to <i>True</i> to use the external library <a href=\"https://pypi.org/project/sqlparse/\">sqlparse</a> for splitting the script.</p>\n<p>Set <code>no_transaction</code> to <i>True</i> to run command without explicit transaction commit or rollback in case of error. See <a href=\"#Commit%20behavior\" class=\"name\">Commit behavior</a> for details.</p>\n<p>Use <code>alias</code> to specify what connection should be used if <a href=\"#Handling%20multiple%20database%20connections\" class=\"name\">Handling multiple database connections</a>.</p>\n<h4>Some parameters were renamed in version 2.0</h4>\n<p>The old parameters <code>sqlScriptFileName</code> and <code>sansTran</code> are <b>deprecated</b>, please use new parameters <code>script_path</code> and <code>no_transaction</code> instead.</p>\n<p><b>The old parameters will be removed in future versions.</b></p>\n<h4>Examples</h4>\n<table border=\"1\">\n<tr>\n<td>Execute SQL Script</td>\n<td>insert_data_in_person_table.sql</td>\n<td></td>\n</tr>\n<tr>\n<td>Execute SQL Script</td>\n<td>insert_data_in_person_table.sql</td>\n<td>no_transaction=True</td>\n</tr>\n<tr>\n<td>Execute SQL Script</td>\n<td>insert_data_in_person_table.sql</td>\n<td>alias=postgres</td>\n</tr>\n<tr>\n<td>Execute SQL Script</td>\n<td>insert_data_in_person_table.sql</td>\n<td>split=False</td>\n</tr>\n</table>",
      "shortdoc": "Executes the content of the SQL script file loaded from `script_path` as SQL commands.",
      "tags": [],
      "source": "C:\\Python313\\Lib\\site-packages\\DatabaseLibrary\\query.py",
      "lineno": 261
    },
    {
      "name": "Execute Sql String",
      "args": [
        {
          "name": "sql_string",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "sql_string: str"
        },
        {
          "name": "no_transaction",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "no_transaction: bool = False"
        },
        {
          "name": "alias",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "alias: str | None = None"
        },
        {
          "name": "parameters",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "Tuple",
                "typedoc": "tuple",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "parameters: Tuple | None = None"
        },
        {
          "name": "omit_trailing_semicolon",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "bool",
                "typedoc": "boolean",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "omit_trailing_semicolon: bool | None = None"
        },
        {
          "name": "",
          "type": null,
          "defaultValue": null,
          "kind": "NAMED_ONLY_MARKER",
          "required": false,
          "repr": "*"
        },
        {
          "name": "sqlString",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "sqlString: str | None = None"
        },
        {
          "name": "sansTran",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "bool",
                "typedoc": "boolean",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "sansTran: bool | None = None"
        },
        {
          "name": "omitTrailingSemicolon",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "bool",
                "typedoc": "boolean",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "omitTrailingSemicolon: bool | None = None"
        }
      ],
      "returnType": null,
      "doc": "<p>Executes the <code>sql_string</code> as a single SQL command.</p>\n<p>Set <code>no_transaction</code> to <i>True</i> to run command without explicit transaction commit or rollback in case of error. See <a href=\"#Commit%20behavior\" class=\"name\">Commit behavior</a> for details.</p>\n<p>Use <code>alias</code> to specify what connection should be used if <a href=\"#Handling%20multiple%20database%20connections\" class=\"name\">Handling multiple database connections</a>.</p>\n<p>Use <code>parameters</code> for query variable substitution (variable substitution syntax may be different depending on the database client).</p>\n<p>Set the <code>omit_trailing_semicolon</code> to explicitly control the <a href=\"#Omitting%20trailing%20semicolon%20behavior\" class=\"name\">Omitting trailing semicolon behavior</a> for the command.</p>\n<h4>Some parameters were renamed in version 2.0</h4>\n<p>The old parameters <code>sqlString</code>, <code>sansTran</code> and <code>omitTrailingSemicolon</code> are <b>deprecated</b>, please use new parameters <code>sql_string</code>, <code>no_transaction</code> and <code>omit_trailing_semicolon</code> instead.</p>\n<p><b>The old parameters will be removed in future versions.</b></p>\n<h4>Examples</h4>\n<table border=\"1\">\n<tr>\n<td>Execute Sql String</td>\n<td>DELETE FROM person_employee_table; DELETE FROM person_table</td>\n<td></td>\n</tr>\n<tr>\n<td>Execute Sql String</td>\n<td>DELETE FROM person_employee_table; DELETE FROM person_table</td>\n<td>no_transaction=True</td>\n</tr>\n<tr>\n<td>Execute Sql String</td>\n<td>DELETE FROM person_employee_table; DELETE FROM person_table</td>\n<td>alias=my_alias</td>\n</tr>\n<tr>\n<td>Execute Sql String</td>\n<td>CREATE PROCEDURE proc AS BEGIN DBMS_OUTPUT.PUT_LINE('Hello!'); END;</td>\n<td>omit_trailing_semicolon=False</td>\n</tr>\n<tr>\n<td>@{parameters}</td>\n<td>Create List</td>\n<td>person_employee_table</td>\n</tr>\n<tr>\n<td>Execute Sql String</td>\n<td>DELETE FROM %s</td>\n<td>parameters=${parameters}</td>\n</tr>\n</table>",
      "shortdoc": "Executes the ``sql_string`` as a single SQL command.",
      "tags": [],
      "source": "C:\\Python313\\Lib\\site-packages\\DatabaseLibrary\\query.py",
      "lineno": 406
    },
    {
      "name": "Query",
      "args": [
        {
          "name": "select_statement",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "select_statement: str"
        },
        {
          "name": "no_transaction",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "no_transaction: bool = False"
        },
        {
          "name": "return_dict",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "return_dict: bool = False"
        },
        {
          "name": "alias",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "alias: str | None = None"
        },
        {
          "name": "parameters",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "Tuple",
                "typedoc": "tuple",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "parameters: Tuple | None = None"
        },
        {
          "name": "",
          "type": null,
          "defaultValue": null,
          "kind": "NAMED_ONLY_MARKER",
          "required": false,
          "repr": "*"
        },
        {
          "name": "selectStatement",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "selectStatement: str | None = None"
        },
        {
          "name": "sansTran",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "bool",
                "typedoc": "boolean",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "sansTran: bool | None = None"
        },
        {
          "name": "returnAsDict",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "bool",
                "typedoc": "boolean",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "returnAsDict: bool | None = None"
        }
      ],
      "returnType": null,
      "doc": "<p>Runs a query with the <code>select_statement</code> and returns the result as list of rows. The type of row values depends on the database module - usually they are tuples or tuple-like objects.</p>\n<p>Set <code>no_transaction</code> to <i>True</i> to run command without explicit transaction commit or rollback in case of error. See <a href=\"#Commit%20behavior\" class=\"name\">Commit behavior</a> for details.</p>\n<p>Set <code>return_dict</code> to <i>True</i> to explicitly convert the return values into list of dictionaries.</p>\n<p>Use <code>alias</code> to specify what connection should be used if <a href=\"#Handling%20multiple%20database%20connections\" class=\"name\">Handling multiple database connections</a>.</p>\n<p>Use <code>parameters</code> for query variable substitution (variable substitution syntax may be different depending on the database client).</p>\n<h4>Some parameters were renamed in version 2.0</h4>\n<p>The old parameters <code>selectStatement</code>, <code>sansTran</code> and <code>returnAsDict</code> are <b>deprecated</b>, please use new parameters <code>select_statement</code>, <code>no_transaction</code> and <code>return_dict</code> instead.</p>\n<p><b>The old parameters will be removed in future versions.</b></p>\n<h4>Examples</h4>\n<table border=\"1\">\n<tr>\n<td>${Results}=</td>\n<td>Query</td>\n<td>select LAST_NAME from person</td>\n<td></td>\n</tr>\n<tr>\n<td>${Results}=</td>\n<td>Query</td>\n<td>select LAST_NAME from person</td>\n<td>no_transaction=True</td>\n</tr>\n<tr>\n<td>${Results}=</td>\n<td>Query</td>\n<td>select LAST_NAME from person</td>\n<td>return_dict=True</td>\n</tr>\n<tr>\n<td>${Results}=</td>\n<td>Query</td>\n<td>select LAST_NAME from person</td>\n<td>alias=postgres</td>\n</tr>\n<tr>\n<td>@{parameters}</td>\n<td>Create List</td>\n<td>person</td>\n<td></td>\n</tr>\n<tr>\n<td>${Results}=</td>\n<td>Query</td>\n<td>SELECT * FROM %s</td>\n<td>parameters=${parameters}</td>\n</tr>\n</table>",
      "shortdoc": "Runs a query with the ``select_statement`` and returns the result as list of rows. The type of row values depends on the database module - usually they are tuples or tuple-like objects.",
      "tags": [],
      "source": "C:\\Python313\\Lib\\site-packages\\DatabaseLibrary\\query.py",
      "lineno": 41
    },
    {
      "name": "Row Count",
      "args": [
        {
          "name": "select_statement",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "select_statement: str"
        },
        {
          "name": "no_transaction",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "no_transaction: bool = False"
        },
        {
          "name": "alias",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "alias: str | None = None"
        },
        {
          "name": "parameters",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "Tuple",
                "typedoc": "tuple",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "parameters: Tuple | None = None"
        },
        {
          "name": "",
          "type": null,
          "defaultValue": null,
          "kind": "NAMED_ONLY_MARKER",
          "required": false,
          "repr": "*"
        },
        {
          "name": "selectStatement",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "selectStatement: str | None = None"
        },
        {
          "name": "sansTran",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "bool",
                "typedoc": "boolean",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "sansTran: bool | None = None"
        }
      ],
      "returnType": null,
      "doc": "<p>Runs a query with the <code>select_statement</code> and returns the number of rows in the result.</p>\n<p>Set <code>no_transaction</code> to <i>True</i> to run command without explicit transaction commit or rollback in case of error. See <a href=\"#Commit%20behavior\" class=\"name\">Commit behavior</a> for details.</p>\n<p>Use <code>alias</code> to specify what connection should be used if <a href=\"#Handling%20multiple%20database%20connections\" class=\"name\">Handling multiple database connections</a>.</p>\n<p>Use <code>parameters</code> for query variable substitution (variable substitution syntax may be different depending on the database client).</p>\n<h4>Some parameters were renamed in version 2.0</h4>\n<p>The old parameters <code>selectStatement</code> and <code>sansTran</code> are <b>deprecated</b>, please use new parameters <code>select_statement</code> and <code>no_transaction</code> instead.</p>\n<p><b>The old parameters will be removed in future versions.</b></p>\n<h4>Examples</h4>\n<table border=\"1\">\n<tr>\n<td>${Rows}=</td>\n<td>Row Count</td>\n<td>select LAST_NAME from person</td>\n<td></td>\n</tr>\n<tr>\n<td>${Rows}=</td>\n<td>Row Count</td>\n<td>select LAST_NAME from person</td>\n<td>no_transaction=True</td>\n</tr>\n<tr>\n<td>${Rows}=</td>\n<td>Row Count</td>\n<td>select LAST_NAME from person</td>\n<td>alias=postgres</td>\n</tr>\n<tr>\n<td>@{parameters}</td>\n<td>Create List</td>\n<td>person</td>\n<td></td>\n</tr>\n<tr>\n<td>${Rows}=</td>\n<td>Row Count</td>\n<td>SELECT * FROM %s</td>\n<td>parameters=${parameters}</td>\n</tr>\n</table>",
      "shortdoc": "Runs a query with the ``select_statement`` and returns the number of rows in the result.",
      "tags": [],
      "source": "C:\\Python313\\Lib\\site-packages\\DatabaseLibrary\\query.py",
      "lineno": 105
    },
    {
      "name": "Row Count Is 0",
      "args": [
        {
          "name": "selectStatement",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "selectStatement: str"
        },
        {
          "name": "sansTran",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "sansTran: bool = False"
        },
        {
          "name": "msg",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "msg: str | None = None"
        },
        {
          "name": "alias",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "alias: str | None = None"
        },
        {
          "name": "parameters",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "Tuple",
                "typedoc": "tuple",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "parameters: Tuple | None = None"
        }
      ],
      "returnType": null,
      "doc": "<p><b>DEPRECATED</b> Use new <a href=\"#Check%20Row%20Count\" class=\"name\">Check Row Count</a> keyword with assertion engine instead. The deprecated keyword will be removed in future versions.</p>\n<p>Check if any rows are returned from the submitted <code>selectStatement</code>. If there are, then this will throw an AssertionError.</p>\n<p>Set optional input <code>sansTran</code> to <i>True</i> to run command without an explicit transaction commit or rollback.</p>\n<p>The default error message can be overridden with the <code>msg</code> argument.</p>\n<p>Use optional <code>alias</code> parameter to specify what connection should be used for the query if you have more than one connection open.</p>\n<p>Use <code>parameters</code> for query variable substitution (variable substitution syntax may be different depending on the database client).</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Row Count is 0</td>\n<td>SELECT id FROM person WHERE first_name = 'Franz Allan'</td>\n<td></td>\n</tr>\n<tr>\n<td>Row Count is 0</td>\n<td>SELECT id FROM person WHERE first_name = 'Franz Allan'</td>\n<td>msg=my error message</td>\n</tr>\n<tr>\n<td>Row Count is 0</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td>alias=my_alias</td>\n</tr>\n<tr>\n<td>Row Count is 0</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td>sansTran=True</td>\n</tr>\n<tr>\n<td>@{parameters}</td>\n<td>Create List</td>\n<td>John</td>\n</tr>\n<tr>\n<td>Row Count is 0</td>\n<td>SELECT id FROM person WHERE first_name = %s</td>\n<td>parameters=${parameters}</td>\n</tr>\n</table>",
      "shortdoc": "*DEPRECATED* Use new `Check Row Count` keyword with assertion engine instead. The deprecated keyword will be removed in future versions.",
      "tags": [],
      "source": "C:\\Python313\\Lib\\site-packages\\DatabaseLibrary\\assertion.py",
      "lineno": 110,
      "deprecated": true
    },
    {
      "name": "Row Count Is Equal To X",
      "args": [
        {
          "name": "selectStatement",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "selectStatement: str"
        },
        {
          "name": "numRows",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "numRows: str"
        },
        {
          "name": "sansTran",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "sansTran: bool = False"
        },
        {
          "name": "msg",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "msg: str | None = None"
        },
        {
          "name": "alias",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "alias: str | None = None"
        },
        {
          "name": "parameters",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "Tuple",
                "typedoc": "tuple",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "parameters: Tuple | None = None"
        }
      ],
      "returnType": null,
      "doc": "<p><b>DEPRECATED</b> Use new <a href=\"#Check%20Row%20Count\" class=\"name\">Check Row Count</a> keyword with assertion engine instead. The deprecated keyword will be removed in future versions.</p>\n<p>Check if the number of rows returned from <code>selectStatement</code> is equal to the value submitted. If not, then this will throw an AssertionError.</p>\n<p>Set optional input <code>sansTran</code> to <i>True</i> to run command without an explicit transaction commit or rollback.</p>\n<p>The default error message can be overridden with the <code>msg</code> argument.</p>\n<p>Use optional <code>alias</code> parameter to specify what connection should be used for the query if you have more than one connection open.</p>\n<p>Use <code>parameters</code> for query variable substitution (variable substitution syntax may be different depending on the database client).</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Row Count Is Equal To X</td>\n<td>SELECT id FROM person</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>Row Count Is Equal To X</td>\n<td>SELECT id FROM person</td>\n<td>3</td>\n<td>msg=my error message</td>\n</tr>\n<tr>\n<td>Row Count Is Equal To X</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td>0</td>\n<td>alias=my_alias</td>\n</tr>\n<tr>\n<td>Row Count Is Equal To X</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td>0</td>\n<td>sansTran=True</td>\n</tr>\n<tr>\n<td>@{parameters}</td>\n<td>Create List</td>\n<td>John</td>\n<td></td>\n</tr>\n<tr>\n<td>Row Count Is Equal To X</td>\n<td>SELECT id FROM person WHERE first_name = %s</td>\n<td>0</td>\n<td>parameters=${parameters}</td>\n</tr>\n</table>",
      "shortdoc": "*DEPRECATED* Use new `Check Row Count` keyword with assertion engine instead. The deprecated keyword will be removed in future versions.",
      "tags": [],
      "source": "C:\\Python313\\Lib\\site-packages\\DatabaseLibrary\\assertion.py",
      "lineno": 148,
      "deprecated": true
    },
    {
      "name": "Row Count Is Greater Than X",
      "args": [
        {
          "name": "selectStatement",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "selectStatement: str"
        },
        {
          "name": "numRows",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "numRows: str"
        },
        {
          "name": "sansTran",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "sansTran: bool = False"
        },
        {
          "name": "msg",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "msg: str | None = None"
        },
        {
          "name": "alias",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "alias: str | None = None"
        },
        {
          "name": "parameters",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "Tuple",
                "typedoc": "tuple",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "parameters: Tuple | None = None"
        }
      ],
      "returnType": null,
      "doc": "<p><b>DEPRECATED</b> Use new <a href=\"#Check%20Row%20Count\" class=\"name\">Check Row Count</a> keyword with assertion engine instead. The deprecated keyword will be removed in future versions.</p>\n<p>Check if the number of rows returned from <code>selectStatement</code> is greater than the value submitted. If not, then this will throw an AssertionError.</p>\n<p>Set optional input <code>sansTran</code> to <i>True</i> to run command without an explicit transaction commit or rollback.</p>\n<p>The default error message can be overridden with the <code>msg</code> argument.</p>\n<p>Use optional <code>alias</code> parameter to specify what connection should be used for the query if you have more than one connection open.</p>\n<p>Use <code>parameters</code> for query variable substitution (variable substitution syntax may be different depending on the database client).</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Row Count Is Greater Than X</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>Row Count Is Greater Than X</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td>0</td>\n<td>msg=my error message</td>\n</tr>\n<tr>\n<td>Row Count Is Greater Than X</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td>0</td>\n<td>alias=my_alias</td>\n</tr>\n<tr>\n<td>Row Count Is Greater Than X</td>\n<td>SELECT id FROM person</td>\n<td>1</td>\n<td>sansTran=True</td>\n</tr>\n<tr>\n<td>@{parameters}</td>\n<td>Create List</td>\n<td>John</td>\n<td></td>\n</tr>\n<tr>\n<td>Row Count Is Greater Than X</td>\n<td>SELECT id FROM person WHERE first_name = %s</td>\n<td>0</td>\n<td>parameters=${parameters}</td>\n</tr>\n</table>",
      "shortdoc": "*DEPRECATED* Use new `Check Row Count` keyword with assertion engine instead. The deprecated keyword will be removed in future versions.",
      "tags": [],
      "source": "C:\\Python313\\Lib\\site-packages\\DatabaseLibrary\\assertion.py",
      "lineno": 188,
      "deprecated": true
    },
    {
      "name": "Row Count Is Less Than X",
      "args": [
        {
          "name": "selectStatement",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "selectStatement: str"
        },
        {
          "name": "numRows",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "numRows: str"
        },
        {
          "name": "sansTran",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "sansTran: bool = False"
        },
        {
          "name": "msg",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "msg: str | None = None"
        },
        {
          "name": "alias",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "alias: str | None = None"
        },
        {
          "name": "parameters",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "Tuple",
                "typedoc": "tuple",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "parameters: Tuple | None = None"
        }
      ],
      "returnType": null,
      "doc": "<p><b>DEPRECATED</b> Use new <a href=\"#Check%20Row%20Count\" class=\"name\">Check Row Count</a> keyword with assertion engine instead. The deprecated keyword will be removed in future versions.</p>\n<p>Check if the number of rows returned from <code>selectStatement</code> is less than the value submitted. If not, then this will throw an AssertionError.</p>\n<p>Set optional input <code>sansTran</code> to <i>True</i> to run command without an explicit transaction commit or rollback.</p>\n<p>Using optional <code>msg</code> to override the default error message:</p>\n<p>Use optional <code>alias</code> parameter to specify what connection should be used for the query if you have more than one connection open.</p>\n<p>Use <code>parameters</code> for query variable substitution (variable substitution syntax may be different depending on the database client).</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Row Count Is Less Than X</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>Row Count Is Less Than X</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td>2</td>\n<td>msg=my error message</td>\n</tr>\n<tr>\n<td>Row Count Is Less Than X</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td>3</td>\n<td>alias=my_alias</td>\n</tr>\n<tr>\n<td>Row Count Is Less Than X</td>\n<td>SELECT id FROM person WHERE first_name = 'John'</td>\n<td>4</td>\n<td>sansTran=True</td>\n</tr>\n<tr>\n<td>@{parameters}</td>\n<td>Create List</td>\n<td>John</td>\n<td></td>\n</tr>\n<tr>\n<td>Row Count Is Less Than X</td>\n<td>SELECT id FROM person WHERE first_name = %s</td>\n<td>5</td>\n<td>parameters=${parameters}</td>\n</tr>\n</table>",
      "shortdoc": "*DEPRECATED* Use new `Check Row Count` keyword with assertion engine instead. The deprecated keyword will be removed in future versions.",
      "tags": [],
      "source": "C:\\Python313\\Lib\\site-packages\\DatabaseLibrary\\assertion.py",
      "lineno": 228,
      "deprecated": true
    },
    {
      "name": "Set Auto Commit",
      "args": [
        {
          "name": "auto_commit",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "auto_commit: bool = True"
        },
        {
          "name": "alias",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "alias: str | None = None"
        },
        {
          "name": "",
          "type": null,
          "defaultValue": null,
          "kind": "NAMED_ONLY_MARKER",
          "required": false,
          "repr": "*"
        },
        {
          "name": "autoCommit",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "bool",
                "typedoc": "boolean",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "autoCommit: bool | None = None"
        }
      ],
      "returnType": null,
      "doc": "<p>Explicitly sets the autocommit behavior of the database connection to <code>auto_commit</code>. See <a href=\"#Commit%20behavior\" class=\"name\">Commit behavior</a> for details.</p>\n<p>Use <code>alias</code> to specify what connection should be used if <a href=\"#Handling%20multiple%20database%20connections\" class=\"name\">Handling multiple database connections</a>.</p>\n<h4>Some parameters were renamed in version 2.0</h4>\n<p>The old parameter <code>autoCommit</code> is <b>deprecated</b>, please use new parameter <code>auto_commit</code> instead.</p>\n<p><b>The old parameter will be removed in future versions.</b></p>\n<h4>Examples</h4>\n<pre>\nSet Auto Commit\nSet Auto Commit | False |\nSet Auto Commit | True  | alias=postgres |\n</pre>",
      "shortdoc": "Explicitly sets the autocommit behavior of the database connection to ``auto_commit``. See `Commit behavior` for details.",
      "tags": [],
      "source": "C:\\Python313\\Lib\\site-packages\\DatabaseLibrary\\connection_manager.py",
      "lineno": 627
    },
    {
      "name": "Set Logging Query Results",
      "args": [
        {
          "name": "enabled",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "bool",
                "typedoc": "boolean",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "enabled: bool | None = None"
        },
        {
          "name": "log_head",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "int",
                "typedoc": "integer",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "log_head: int | None = None"
        }
      ],
      "returnType": null,
      "doc": "<p>Allows to enable/disable logging of query results and to adjust the log head value.</p>\n<ul>\n<li>Overrides the values, which were set during the library import.</li>\n<li>See <a href=\"#Logging%20query%20results\" class=\"name\">Logging query results</a> for details.</li>\n</ul>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Set Logging Query Results</td>\n<td>enabled=False</td>\n<td></td>\n</tr>\n<tr>\n<td>Set Logging Query Results</td>\n<td>enabled=True</td>\n<td>log_head=0</td>\n</tr>\n<tr>\n<td>Set Logging Query Results</td>\n<td>log_head=10</td>\n<td></td>\n</tr>\n</table>",
      "shortdoc": "Allows to enable/disable logging of query results and to adjust the log head value. - Overrides the values, which were set during the library import. - See `Logging query results` for details.",
      "tags": [],
      "source": "C:\\Python313\\Lib\\site-packages\\DatabaseLibrary\\query.py",
      "lineno": 763
    },
    {
      "name": "Set Omit Trailing Semicolon",
      "args": [
        {
          "name": "omit_trailing_semicolon",
          "type": null,
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "omit_trailing_semicolon=True"
        },
        {
          "name": "alias",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "alias: str | None = None"
        }
      ],
      "returnType": null,
      "doc": "<p>Set the <code>omit_trailing_semicolon</code> to control the <a href=\"#Omitting%20trailing%20semicolon%20behavior\" class=\"name\">Omitting trailing semicolon behavior</a> for the connection.</p>\n<p>Use <code>alias</code> to specify what connection should be used if <a href=\"#Handling%20multiple%20database%20connections\" class=\"name\">Handling multiple database connections</a>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Set Omit Trailing Semicolon</td>\n<td>True</td>\n<td></td>\n</tr>\n<tr>\n<td>Set Omit Trailing Semicolon</td>\n<td>False</td>\n<td>alias=my_alias</td>\n</tr>\n</table>",
      "shortdoc": "Set the ``omit_trailing_semicolon`` to control the `Omitting trailing semicolon behavior` for the connection.",
      "tags": [],
      "source": "C:\\Python313\\Lib\\site-packages\\DatabaseLibrary\\connection_manager.py",
      "lineno": 665
    },
    {
      "name": "Split Sql Script",
      "args": [
        {
          "name": "script_path",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "script_path: str"
        },
        {
          "name": "external_parser",
          "type": null,
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "external_parser=False"
        }
      ],
      "returnType": null,
      "doc": "<p>Splits the content of the SQL script file loaded from <code>script_path</code> into individual SQL commands and returns them as a list of strings. SQL commands are expected to be delimited by a semicolon (';').</p>\n<p>Set <code>external_parser</code> to <i>True</i> to use the external library <a href=\"https://pypi.org/project/sqlparse/\">sqlparse</a>.</p>",
      "shortdoc": "Splits the content of the SQL script file loaded from ``script_path`` into individual SQL commands and returns them as a list of strings. SQL commands are expected to be delimited by a semicolon (';').",
      "tags": [],
      "source": "C:\\Python313\\Lib\\site-packages\\DatabaseLibrary\\query.py",
      "lineno": 322
    },
    {
      "name": "Switch Database",
      "args": [
        {
          "name": "alias",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "alias: str"
        }
      ],
      "returnType": null,
      "doc": "<p>Switch the default database connection to <code>alias</code>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Switch Database</td>\n<td>my_alias</td>\n</tr>\n<tr>\n<td>Switch Database</td>\n<td>alias=my_alias</td>\n</tr>\n</table>",
      "shortdoc": "Switch the default database connection to ``alias``.",
      "tags": [],
      "source": "C:\\Python313\\Lib\\site-packages\\DatabaseLibrary\\connection_manager.py",
      "lineno": 655
    },
    {
      "name": "Table Must Exist",
      "args": [
        {
          "name": "table_name",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table_name: str"
        },
        {
          "name": "no_transaction",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "no_transaction: bool = False"
        },
        {
          "name": "msg",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "msg: str | None = None"
        },
        {
          "name": "alias",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "alias: str | None = None"
        },
        {
          "name": "",
          "type": null,
          "defaultValue": null,
          "kind": "NAMED_ONLY_MARKER",
          "required": false,
          "repr": "*"
        },
        {
          "name": "tableName",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "tableName: str | None = None"
        },
        {
          "name": "sansTran",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "bool",
                "typedoc": "boolean",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "sansTran: bool | None = None"
        }
      ],
      "returnType": null,
      "doc": "<p>Check if the table with <span class=\"name\">table_name</span> exists in the database.</p>\n<p>Use <code>msg</code> for custom error message.</p>\n<p>Set <code>no_transaction</code> to <i>True</i> to run command without explicit transaction rollback in case of error. See <a href=\"#Commit%20behavior\" class=\"name\">Commit behavior</a> for details.</p>\n<p>Use <code>alias</code> to specify what connection should be used if <a href=\"#Handling%20multiple%20database%20connections\" class=\"name\">Handling multiple database connections</a>.</p>\n<h4>Some parameters were renamed in version 2.0</h4>\n<p>The old parameters <code>tableName</code> and <code>sansTran</code> are <b>deprecated</b>, please use new parameters <code>table_name</code> and <code>no_transaction</code> instead.</p>\n<p><b>The old parameters will be removed in future versions.</b></p>\n<h4>Examples</h4>\n<table border=\"1\">\n<tr>\n<td>Table Must Exist</td>\n<td>person</td>\n<td></td>\n</tr>\n<tr>\n<td>Table Must Exist</td>\n<td>person</td>\n<td>msg=my error message</td>\n</tr>\n<tr>\n<td>Table Must Exist</td>\n<td>person</td>\n<td>alias=my_alias</td>\n</tr>\n<tr>\n<td>Table Must Exist</td>\n<td>person</td>\n<td>no_transaction=True</td>\n</tr>\n</table>",
      "shortdoc": "Check if the table with `table_name` exists in the database.",
      "tags": [],
      "source": "C:\\Python313\\Lib\\site-packages\\DatabaseLibrary\\assertion.py",
      "lineno": 416
    }
  ],
  "typedocs": [
    {
      "type": "Standard",
      "name": "Any",
      "doc": "<p>Any value is accepted. No conversion is done.</p>",
      "usages": [
        "Check Query Result"
      ],
      "accepts": [
        "Any"
      ]
    },
    {
      "type": "Enum",
      "name": "AssertionOperator",
      "doc": "<p>Currently supported assertion operators are:</p>\n<table border=\"1\">\n<tr>\n<th>Operator</th>\n<th>Alternative Operators</th>\n<th>Description</th>\n<th>Validate Equivalent</th>\n</tr>\n<tr>\n<td><code>==</code></td>\n<td><code>equal</code>, <code>equals</code>, <code>should be</code></td>\n<td>Checks if returned value is equal to expected value.</td>\n<td><code>value == expected</code></td>\n</tr>\n<tr>\n<td><code>!=</code></td>\n<td><code>inequal</code>, <code>should not be</code></td>\n<td>Checks if returned value is not equal to expected value.</td>\n<td><code>value != expected</code></td>\n</tr>\n<tr>\n<td><code>&gt;</code></td>\n<td><code>greater than</code></td>\n<td>Checks if returned value is greater than expected value.</td>\n<td><code>value &gt; expected</code></td>\n</tr>\n<tr>\n<td><code>&gt;=</code></td>\n<td></td>\n<td>Checks if returned value is greater than or equal to expected value.</td>\n<td><code>value &gt;= expected</code></td>\n</tr>\n<tr>\n<td><code>&lt;</code></td>\n<td><code>less than</code></td>\n<td>Checks if returned value is less than expected value.</td>\n<td><code>value &lt; expected</code></td>\n</tr>\n<tr>\n<td><code>&lt;=</code></td>\n<td></td>\n<td>Checks if returned value is less than or equal to expected value.</td>\n<td><code>value &lt;= expected</code></td>\n</tr>\n<tr>\n<td><code>*=</code></td>\n<td><code>contains</code></td>\n<td>Checks if returned value contains expected value as substring.</td>\n<td><code>expected in value</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>not contains</code></td>\n<td>Checks if returned value does not contain expected value as substring.</td>\n<td><code>expected in value</code></td>\n</tr>\n<tr>\n<td><code>^=</code></td>\n<td><code>should start with</code>, <code>starts</code></td>\n<td>Checks if returned value starts with expected value.</td>\n<td><code>re.search(f\"^{expected}\", value)</code></td>\n</tr>\n<tr>\n<td><code>$=</code></td>\n<td><code>should end with</code>, <code>ends</code></td>\n<td>Checks if returned value ends with expected value.</td>\n<td><code>re.search(f\"{expected}$\", value)</code></td>\n</tr>\n<tr>\n<td><code>matches</code></td>\n<td></td>\n<td>Checks if given RegEx matches minimum once in returned value.</td>\n<td><code>re.search(expected, value)</code></td>\n</tr>\n<tr>\n<td><code>validate</code></td>\n<td></td>\n<td>Checks if given Python expression evaluates to <code>True</code>.</td>\n<td></td>\n</tr>\n<tr>\n<td><code>evaluate</code></td>\n<td><code>then</code></td>\n<td>When using this operator, the keyword does return the evaluated Python expression.</td>\n<td></td>\n</tr>\n</table>\n<p>Currently supported formatters for assertions are:</p>\n<table border=\"1\">\n<tr>\n<th>Formatter</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>normalize spaces</code></td>\n<td>Substitutes multiple spaces to single space from the value</td>\n</tr>\n<tr>\n<td><code>strip</code></td>\n<td>Removes spaces from the beginning and end of the value</td>\n</tr>\n<tr>\n<td><code>case insensitive</code></td>\n<td>Converts value to lower case before comparing</td>\n</tr>\n<tr>\n<td><code>apply to expected</code></td>\n<td>Applies rules also for the expected value</td>\n</tr>\n</table>\n<p>Formatters are applied to the value before assertion is performed and keywords returns a value where rule is applied. Formatter is only applied to the value which keyword returns and not all rules are valid for all assertion operators. If <code>apply to expected</code> formatter is defined, then formatters are then formatter are also applied to expected value.</p>",
      "usages": [
        "Check Query Result",
        "Check Row Count"
      ],
      "accepts": [
        "string"
      ],
      "members": [
        {
          "name": "equal",
          "value": "=="
        },
        {
          "name": "equals",
          "value": "=="
        },
        {
          "name": "==",
          "value": "=="
        },
        {
          "name": "should be",
          "value": "=="
        },
        {
          "name": "inequal",
          "value": "!="
        },
        {
          "name": "!=",
          "value": "!="
        },
        {
          "name": "should not be",
          "value": "!="
        },
        {
          "name": "less than",
          "value": "<"
        },
        {
          "name": "<",
          "value": "<"
        },
        {
          "name": "greater than",
          "value": ">"
        },
        {
          "name": ">",
          "value": ">"
        },
        {
          "name": "<=",
          "value": "<="
        },
        {
          "name": ">=",
          "value": ">="
        },
        {
          "name": "contains",
          "value": "*="
        },
        {
          "name": "not contains",
          "value": "not contains"
        },
        {
          "name": "*=",
          "value": "*="
        },
        {
          "name": "starts",
          "value": "^="
        },
        {
          "name": "^=",
          "value": "^="
        },
        {
          "name": "should start with",
          "value": "^="
        },
        {
          "name": "ends",
          "value": "$="
        },
        {
          "name": "should end with",
          "value": "$="
        },
        {
          "name": "$=",
          "value": "$="
        },
        {
          "name": "matches",
          "value": "$"
        },
        {
          "name": "validate",
          "value": "validate"
        },
        {
          "name": "then",
          "value": "then"
        },
        {
          "name": "evaluate",
          "value": "then"
        }
      ]
    },
    {
      "type": "Standard",
      "name": "boolean",
      "doc": "<p>Strings <code>TRUE</code>, <code>YES</code>, <code>ON</code> and <code>1</code> are converted to Boolean <code>True</code>, the empty string as well as strings <code>FALSE</code>, <code>NO</code>, <code>OFF</code> and <code>0</code> are converted to Boolean <code>False</code>, and the string <code>NONE</code> is converted to the Python <code>None</code> object. Other strings and other accepted values are passed as-is, allowing keywords to handle them specially if needed. All string comparisons are case-insensitive.</p>\n<p>Examples: <code>TRUE</code> (converted to <code>True</code>), <code>off</code> (converted to <code>False</code>), <code>example</code> (used as-is)</p>",
      "usages": [
        "Call Stored Procedure",
        "Check If Exists In Database",
        "Check If Not Exists In Database",
        "Check Query Result",
        "Check Row Count",
        "Delete All Rows From Table",
        "Description",
        "Disconnect From Database",
        "Execute Sql Script",
        "Execute Sql String",
        "Query",
        "Row Count",
        "Row Count Is 0",
        "Row Count Is Equal To X",
        "Row Count Is Greater Than X",
        "Row Count Is Less Than X",
        "Set Auto Commit",
        "Set Logging Query Results",
        "Table Must Exist"
      ],
      "accepts": [
        "string",
        "integer",
        "float",
        "None"
      ]
    },
    {
      "type": "Standard",
      "name": "integer",
      "doc": "<p>Conversion is done using Python's <a href=\"https://docs.python.org/library/functions.html#int\">int</a> built-in function. Floating point numbers are accepted only if they can be represented as integers exactly. For example, <code>1.0</code> is accepted and <code>1.1</code> is not.</p>\n<p>Starting from RF 4.1, it is possible to use hexadecimal, octal and binary numbers by prefixing values with <code>0x</code>, <code>0o</code> and <code>0b</code>, respectively.</p>\n<p>Starting from RF 4.1, spaces and underscores can be used as visual separators for digit grouping purposes.</p>\n<p>Examples: <code>42</code>, <code>-1</code>, <code>0b1010</code>, <code>10 000 000</code>, <code>0xBAD_C0FFEE</code></p>",
      "usages": [
        "Check Row Count",
        "Connect To Database",
        "Set Logging Query Results"
      ],
      "accepts": [
        "string",
        "float"
      ]
    },
    {
      "type": "Standard",
      "name": "list",
      "doc": "<p>Strings must be Python <a href=\"https://docs.python.org/library/stdtypes.html#list\">list</a> literals. They are converted to actual lists using the <a href=\"https://docs.python.org/library/ast.html#ast.literal_eval\">ast.literal_eval</a> function. They can contain any values <code>ast.literal_eval</code> supports, including lists and other containers.</p>\n<p>If the type has nested types like <code>list[int]</code>, items are converted to those types automatically. This in new in Robot Framework 6.0.</p>\n<p>Examples: <code>['one', 'two']</code>, <code>[('one', 1), ('two', 2)]</code></p>",
      "usages": [
        "Call Stored Procedure"
      ],
      "accepts": [
        "string",
        "Sequence"
      ]
    },
    {
      "type": "Standard",
      "name": "None",
      "doc": "<p>String <code>NONE</code> (case-insensitive) is converted to Python <code>None</code> object. Other values cause an error.</p>",
      "usages": [
        "Call Stored Procedure",
        "Check If Exists In Database",
        "Check If Not Exists In Database",
        "Check Query Result",
        "Check Row Count",
        "Connect To Database",
        "Connect To Database Using Custom Connection String",
        "Connect To Database Using Custom Params",
        "Delete All Rows From Table",
        "Description",
        "Disconnect From Database",
        "Execute Sql Script",
        "Execute Sql String",
        "Query",
        "Row Count",
        "Row Count Is 0",
        "Row Count Is Equal To X",
        "Row Count Is Greater Than X",
        "Row Count Is Less Than X",
        "Set Auto Commit",
        "Set Logging Query Results",
        "Set Omit Trailing Semicolon",
        "Table Must Exist"
      ],
      "accepts": [
        "string"
      ]
    },
    {
      "type": "Standard",
      "name": "string",
      "doc": "<p>All arguments are converted to Unicode strings.</p>",
      "usages": [
        "Call Stored Procedure",
        "Check If Exists In Database",
        "Check If Not Exists In Database",
        "Check Query Result",
        "Check Row Count",
        "Connect To Database",
        "Connect To Database Using Custom Connection String",
        "Connect To Database Using Custom Params",
        "Delete All Rows From Table",
        "Description",
        "Disconnect From Database",
        "Execute Sql Script",
        "Execute Sql String",
        "Query",
        "Row Count",
        "Row Count Is 0",
        "Row Count Is Equal To X",
        "Row Count Is Greater Than X",
        "Row Count Is Less Than X",
        "Set Auto Commit",
        "Set Omit Trailing Semicolon",
        "Split Sql Script",
        "Switch Database",
        "Table Must Exist"
      ],
      "accepts": [
        "Any"
      ]
    },
    {
      "type": "Standard",
      "name": "tuple",
      "doc": "<p>Strings must be Python <a href=\"https://docs.python.org/library/stdtypes.html#tuple\">tuple</a> literals. They are converted to actual tuples using the <a href=\"https://docs.python.org/library/ast.html#ast.literal_eval\">ast.literal_eval</a> function. They can contain any values <code>ast.literal_eval</code> supports, including tuples and other containers.</p>\n<p>If the type has nested types like <code>tuple[str, int, int]</code>, items are converted to those types automatically. This in new in Robot Framework 6.0.</p>\n<p>Examples: <code>('one', 'two')</code>, <code>(('one', 1), ('two', 2))</code></p>",
      "usages": [
        "Check If Exists In Database",
        "Check If Not Exists In Database",
        "Check Query Result",
        "Check Row Count",
        "Description",
        "Execute Sql String",
        "Query",
        "Row Count",
        "Row Count Is 0",
        "Row Count Is Equal To X",
        "Row Count Is Greater Than X",
        "Row Count Is Less Than X"
      ],
      "accepts": [
        "string",
        "Sequence"
      ]
    }
  ]
}